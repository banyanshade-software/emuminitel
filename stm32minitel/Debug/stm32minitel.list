
stm32minitel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006640  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000016c  08006820  08006820  00016820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800698c  0800698c  00020134  2**0
                  CONTENTS
  4 .ARM          00000008  0800698c  0800698c  0001698c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006994  08006994  00020134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006994  08006994  00016994  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006998  08006998  00016998  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  0800699c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000080  200000b4  08006a50  000200b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000cc8  20000134  08006ad0  00020134  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000dfc  08006ad0  00020dfc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 14 .debug_info   00019eb0  00000000  00000000  000201a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003c58  00000000  00000000  0003a057  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000016c0  00000000  00000000  0003dcb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001194  00000000  00000000  0003f370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000214fc  00000000  00000000  00040504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001b766  00000000  00000000  00061a00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d5b77  00000000  00000000  0007d166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005e84  00000000  00000000  00152ce0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  00158b64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000134 	.word	0x20000134
 80001fc:	00000000 	.word	0x00000000
 8000200:	08006808 	.word	0x08006808

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000138 	.word	0x20000138
 800021c:	08006808 	.word	0x08006808

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000240:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000244:	f000 b970 	b.w	8000528 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9e08      	ldr	r6, [sp, #32]
 8000266:	460d      	mov	r5, r1
 8000268:	4604      	mov	r4, r0
 800026a:	460f      	mov	r7, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14a      	bne.n	8000306 <__udivmoddi4+0xa6>
 8000270:	428a      	cmp	r2, r1
 8000272:	4694      	mov	ip, r2
 8000274:	d965      	bls.n	8000342 <__udivmoddi4+0xe2>
 8000276:	fab2 f382 	clz	r3, r2
 800027a:	b143      	cbz	r3, 800028e <__udivmoddi4+0x2e>
 800027c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000280:	f1c3 0220 	rsb	r2, r3, #32
 8000284:	409f      	lsls	r7, r3
 8000286:	fa20 f202 	lsr.w	r2, r0, r2
 800028a:	4317      	orrs	r7, r2
 800028c:	409c      	lsls	r4, r3
 800028e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000292:	fa1f f58c 	uxth.w	r5, ip
 8000296:	fbb7 f1fe 	udiv	r1, r7, lr
 800029a:	0c22      	lsrs	r2, r4, #16
 800029c:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002a4:	fb01 f005 	mul.w	r0, r1, r5
 80002a8:	4290      	cmp	r0, r2
 80002aa:	d90a      	bls.n	80002c2 <__udivmoddi4+0x62>
 80002ac:	eb1c 0202 	adds.w	r2, ip, r2
 80002b0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002b4:	f080 811c 	bcs.w	80004f0 <__udivmoddi4+0x290>
 80002b8:	4290      	cmp	r0, r2
 80002ba:	f240 8119 	bls.w	80004f0 <__udivmoddi4+0x290>
 80002be:	3902      	subs	r1, #2
 80002c0:	4462      	add	r2, ip
 80002c2:	1a12      	subs	r2, r2, r0
 80002c4:	b2a4      	uxth	r4, r4
 80002c6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ca:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ce:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002d2:	fb00 f505 	mul.w	r5, r0, r5
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	d90a      	bls.n	80002f0 <__udivmoddi4+0x90>
 80002da:	eb1c 0404 	adds.w	r4, ip, r4
 80002de:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002e2:	f080 8107 	bcs.w	80004f4 <__udivmoddi4+0x294>
 80002e6:	42a5      	cmp	r5, r4
 80002e8:	f240 8104 	bls.w	80004f4 <__udivmoddi4+0x294>
 80002ec:	4464      	add	r4, ip
 80002ee:	3802      	subs	r0, #2
 80002f0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f4:	1b64      	subs	r4, r4, r5
 80002f6:	2100      	movs	r1, #0
 80002f8:	b11e      	cbz	r6, 8000302 <__udivmoddi4+0xa2>
 80002fa:	40dc      	lsrs	r4, r3
 80002fc:	2300      	movs	r3, #0
 80002fe:	e9c6 4300 	strd	r4, r3, [r6]
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	428b      	cmp	r3, r1
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0xbc>
 800030a:	2e00      	cmp	r6, #0
 800030c:	f000 80ed 	beq.w	80004ea <__udivmoddi4+0x28a>
 8000310:	2100      	movs	r1, #0
 8000312:	e9c6 0500 	strd	r0, r5, [r6]
 8000316:	4608      	mov	r0, r1
 8000318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031c:	fab3 f183 	clz	r1, r3
 8000320:	2900      	cmp	r1, #0
 8000322:	d149      	bne.n	80003b8 <__udivmoddi4+0x158>
 8000324:	42ab      	cmp	r3, r5
 8000326:	d302      	bcc.n	800032e <__udivmoddi4+0xce>
 8000328:	4282      	cmp	r2, r0
 800032a:	f200 80f8 	bhi.w	800051e <__udivmoddi4+0x2be>
 800032e:	1a84      	subs	r4, r0, r2
 8000330:	eb65 0203 	sbc.w	r2, r5, r3
 8000334:	2001      	movs	r0, #1
 8000336:	4617      	mov	r7, r2
 8000338:	2e00      	cmp	r6, #0
 800033a:	d0e2      	beq.n	8000302 <__udivmoddi4+0xa2>
 800033c:	e9c6 4700 	strd	r4, r7, [r6]
 8000340:	e7df      	b.n	8000302 <__udivmoddi4+0xa2>
 8000342:	b902      	cbnz	r2, 8000346 <__udivmoddi4+0xe6>
 8000344:	deff      	udf	#255	; 0xff
 8000346:	fab2 f382 	clz	r3, r2
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8090 	bne.w	8000470 <__udivmoddi4+0x210>
 8000350:	1a8a      	subs	r2, r1, r2
 8000352:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000356:	fa1f fe8c 	uxth.w	lr, ip
 800035a:	2101      	movs	r1, #1
 800035c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000360:	fb07 2015 	mls	r0, r7, r5, r2
 8000364:	0c22      	lsrs	r2, r4, #16
 8000366:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800036a:	fb0e f005 	mul.w	r0, lr, r5
 800036e:	4290      	cmp	r0, r2
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x124>
 8000372:	eb1c 0202 	adds.w	r2, ip, r2
 8000376:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x122>
 800037c:	4290      	cmp	r0, r2
 800037e:	f200 80cb 	bhi.w	8000518 <__udivmoddi4+0x2b8>
 8000382:	4645      	mov	r5, r8
 8000384:	1a12      	subs	r2, r2, r0
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb2 f0f7 	udiv	r0, r2, r7
 800038c:	fb07 2210 	mls	r2, r7, r0, r2
 8000390:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000394:	fb0e fe00 	mul.w	lr, lr, r0
 8000398:	45a6      	cmp	lr, r4
 800039a:	d908      	bls.n	80003ae <__udivmoddi4+0x14e>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003a4:	d202      	bcs.n	80003ac <__udivmoddi4+0x14c>
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	f200 80bb 	bhi.w	8000522 <__udivmoddi4+0x2c2>
 80003ac:	4610      	mov	r0, r2
 80003ae:	eba4 040e 	sub.w	r4, r4, lr
 80003b2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003b6:	e79f      	b.n	80002f8 <__udivmoddi4+0x98>
 80003b8:	f1c1 0720 	rsb	r7, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 fc07 	lsr.w	ip, r2, r7
 80003c2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003c6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ca:	fa20 f307 	lsr.w	r3, r0, r7
 80003ce:	40fd      	lsrs	r5, r7
 80003d0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003d4:	4323      	orrs	r3, r4
 80003d6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003da:	fa1f fe8c 	uxth.w	lr, ip
 80003de:	fb09 5518 	mls	r5, r9, r8, r5
 80003e2:	0c1c      	lsrs	r4, r3, #16
 80003e4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003e8:	fb08 f50e 	mul.w	r5, r8, lr
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	fa00 f001 	lsl.w	r0, r0, r1
 80003f6:	d90b      	bls.n	8000410 <__udivmoddi4+0x1b0>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000400:	f080 8088 	bcs.w	8000514 <__udivmoddi4+0x2b4>
 8000404:	42a5      	cmp	r5, r4
 8000406:	f240 8085 	bls.w	8000514 <__udivmoddi4+0x2b4>
 800040a:	f1a8 0802 	sub.w	r8, r8, #2
 800040e:	4464      	add	r4, ip
 8000410:	1b64      	subs	r4, r4, r5
 8000412:	b29d      	uxth	r5, r3
 8000414:	fbb4 f3f9 	udiv	r3, r4, r9
 8000418:	fb09 4413 	mls	r4, r9, r3, r4
 800041c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000420:	fb03 fe0e 	mul.w	lr, r3, lr
 8000424:	45a6      	cmp	lr, r4
 8000426:	d908      	bls.n	800043a <__udivmoddi4+0x1da>
 8000428:	eb1c 0404 	adds.w	r4, ip, r4
 800042c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000430:	d26c      	bcs.n	800050c <__udivmoddi4+0x2ac>
 8000432:	45a6      	cmp	lr, r4
 8000434:	d96a      	bls.n	800050c <__udivmoddi4+0x2ac>
 8000436:	3b02      	subs	r3, #2
 8000438:	4464      	add	r4, ip
 800043a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800043e:	fba3 9502 	umull	r9, r5, r3, r2
 8000442:	eba4 040e 	sub.w	r4, r4, lr
 8000446:	42ac      	cmp	r4, r5
 8000448:	46c8      	mov	r8, r9
 800044a:	46ae      	mov	lr, r5
 800044c:	d356      	bcc.n	80004fc <__udivmoddi4+0x29c>
 800044e:	d053      	beq.n	80004f8 <__udivmoddi4+0x298>
 8000450:	b156      	cbz	r6, 8000468 <__udivmoddi4+0x208>
 8000452:	ebb0 0208 	subs.w	r2, r0, r8
 8000456:	eb64 040e 	sbc.w	r4, r4, lr
 800045a:	fa04 f707 	lsl.w	r7, r4, r7
 800045e:	40ca      	lsrs	r2, r1
 8000460:	40cc      	lsrs	r4, r1
 8000462:	4317      	orrs	r7, r2
 8000464:	e9c6 7400 	strd	r7, r4, [r6]
 8000468:	4618      	mov	r0, r3
 800046a:	2100      	movs	r1, #0
 800046c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000470:	f1c3 0120 	rsb	r1, r3, #32
 8000474:	fa02 fc03 	lsl.w	ip, r2, r3
 8000478:	fa20 f201 	lsr.w	r2, r0, r1
 800047c:	fa25 f101 	lsr.w	r1, r5, r1
 8000480:	409d      	lsls	r5, r3
 8000482:	432a      	orrs	r2, r5
 8000484:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000490:	fb07 1510 	mls	r5, r7, r0, r1
 8000494:	0c11      	lsrs	r1, r2, #16
 8000496:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800049a:	fb00 f50e 	mul.w	r5, r0, lr
 800049e:	428d      	cmp	r5, r1
 80004a0:	fa04 f403 	lsl.w	r4, r4, r3
 80004a4:	d908      	bls.n	80004b8 <__udivmoddi4+0x258>
 80004a6:	eb1c 0101 	adds.w	r1, ip, r1
 80004aa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ae:	d22f      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004b0:	428d      	cmp	r5, r1
 80004b2:	d92d      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004b4:	3802      	subs	r0, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1b49      	subs	r1, r1, r5
 80004ba:	b292      	uxth	r2, r2
 80004bc:	fbb1 f5f7 	udiv	r5, r1, r7
 80004c0:	fb07 1115 	mls	r1, r7, r5, r1
 80004c4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c8:	fb05 f10e 	mul.w	r1, r5, lr
 80004cc:	4291      	cmp	r1, r2
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x282>
 80004d0:	eb1c 0202 	adds.w	r2, ip, r2
 80004d4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004d8:	d216      	bcs.n	8000508 <__udivmoddi4+0x2a8>
 80004da:	4291      	cmp	r1, r2
 80004dc:	d914      	bls.n	8000508 <__udivmoddi4+0x2a8>
 80004de:	3d02      	subs	r5, #2
 80004e0:	4462      	add	r2, ip
 80004e2:	1a52      	subs	r2, r2, r1
 80004e4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004e8:	e738      	b.n	800035c <__udivmoddi4+0xfc>
 80004ea:	4631      	mov	r1, r6
 80004ec:	4630      	mov	r0, r6
 80004ee:	e708      	b.n	8000302 <__udivmoddi4+0xa2>
 80004f0:	4639      	mov	r1, r7
 80004f2:	e6e6      	b.n	80002c2 <__udivmoddi4+0x62>
 80004f4:	4610      	mov	r0, r2
 80004f6:	e6fb      	b.n	80002f0 <__udivmoddi4+0x90>
 80004f8:	4548      	cmp	r0, r9
 80004fa:	d2a9      	bcs.n	8000450 <__udivmoddi4+0x1f0>
 80004fc:	ebb9 0802 	subs.w	r8, r9, r2
 8000500:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000504:	3b01      	subs	r3, #1
 8000506:	e7a3      	b.n	8000450 <__udivmoddi4+0x1f0>
 8000508:	4645      	mov	r5, r8
 800050a:	e7ea      	b.n	80004e2 <__udivmoddi4+0x282>
 800050c:	462b      	mov	r3, r5
 800050e:	e794      	b.n	800043a <__udivmoddi4+0x1da>
 8000510:	4640      	mov	r0, r8
 8000512:	e7d1      	b.n	80004b8 <__udivmoddi4+0x258>
 8000514:	46d0      	mov	r8, sl
 8000516:	e77b      	b.n	8000410 <__udivmoddi4+0x1b0>
 8000518:	3d02      	subs	r5, #2
 800051a:	4462      	add	r2, ip
 800051c:	e732      	b.n	8000384 <__udivmoddi4+0x124>
 800051e:	4608      	mov	r0, r1
 8000520:	e70a      	b.n	8000338 <__udivmoddi4+0xd8>
 8000522:	4464      	add	r4, ip
 8000524:	3802      	subs	r0, #2
 8000526:	e742      	b.n	80003ae <__udivmoddi4+0x14e>

08000528 <__aeabi_idiv0>:
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop

0800052c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800052c:	b480      	push	{r7}
 800052e:	b085      	sub	sp, #20
 8000530:	af00      	add	r7, sp, #0
 8000532:	60f8      	str	r0, [r7, #12]
 8000534:	60b9      	str	r1, [r7, #8]
 8000536:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	4a07      	ldr	r2, [pc, #28]	; (8000558 <vApplicationGetIdleTaskMemory+0x2c>)
 800053c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800053e:	68bb      	ldr	r3, [r7, #8]
 8000540:	4a06      	ldr	r2, [pc, #24]	; (800055c <vApplicationGetIdleTaskMemory+0x30>)
 8000542:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2280      	movs	r2, #128	; 0x80
 8000548:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800054a:	bf00      	nop
 800054c:	3714      	adds	r7, #20
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	20000150 	.word	0x20000150
 800055c:	200001a4 	.word	0x200001a4

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b5b0      	push	{r4, r5, r7, lr}
 8000562:	b088      	sub	sp, #32
 8000564:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000566:	f000 fe92 	bl	800128e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056a:	f000 f827 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056e:	f000 fa35 	bl	80009dc <MX_GPIO_Init>
  MX_DMA_Init();
 8000572:	f000 f9f1 	bl	8000958 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000576:	f000 f86d 	bl	8000654 <MX_LPUART1_UART_Init>
  MX_UART4_Init();
 800057a:	f000 f8b5 	bl	80006e8 <MX_UART4_Init>
  MX_UART5_Init();
 800057e:	f000 f901 	bl	8000784 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000582:	f000 f94d 	bl	8000820 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000586:	f000 f999 	bl	80008bc <MX_USART3_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of mainTask */
  osThreadStaticDef(mainTask, StartMainTask, osPriorityNormal, 0, 256, mainTaskBuffer, &mainTaskControlBlock);
 800058a:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <main+0x54>)
 800058c:	1d3c      	adds	r4, r7, #4
 800058e:	461d      	mov	r5, r3
 8000590:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000592:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000594:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000598:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mainTaskHandle = osThreadCreate(osThread(mainTask), NULL);
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	2100      	movs	r1, #0
 80005a0:	4618      	mov	r0, r3
 80005a2:	f004 fb72 	bl	8004c8a <osThreadCreate>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4a03      	ldr	r2, [pc, #12]	; (80005b8 <main+0x58>)
 80005aa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005ac:	f004 fb66 	bl	8004c7c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b0:	e7fe      	b.n	80005b0 <main+0x50>
 80005b2:	bf00      	nop
 80005b4:	0800682c 	.word	0x0800682c
 80005b8:	20000808 	.word	0x20000808

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	; 0x50
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0318 	add.w	r3, r7, #24
 80005c6:	2238      	movs	r2, #56	; 0x38
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f006 f8e2 	bl	8006794 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
 80005da:	60da      	str	r2, [r3, #12]
 80005dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005de:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005e2:	f001 fc5b 	bl	8001e9c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e6:	2302      	movs	r3, #2
 80005e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005ee:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f0:	2340      	movs	r3, #64	; 0x40
 80005f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f4:	2302      	movs	r3, #2
 80005f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005f8:	2302      	movs	r3, #2
 80005fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005fc:	2304      	movs	r3, #4
 80005fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000600:	2340      	movs	r3, #64	; 0x40
 8000602:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000604:	2302      	movs	r3, #2
 8000606:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000608:	2302      	movs	r3, #2
 800060a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 800060c:	2304      	movs	r3, #4
 800060e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000610:	f107 0318 	add.w	r3, r7, #24
 8000614:	4618      	mov	r0, r3
 8000616:	f001 fcf5 	bl	8002004 <HAL_RCC_OscConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000620:	f000 fa68 	bl	8000af4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000624:	230f      	movs	r3, #15
 8000626:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000628:	2303      	movs	r3, #3
 800062a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 800062c:	2390      	movs	r3, #144	; 0x90
 800062e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	2100      	movs	r1, #0
 800063c:	4618      	mov	r0, r3
 800063e:	f001 fff3 	bl	8002628 <HAL_RCC_ClockConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000648:	f000 fa54 	bl	8000af4 <Error_Handler>
  }
}
 800064c:	bf00      	nop
 800064e:	3750      	adds	r7, #80	; 0x50
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <MX_LPUART1_UART_Init+0x90>)
 800065c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 8000660:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000664:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000666:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800066c:	4b1c      	ldr	r3, [pc, #112]	; (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 800066e:	2200      	movs	r2, #0
 8000670:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000672:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 8000674:	2200      	movs	r2, #0
 8000676:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000678:	4b19      	ldr	r3, [pc, #100]	; (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 800067a:	220c      	movs	r2, #12
 800067c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800067e:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 8000680:	2200      	movs	r2, #0
 8000682:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000684:	4b16      	ldr	r3, [pc, #88]	; (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 8000686:	2200      	movs	r2, #0
 8000688:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800068a:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 800068c:	2200      	movs	r2, #0
 800068e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000690:	4b13      	ldr	r3, [pc, #76]	; (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 8000692:	2200      	movs	r2, #0
 8000694:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000696:	4812      	ldr	r0, [pc, #72]	; (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 8000698:	f002 ff8a 	bl	80035b0 <HAL_UART_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80006a2:	f000 fa27 	bl	8000af4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006a6:	2100      	movs	r1, #0
 80006a8:	480d      	ldr	r0, [pc, #52]	; (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 80006aa:	f004 fa04 	bl	8004ab6 <HAL_UARTEx_SetTxFifoThreshold>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80006b4:	f000 fa1e 	bl	8000af4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006b8:	2100      	movs	r1, #0
 80006ba:	4809      	ldr	r0, [pc, #36]	; (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 80006bc:	f004 fa39 	bl	8004b32 <HAL_UARTEx_SetRxFifoThreshold>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80006c6:	f000 fa15 	bl	8000af4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80006ca:	4805      	ldr	r0, [pc, #20]	; (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 80006cc:	f004 f9ba 	bl	8004a44 <HAL_UARTEx_DisableFifoMode>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80006d6:	f000 fa0d 	bl	8000af4 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	200003a4 	.word	0x200003a4
 80006e4:	40008000 	.word	0x40008000

080006e8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80006ec:	4b23      	ldr	r3, [pc, #140]	; (800077c <MX_UART4_Init+0x94>)
 80006ee:	4a24      	ldr	r2, [pc, #144]	; (8000780 <MX_UART4_Init+0x98>)
 80006f0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 1200;
 80006f2:	4b22      	ldr	r3, [pc, #136]	; (800077c <MX_UART4_Init+0x94>)
 80006f4:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80006f8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80006fa:	4b20      	ldr	r3, [pc, #128]	; (800077c <MX_UART4_Init+0x94>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000700:	4b1e      	ldr	r3, [pc, #120]	; (800077c <MX_UART4_Init+0x94>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 8000706:	4b1d      	ldr	r3, [pc, #116]	; (800077c <MX_UART4_Init+0x94>)
 8000708:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800070c:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800070e:	4b1b      	ldr	r3, [pc, #108]	; (800077c <MX_UART4_Init+0x94>)
 8000710:	220c      	movs	r2, #12
 8000712:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000714:	4b19      	ldr	r3, [pc, #100]	; (800077c <MX_UART4_Init+0x94>)
 8000716:	2200      	movs	r2, #0
 8000718:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800071a:	4b18      	ldr	r3, [pc, #96]	; (800077c <MX_UART4_Init+0x94>)
 800071c:	2200      	movs	r2, #0
 800071e:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000720:	4b16      	ldr	r3, [pc, #88]	; (800077c <MX_UART4_Init+0x94>)
 8000722:	2200      	movs	r2, #0
 8000724:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000726:	4b15      	ldr	r3, [pc, #84]	; (800077c <MX_UART4_Init+0x94>)
 8000728:	2200      	movs	r2, #0
 800072a:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800072c:	4b13      	ldr	r3, [pc, #76]	; (800077c <MX_UART4_Init+0x94>)
 800072e:	2200      	movs	r2, #0
 8000730:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000732:	4812      	ldr	r0, [pc, #72]	; (800077c <MX_UART4_Init+0x94>)
 8000734:	f002 ff3c 	bl	80035b0 <HAL_UART_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_UART4_Init+0x5a>
  {
    Error_Handler();
 800073e:	f000 f9d9 	bl	8000af4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000742:	2100      	movs	r1, #0
 8000744:	480d      	ldr	r0, [pc, #52]	; (800077c <MX_UART4_Init+0x94>)
 8000746:	f004 f9b6 	bl	8004ab6 <HAL_UARTEx_SetTxFifoThreshold>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_UART4_Init+0x6c>
  {
    Error_Handler();
 8000750:	f000 f9d0 	bl	8000af4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000754:	2100      	movs	r1, #0
 8000756:	4809      	ldr	r0, [pc, #36]	; (800077c <MX_UART4_Init+0x94>)
 8000758:	f004 f9eb 	bl	8004b32 <HAL_UARTEx_SetRxFifoThreshold>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_UART4_Init+0x7e>
  {
    Error_Handler();
 8000762:	f000 f9c7 	bl	8000af4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000766:	4805      	ldr	r0, [pc, #20]	; (800077c <MX_UART4_Init+0x94>)
 8000768:	f004 f96c 	bl	8004a44 <HAL_UARTEx_DisableFifoMode>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_UART4_Init+0x8e>
  {
    Error_Handler();
 8000772:	f000 f9bf 	bl	8000af4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000438 	.word	0x20000438
 8000780:	40004c00 	.word	0x40004c00

08000784 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000788:	4b23      	ldr	r3, [pc, #140]	; (8000818 <MX_UART5_Init+0x94>)
 800078a:	4a24      	ldr	r2, [pc, #144]	; (800081c <MX_UART5_Init+0x98>)
 800078c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 1200;
 800078e:	4b22      	ldr	r3, [pc, #136]	; (8000818 <MX_UART5_Init+0x94>)
 8000790:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8000794:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000796:	4b20      	ldr	r3, [pc, #128]	; (8000818 <MX_UART5_Init+0x94>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800079c:	4b1e      	ldr	r3, [pc, #120]	; (8000818 <MX_UART5_Init+0x94>)
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_EVEN;
 80007a2:	4b1d      	ldr	r3, [pc, #116]	; (8000818 <MX_UART5_Init+0x94>)
 80007a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007a8:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80007aa:	4b1b      	ldr	r3, [pc, #108]	; (8000818 <MX_UART5_Init+0x94>)
 80007ac:	220c      	movs	r2, #12
 80007ae:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b0:	4b19      	ldr	r3, [pc, #100]	; (8000818 <MX_UART5_Init+0x94>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b6:	4b18      	ldr	r3, [pc, #96]	; (8000818 <MX_UART5_Init+0x94>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007bc:	4b16      	ldr	r3, [pc, #88]	; (8000818 <MX_UART5_Init+0x94>)
 80007be:	2200      	movs	r2, #0
 80007c0:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007c2:	4b15      	ldr	r3, [pc, #84]	; (8000818 <MX_UART5_Init+0x94>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c8:	4b13      	ldr	r3, [pc, #76]	; (8000818 <MX_UART5_Init+0x94>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80007ce:	4812      	ldr	r0, [pc, #72]	; (8000818 <MX_UART5_Init+0x94>)
 80007d0:	f002 feee 	bl	80035b0 <HAL_UART_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_UART5_Init+0x5a>
  {
    Error_Handler();
 80007da:	f000 f98b 	bl	8000af4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007de:	2100      	movs	r1, #0
 80007e0:	480d      	ldr	r0, [pc, #52]	; (8000818 <MX_UART5_Init+0x94>)
 80007e2:	f004 f968 	bl	8004ab6 <HAL_UARTEx_SetTxFifoThreshold>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_UART5_Init+0x6c>
  {
    Error_Handler();
 80007ec:	f000 f982 	bl	8000af4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007f0:	2100      	movs	r1, #0
 80007f2:	4809      	ldr	r0, [pc, #36]	; (8000818 <MX_UART5_Init+0x94>)
 80007f4:	f004 f99d 	bl	8004b32 <HAL_UARTEx_SetRxFifoThreshold>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_UART5_Init+0x7e>
  {
    Error_Handler();
 80007fe:	f000 f979 	bl	8000af4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8000802:	4805      	ldr	r0, [pc, #20]	; (8000818 <MX_UART5_Init+0x94>)
 8000804:	f004 f91e 	bl	8004a44 <HAL_UARTEx_DisableFifoMode>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_UART5_Init+0x8e>
  {
    Error_Handler();
 800080e:	f000 f971 	bl	8000af4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	200004cc 	.word	0x200004cc
 800081c:	40005000 	.word	0x40005000

08000820 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000824:	4b23      	ldr	r3, [pc, #140]	; (80008b4 <MX_USART1_UART_Init+0x94>)
 8000826:	4a24      	ldr	r2, [pc, #144]	; (80008b8 <MX_USART1_UART_Init+0x98>)
 8000828:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1200;
 800082a:	4b22      	ldr	r3, [pc, #136]	; (80008b4 <MX_USART1_UART_Init+0x94>)
 800082c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8000830:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000832:	4b20      	ldr	r3, [pc, #128]	; (80008b4 <MX_USART1_UART_Init+0x94>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000838:	4b1e      	ldr	r3, [pc, #120]	; (80008b4 <MX_USART1_UART_Init+0x94>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 800083e:	4b1d      	ldr	r3, [pc, #116]	; (80008b4 <MX_USART1_UART_Init+0x94>)
 8000840:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000844:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000846:	4b1b      	ldr	r3, [pc, #108]	; (80008b4 <MX_USART1_UART_Init+0x94>)
 8000848:	220c      	movs	r2, #12
 800084a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084c:	4b19      	ldr	r3, [pc, #100]	; (80008b4 <MX_USART1_UART_Init+0x94>)
 800084e:	2200      	movs	r2, #0
 8000850:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000852:	4b18      	ldr	r3, [pc, #96]	; (80008b4 <MX_USART1_UART_Init+0x94>)
 8000854:	2200      	movs	r2, #0
 8000856:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000858:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <MX_USART1_UART_Init+0x94>)
 800085a:	2200      	movs	r2, #0
 800085c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800085e:	4b15      	ldr	r3, [pc, #84]	; (80008b4 <MX_USART1_UART_Init+0x94>)
 8000860:	2200      	movs	r2, #0
 8000862:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000864:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <MX_USART1_UART_Init+0x94>)
 8000866:	2200      	movs	r2, #0
 8000868:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800086a:	4812      	ldr	r0, [pc, #72]	; (80008b4 <MX_USART1_UART_Init+0x94>)
 800086c:	f002 fea0 	bl	80035b0 <HAL_UART_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8000876:	f000 f93d 	bl	8000af4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800087a:	2100      	movs	r1, #0
 800087c:	480d      	ldr	r0, [pc, #52]	; (80008b4 <MX_USART1_UART_Init+0x94>)
 800087e:	f004 f91a 	bl	8004ab6 <HAL_UARTEx_SetTxFifoThreshold>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8000888:	f000 f934 	bl	8000af4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800088c:	2100      	movs	r1, #0
 800088e:	4809      	ldr	r0, [pc, #36]	; (80008b4 <MX_USART1_UART_Init+0x94>)
 8000890:	f004 f94f 	bl	8004b32 <HAL_UARTEx_SetRxFifoThreshold>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 800089a:	f000 f92b 	bl	8000af4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <MX_USART1_UART_Init+0x94>)
 80008a0:	f004 f8d0 	bl	8004a44 <HAL_UARTEx_DisableFifoMode>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 80008aa:	f000 f923 	bl	8000af4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000560 	.word	0x20000560
 80008b8:	40013800 	.word	0x40013800

080008bc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008c0:	4b23      	ldr	r3, [pc, #140]	; (8000950 <MX_USART3_UART_Init+0x94>)
 80008c2:	4a24      	ldr	r2, [pc, #144]	; (8000954 <MX_USART3_UART_Init+0x98>)
 80008c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1200;
 80008c6:	4b22      	ldr	r3, [pc, #136]	; (8000950 <MX_USART3_UART_Init+0x94>)
 80008c8:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80008cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008ce:	4b20      	ldr	r3, [pc, #128]	; (8000950 <MX_USART3_UART_Init+0x94>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008d4:	4b1e      	ldr	r3, [pc, #120]	; (8000950 <MX_USART3_UART_Init+0x94>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 80008da:	4b1d      	ldr	r3, [pc, #116]	; (8000950 <MX_USART3_UART_Init+0x94>)
 80008dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008e0:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008e2:	4b1b      	ldr	r3, [pc, #108]	; (8000950 <MX_USART3_UART_Init+0x94>)
 80008e4:	220c      	movs	r2, #12
 80008e6:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e8:	4b19      	ldr	r3, [pc, #100]	; (8000950 <MX_USART3_UART_Init+0x94>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ee:	4b18      	ldr	r3, [pc, #96]	; (8000950 <MX_USART3_UART_Init+0x94>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008f4:	4b16      	ldr	r3, [pc, #88]	; (8000950 <MX_USART3_UART_Init+0x94>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008fa:	4b15      	ldr	r3, [pc, #84]	; (8000950 <MX_USART3_UART_Init+0x94>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000900:	4b13      	ldr	r3, [pc, #76]	; (8000950 <MX_USART3_UART_Init+0x94>)
 8000902:	2200      	movs	r2, #0
 8000904:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000906:	4812      	ldr	r0, [pc, #72]	; (8000950 <MX_USART3_UART_Init+0x94>)
 8000908:	f002 fe52 	bl	80035b0 <HAL_UART_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_USART3_UART_Init+0x5a>
  {
    Error_Handler();
 8000912:	f000 f8ef 	bl	8000af4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000916:	2100      	movs	r1, #0
 8000918:	480d      	ldr	r0, [pc, #52]	; (8000950 <MX_USART3_UART_Init+0x94>)
 800091a:	f004 f8cc 	bl	8004ab6 <HAL_UARTEx_SetTxFifoThreshold>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_USART3_UART_Init+0x6c>
  {
    Error_Handler();
 8000924:	f000 f8e6 	bl	8000af4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000928:	2100      	movs	r1, #0
 800092a:	4809      	ldr	r0, [pc, #36]	; (8000950 <MX_USART3_UART_Init+0x94>)
 800092c:	f004 f901 	bl	8004b32 <HAL_UARTEx_SetRxFifoThreshold>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_USART3_UART_Init+0x7e>
  {
    Error_Handler();
 8000936:	f000 f8dd 	bl	8000af4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800093a:	4805      	ldr	r0, [pc, #20]	; (8000950 <MX_USART3_UART_Init+0x94>)
 800093c:	f004 f882 	bl	8004a44 <HAL_UARTEx_DisableFifoMode>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_USART3_UART_Init+0x8e>
  {
    Error_Handler();
 8000946:	f000 f8d5 	bl	8000af4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	200005f4 	.word	0x200005f4
 8000954:	40004800 	.word	0x40004800

08000958 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800095e:	4b1e      	ldr	r3, [pc, #120]	; (80009d8 <MX_DMA_Init+0x80>)
 8000960:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000962:	4a1d      	ldr	r2, [pc, #116]	; (80009d8 <MX_DMA_Init+0x80>)
 8000964:	f043 0304 	orr.w	r3, r3, #4
 8000968:	6493      	str	r3, [r2, #72]	; 0x48
 800096a:	4b1b      	ldr	r3, [pc, #108]	; (80009d8 <MX_DMA_Init+0x80>)
 800096c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800096e:	f003 0304 	and.w	r3, r3, #4
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000976:	4b18      	ldr	r3, [pc, #96]	; (80009d8 <MX_DMA_Init+0x80>)
 8000978:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800097a:	4a17      	ldr	r2, [pc, #92]	; (80009d8 <MX_DMA_Init+0x80>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6493      	str	r3, [r2, #72]	; 0x48
 8000982:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <MX_DMA_Init+0x80>)
 8000984:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	2105      	movs	r1, #5
 8000992:	200b      	movs	r0, #11
 8000994:	f000 fd6a 	bl	800146c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000998:	200b      	movs	r0, #11
 800099a:	f000 fd81 	bl	80014a0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	2105      	movs	r1, #5
 80009a2:	200c      	movs	r0, #12
 80009a4:	f000 fd62 	bl	800146c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80009a8:	200c      	movs	r0, #12
 80009aa:	f000 fd79 	bl	80014a0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2105      	movs	r1, #5
 80009b2:	200d      	movs	r0, #13
 80009b4:	f000 fd5a 	bl	800146c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80009b8:	200d      	movs	r0, #13
 80009ba:	f000 fd71 	bl	80014a0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80009be:	2200      	movs	r2, #0
 80009c0:	2105      	movs	r1, #5
 80009c2:	200e      	movs	r0, #14
 80009c4:	f000 fd52 	bl	800146c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80009c8:	200e      	movs	r0, #14
 80009ca:	f000 fd69 	bl	80014a0 <HAL_NVIC_EnableIRQ>

}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40021000 	.word	0x40021000

080009dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08a      	sub	sp, #40	; 0x28
 80009e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
 80009f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f2:	4b35      	ldr	r3, [pc, #212]	; (8000ac8 <MX_GPIO_Init+0xec>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f6:	4a34      	ldr	r2, [pc, #208]	; (8000ac8 <MX_GPIO_Init+0xec>)
 80009f8:	f043 0304 	orr.w	r3, r3, #4
 80009fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009fe:	4b32      	ldr	r3, [pc, #200]	; (8000ac8 <MX_GPIO_Init+0xec>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a02:	f003 0304 	and.w	r3, r3, #4
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a0a:	4b2f      	ldr	r3, [pc, #188]	; (8000ac8 <MX_GPIO_Init+0xec>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0e:	4a2e      	ldr	r2, [pc, #184]	; (8000ac8 <MX_GPIO_Init+0xec>)
 8000a10:	f043 0320 	orr.w	r3, r3, #32
 8000a14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a16:	4b2c      	ldr	r3, [pc, #176]	; (8000ac8 <MX_GPIO_Init+0xec>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1a:	f003 0320 	and.w	r3, r3, #32
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	4b29      	ldr	r3, [pc, #164]	; (8000ac8 <MX_GPIO_Init+0xec>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a26:	4a28      	ldr	r2, [pc, #160]	; (8000ac8 <MX_GPIO_Init+0xec>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a2e:	4b26      	ldr	r3, [pc, #152]	; (8000ac8 <MX_GPIO_Init+0xec>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3a:	4b23      	ldr	r3, [pc, #140]	; (8000ac8 <MX_GPIO_Init+0xec>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3e:	4a22      	ldr	r2, [pc, #136]	; (8000ac8 <MX_GPIO_Init+0xec>)
 8000a40:	f043 0302 	orr.w	r3, r3, #2
 8000a44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a46:	4b20      	ldr	r3, [pc, #128]	; (8000ac8 <MX_GPIO_Init+0xec>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	f003 0302 	and.w	r3, r3, #2
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a52:	4b1d      	ldr	r3, [pc, #116]	; (8000ac8 <MX_GPIO_Init+0xec>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a56:	4a1c      	ldr	r2, [pc, #112]	; (8000ac8 <MX_GPIO_Init+0xec>)
 8000a58:	f043 0308 	orr.w	r3, r3, #8
 8000a5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a5e:	4b1a      	ldr	r3, [pc, #104]	; (8000ac8 <MX_GPIO_Init+0xec>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a62:	f003 0308 	and.w	r3, r3, #8
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2120      	movs	r1, #32
 8000a6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a72:	f001 f9d7 	bl	8001e24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a7c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	480f      	ldr	r0, [pc, #60]	; (8000acc <MX_GPIO_Init+0xf0>)
 8000a8e:	f001 f847 	bl	8001b20 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a92:	2320      	movs	r3, #32
 8000a94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a96:	2301      	movs	r3, #1
 8000a98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	f107 0314 	add.w	r3, r7, #20
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aac:	f001 f838 	bl	8001b20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2105      	movs	r1, #5
 8000ab4:	2028      	movs	r0, #40	; 0x28
 8000ab6:	f000 fcd9 	bl	800146c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000aba:	2028      	movs	r0, #40	; 0x28
 8000abc:	f000 fcf0 	bl	80014a0 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ac0:	bf00      	nop
 8000ac2:	3728      	adds	r7, #40	; 0x28
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	48000800 	.word	0x48000800

08000ad0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a04      	ldr	r2, [pc, #16]	; (8000af0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d101      	bne.n	8000ae6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ae2:	f000 fbed 	bl	80012c0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	3708      	adds	r7, #8
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40001400 	.word	0x40001400

08000af4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af8:	b672      	cpsid	i
}
 8000afa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000afc:	e7fe      	b.n	8000afc <Error_Handler+0x8>
	...

08000b00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b06:	4b12      	ldr	r3, [pc, #72]	; (8000b50 <HAL_MspInit+0x50>)
 8000b08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b0a:	4a11      	ldr	r2, [pc, #68]	; (8000b50 <HAL_MspInit+0x50>)
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	6613      	str	r3, [r2, #96]	; 0x60
 8000b12:	4b0f      	ldr	r3, [pc, #60]	; (8000b50 <HAL_MspInit+0x50>)
 8000b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1e:	4b0c      	ldr	r3, [pc, #48]	; (8000b50 <HAL_MspInit+0x50>)
 8000b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b22:	4a0b      	ldr	r2, [pc, #44]	; (8000b50 <HAL_MspInit+0x50>)
 8000b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b28:	6593      	str	r3, [r2, #88]	; 0x58
 8000b2a:	4b09      	ldr	r3, [pc, #36]	; (8000b50 <HAL_MspInit+0x50>)
 8000b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b36:	2200      	movs	r2, #0
 8000b38:	210f      	movs	r1, #15
 8000b3a:	f06f 0001 	mvn.w	r0, #1
 8000b3e:	f000 fc95 	bl	800146c <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b42:	f001 fa4f 	bl	8001fe4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40021000 	.word	0x40021000

08000b54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b0a6      	sub	sp, #152	; 0x98
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b5c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b6c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b70:	2250      	movs	r2, #80	; 0x50
 8000b72:	2100      	movs	r1, #0
 8000b74:	4618      	mov	r0, r3
 8000b76:	f005 fe0d 	bl	8006794 <memset>
  if(huart->Instance==LPUART1)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4aa8      	ldr	r2, [pc, #672]	; (8000e20 <HAL_UART_MspInit+0x2cc>)
 8000b80:	4293      	cmp	r3, r2
 8000b82:	d144      	bne.n	8000c0e <HAL_UART_MspInit+0xba>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000b84:	2320      	movs	r3, #32
 8000b86:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b8c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b90:	4618      	mov	r0, r3
 8000b92:	f001 ff97 	bl	8002ac4 <HAL_RCCEx_PeriphCLKConfig>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b9c:	f7ff ffaa 	bl	8000af4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000ba0:	4ba0      	ldr	r3, [pc, #640]	; (8000e24 <HAL_UART_MspInit+0x2d0>)
 8000ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ba4:	4a9f      	ldr	r2, [pc, #636]	; (8000e24 <HAL_UART_MspInit+0x2d0>)
 8000ba6:	f043 0301 	orr.w	r3, r3, #1
 8000baa:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000bac:	4b9d      	ldr	r3, [pc, #628]	; (8000e24 <HAL_UART_MspInit+0x2d0>)
 8000bae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bb0:	f003 0301 	and.w	r3, r3, #1
 8000bb4:	633b      	str	r3, [r7, #48]	; 0x30
 8000bb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb8:	4b9a      	ldr	r3, [pc, #616]	; (8000e24 <HAL_UART_MspInit+0x2d0>)
 8000bba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bbc:	4a99      	ldr	r2, [pc, #612]	; (8000e24 <HAL_UART_MspInit+0x2d0>)
 8000bbe:	f043 0301 	orr.w	r3, r3, #1
 8000bc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bc4:	4b97      	ldr	r3, [pc, #604]	; (8000e24 <HAL_UART_MspInit+0x2d0>)
 8000bc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc8:	f003 0301 	and.w	r3, r3, #1
 8000bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000bd0:	230c      	movs	r3, #12
 8000bd2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd6:	2302      	movs	r3, #2
 8000bd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	2300      	movs	r3, #0
 8000be4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000be8:	230c      	movs	r3, #12
 8000bea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bee:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bf8:	f000 ff92 	bl	8001b20 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2105      	movs	r1, #5
 8000c00:	205b      	movs	r0, #91	; 0x5b
 8000c02:	f000 fc33 	bl	800146c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000c06:	205b      	movs	r0, #91	; 0x5b
 8000c08:	f000 fc4a 	bl	80014a0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c0c:	e200      	b.n	8001010 <HAL_UART_MspInit+0x4bc>
  else if(huart->Instance==UART4)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4a85      	ldr	r2, [pc, #532]	; (8000e28 <HAL_UART_MspInit+0x2d4>)
 8000c14:	4293      	cmp	r3, r2
 8000c16:	d16d      	bne.n	8000cf4 <HAL_UART_MspInit+0x1a0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000c18:	2308      	movs	r3, #8
 8000c1a:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c20:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c24:	4618      	mov	r0, r3
 8000c26:	f001 ff4d 	bl	8002ac4 <HAL_RCCEx_PeriphCLKConfig>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8000c30:	f7ff ff60 	bl	8000af4 <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 8000c34:	4b7b      	ldr	r3, [pc, #492]	; (8000e24 <HAL_UART_MspInit+0x2d0>)
 8000c36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c38:	4a7a      	ldr	r2, [pc, #488]	; (8000e24 <HAL_UART_MspInit+0x2d0>)
 8000c3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c3e:	6593      	str	r3, [r2, #88]	; 0x58
 8000c40:	4b78      	ldr	r3, [pc, #480]	; (8000e24 <HAL_UART_MspInit+0x2d0>)
 8000c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c48:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c4c:	4b75      	ldr	r3, [pc, #468]	; (8000e24 <HAL_UART_MspInit+0x2d0>)
 8000c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c50:	4a74      	ldr	r2, [pc, #464]	; (8000e24 <HAL_UART_MspInit+0x2d0>)
 8000c52:	f043 0304 	orr.w	r3, r3, #4
 8000c56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c58:	4b72      	ldr	r3, [pc, #456]	; (8000e24 <HAL_UART_MspInit+0x2d0>)
 8000c5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5c:	f003 0304 	and.w	r3, r3, #4
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
 8000c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c64:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8000c7e:	2305      	movs	r3, #5
 8000c80:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c84:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4868      	ldr	r0, [pc, #416]	; (8000e2c <HAL_UART_MspInit+0x2d8>)
 8000c8c:	f000 ff48 	bl	8001b20 <HAL_GPIO_Init>
    hdma_uart4_tx.Instance = DMA1_Channel1;
 8000c90:	4b67      	ldr	r3, [pc, #412]	; (8000e30 <HAL_UART_MspInit+0x2dc>)
 8000c92:	4a68      	ldr	r2, [pc, #416]	; (8000e34 <HAL_UART_MspInit+0x2e0>)
 8000c94:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8000c96:	4b66      	ldr	r3, [pc, #408]	; (8000e30 <HAL_UART_MspInit+0x2dc>)
 8000c98:	221f      	movs	r2, #31
 8000c9a:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c9c:	4b64      	ldr	r3, [pc, #400]	; (8000e30 <HAL_UART_MspInit+0x2dc>)
 8000c9e:	2210      	movs	r2, #16
 8000ca0:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ca2:	4b63      	ldr	r3, [pc, #396]	; (8000e30 <HAL_UART_MspInit+0x2dc>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ca8:	4b61      	ldr	r3, [pc, #388]	; (8000e30 <HAL_UART_MspInit+0x2dc>)
 8000caa:	2280      	movs	r2, #128	; 0x80
 8000cac:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cae:	4b60      	ldr	r3, [pc, #384]	; (8000e30 <HAL_UART_MspInit+0x2dc>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cb4:	4b5e      	ldr	r3, [pc, #376]	; (8000e30 <HAL_UART_MspInit+0x2dc>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8000cba:	4b5d      	ldr	r3, [pc, #372]	; (8000e30 <HAL_UART_MspInit+0x2dc>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000cc0:	4b5b      	ldr	r3, [pc, #364]	; (8000e30 <HAL_UART_MspInit+0x2dc>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8000cc6:	485a      	ldr	r0, [pc, #360]	; (8000e30 <HAL_UART_MspInit+0x2dc>)
 8000cc8:	f000 fbf8 	bl	80014bc <HAL_DMA_Init>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d001      	beq.n	8000cd6 <HAL_UART_MspInit+0x182>
      Error_Handler();
 8000cd2:	f7ff ff0f 	bl	8000af4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4a55      	ldr	r2, [pc, #340]	; (8000e30 <HAL_UART_MspInit+0x2dc>)
 8000cda:	67da      	str	r2, [r3, #124]	; 0x7c
 8000cdc:	4a54      	ldr	r2, [pc, #336]	; (8000e30 <HAL_UART_MspInit+0x2dc>)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2105      	movs	r1, #5
 8000ce6:	2034      	movs	r0, #52	; 0x34
 8000ce8:	f000 fbc0 	bl	800146c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000cec:	2034      	movs	r0, #52	; 0x34
 8000cee:	f000 fbd7 	bl	80014a0 <HAL_NVIC_EnableIRQ>
}
 8000cf2:	e18d      	b.n	8001010 <HAL_UART_MspInit+0x4bc>
  else if(huart->Instance==UART5)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a4f      	ldr	r2, [pc, #316]	; (8000e38 <HAL_UART_MspInit+0x2e4>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	f040 80a4 	bne.w	8000e48 <HAL_UART_MspInit+0x2f4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000d00:	2310      	movs	r3, #16
 8000d02:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000d04:	2300      	movs	r3, #0
 8000d06:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d08:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f001 fed9 	bl	8002ac4 <HAL_RCCEx_PeriphCLKConfig>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <HAL_UART_MspInit+0x1c8>
      Error_Handler();
 8000d18:	f7ff feec 	bl	8000af4 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000d1c:	4b41      	ldr	r3, [pc, #260]	; (8000e24 <HAL_UART_MspInit+0x2d0>)
 8000d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d20:	4a40      	ldr	r2, [pc, #256]	; (8000e24 <HAL_UART_MspInit+0x2d0>)
 8000d22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000d26:	6593      	str	r3, [r2, #88]	; 0x58
 8000d28:	4b3e      	ldr	r3, [pc, #248]	; (8000e24 <HAL_UART_MspInit+0x2d0>)
 8000d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d2c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d30:	623b      	str	r3, [r7, #32]
 8000d32:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d34:	4b3b      	ldr	r3, [pc, #236]	; (8000e24 <HAL_UART_MspInit+0x2d0>)
 8000d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d38:	4a3a      	ldr	r2, [pc, #232]	; (8000e24 <HAL_UART_MspInit+0x2d0>)
 8000d3a:	f043 0304 	orr.w	r3, r3, #4
 8000d3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d40:	4b38      	ldr	r3, [pc, #224]	; (8000e24 <HAL_UART_MspInit+0x2d0>)
 8000d42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d44:	f003 0304 	and.w	r3, r3, #4
 8000d48:	61fb      	str	r3, [r7, #28]
 8000d4a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d4c:	4b35      	ldr	r3, [pc, #212]	; (8000e24 <HAL_UART_MspInit+0x2d0>)
 8000d4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d50:	4a34      	ldr	r2, [pc, #208]	; (8000e24 <HAL_UART_MspInit+0x2d0>)
 8000d52:	f043 0308 	orr.w	r3, r3, #8
 8000d56:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d58:	4b32      	ldr	r3, [pc, #200]	; (8000e24 <HAL_UART_MspInit+0x2d0>)
 8000d5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5c:	f003 0308 	and.w	r3, r3, #8
 8000d60:	61bb      	str	r3, [r7, #24]
 8000d62:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d68:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d72:	2300      	movs	r3, #0
 8000d74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8000d7e:	2305      	movs	r3, #5
 8000d80:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d84:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4828      	ldr	r0, [pc, #160]	; (8000e2c <HAL_UART_MspInit+0x2d8>)
 8000d8c:	f000 fec8 	bl	8001b20 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d90:	2304      	movs	r3, #4
 8000d92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d96:	2302      	movs	r3, #2
 8000d98:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8000da8:	2305      	movs	r3, #5
 8000daa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dae:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000db2:	4619      	mov	r1, r3
 8000db4:	4821      	ldr	r0, [pc, #132]	; (8000e3c <HAL_UART_MspInit+0x2e8>)
 8000db6:	f000 feb3 	bl	8001b20 <HAL_GPIO_Init>
    hdma_uart5_tx.Instance = DMA1_Channel2;
 8000dba:	4b21      	ldr	r3, [pc, #132]	; (8000e40 <HAL_UART_MspInit+0x2ec>)
 8000dbc:	4a21      	ldr	r2, [pc, #132]	; (8000e44 <HAL_UART_MspInit+0x2f0>)
 8000dbe:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 8000dc0:	4b1f      	ldr	r3, [pc, #124]	; (8000e40 <HAL_UART_MspInit+0x2ec>)
 8000dc2:	2221      	movs	r2, #33	; 0x21
 8000dc4:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000dc6:	4b1e      	ldr	r3, [pc, #120]	; (8000e40 <HAL_UART_MspInit+0x2ec>)
 8000dc8:	2210      	movs	r2, #16
 8000dca:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dcc:	4b1c      	ldr	r3, [pc, #112]	; (8000e40 <HAL_UART_MspInit+0x2ec>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000dd2:	4b1b      	ldr	r3, [pc, #108]	; (8000e40 <HAL_UART_MspInit+0x2ec>)
 8000dd4:	2280      	movs	r2, #128	; 0x80
 8000dd6:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dd8:	4b19      	ldr	r3, [pc, #100]	; (8000e40 <HAL_UART_MspInit+0x2ec>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dde:	4b18      	ldr	r3, [pc, #96]	; (8000e40 <HAL_UART_MspInit+0x2ec>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8000de4:	4b16      	ldr	r3, [pc, #88]	; (8000e40 <HAL_UART_MspInit+0x2ec>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000dea:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <HAL_UART_MspInit+0x2ec>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8000df0:	4813      	ldr	r0, [pc, #76]	; (8000e40 <HAL_UART_MspInit+0x2ec>)
 8000df2:	f000 fb63 	bl	80014bc <HAL_DMA_Init>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <HAL_UART_MspInit+0x2ac>
      Error_Handler();
 8000dfc:	f7ff fe7a 	bl	8000af4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4a0f      	ldr	r2, [pc, #60]	; (8000e40 <HAL_UART_MspInit+0x2ec>)
 8000e04:	67da      	str	r2, [r3, #124]	; 0x7c
 8000e06:	4a0e      	ldr	r2, [pc, #56]	; (8000e40 <HAL_UART_MspInit+0x2ec>)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2105      	movs	r1, #5
 8000e10:	2035      	movs	r0, #53	; 0x35
 8000e12:	f000 fb2b 	bl	800146c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000e16:	2035      	movs	r0, #53	; 0x35
 8000e18:	f000 fb42 	bl	80014a0 <HAL_NVIC_EnableIRQ>
}
 8000e1c:	e0f8      	b.n	8001010 <HAL_UART_MspInit+0x4bc>
 8000e1e:	bf00      	nop
 8000e20:	40008000 	.word	0x40008000
 8000e24:	40021000 	.word	0x40021000
 8000e28:	40004c00 	.word	0x40004c00
 8000e2c:	48000800 	.word	0x48000800
 8000e30:	20000688 	.word	0x20000688
 8000e34:	40020008 	.word	0x40020008
 8000e38:	40005000 	.word	0x40005000
 8000e3c:	48000c00 	.word	0x48000c00
 8000e40:	200006e8 	.word	0x200006e8
 8000e44:	4002001c 	.word	0x4002001c
  else if(huart->Instance==USART1)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a72      	ldr	r2, [pc, #456]	; (8001018 <HAL_UART_MspInit+0x4c4>)
 8000e4e:	4293      	cmp	r3, r2
 8000e50:	d16c      	bne.n	8000f2c <HAL_UART_MspInit+0x3d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e52:	2301      	movs	r3, #1
 8000e54:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e56:	2300      	movs	r3, #0
 8000e58:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e5a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f001 fe30 	bl	8002ac4 <HAL_RCCEx_PeriphCLKConfig>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <HAL_UART_MspInit+0x31a>
      Error_Handler();
 8000e6a:	f7ff fe43 	bl	8000af4 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e6e:	4b6b      	ldr	r3, [pc, #428]	; (800101c <HAL_UART_MspInit+0x4c8>)
 8000e70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e72:	4a6a      	ldr	r2, [pc, #424]	; (800101c <HAL_UART_MspInit+0x4c8>)
 8000e74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e78:	6613      	str	r3, [r2, #96]	; 0x60
 8000e7a:	4b68      	ldr	r3, [pc, #416]	; (800101c <HAL_UART_MspInit+0x4c8>)
 8000e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e82:	617b      	str	r3, [r7, #20]
 8000e84:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e86:	4b65      	ldr	r3, [pc, #404]	; (800101c <HAL_UART_MspInit+0x4c8>)
 8000e88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e8a:	4a64      	ldr	r2, [pc, #400]	; (800101c <HAL_UART_MspInit+0x4c8>)
 8000e8c:	f043 0304 	orr.w	r3, r3, #4
 8000e90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e92:	4b62      	ldr	r3, [pc, #392]	; (800101c <HAL_UART_MspInit+0x4c8>)
 8000e94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e96:	f003 0304 	and.w	r3, r3, #4
 8000e9a:	613b      	str	r3, [r7, #16]
 8000e9c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000e9e:	2330      	movs	r3, #48	; 0x30
 8000ea0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea4:	2302      	movs	r3, #2
 8000ea6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000eb6:	2307      	movs	r3, #7
 8000eb8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ebc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4857      	ldr	r0, [pc, #348]	; (8001020 <HAL_UART_MspInit+0x4cc>)
 8000ec4:	f000 fe2c 	bl	8001b20 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel3;
 8000ec8:	4b56      	ldr	r3, [pc, #344]	; (8001024 <HAL_UART_MspInit+0x4d0>)
 8000eca:	4a57      	ldr	r2, [pc, #348]	; (8001028 <HAL_UART_MspInit+0x4d4>)
 8000ecc:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8000ece:	4b55      	ldr	r3, [pc, #340]	; (8001024 <HAL_UART_MspInit+0x4d0>)
 8000ed0:	2219      	movs	r2, #25
 8000ed2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ed4:	4b53      	ldr	r3, [pc, #332]	; (8001024 <HAL_UART_MspInit+0x4d0>)
 8000ed6:	2210      	movs	r2, #16
 8000ed8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eda:	4b52      	ldr	r3, [pc, #328]	; (8001024 <HAL_UART_MspInit+0x4d0>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ee0:	4b50      	ldr	r3, [pc, #320]	; (8001024 <HAL_UART_MspInit+0x4d0>)
 8000ee2:	2280      	movs	r2, #128	; 0x80
 8000ee4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ee6:	4b4f      	ldr	r3, [pc, #316]	; (8001024 <HAL_UART_MspInit+0x4d0>)
 8000ee8:	2200      	movs	r2, #0
 8000eea:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000eec:	4b4d      	ldr	r3, [pc, #308]	; (8001024 <HAL_UART_MspInit+0x4d0>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000ef2:	4b4c      	ldr	r3, [pc, #304]	; (8001024 <HAL_UART_MspInit+0x4d0>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ef8:	4b4a      	ldr	r3, [pc, #296]	; (8001024 <HAL_UART_MspInit+0x4d0>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000efe:	4849      	ldr	r0, [pc, #292]	; (8001024 <HAL_UART_MspInit+0x4d0>)
 8000f00:	f000 fadc 	bl	80014bc <HAL_DMA_Init>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <HAL_UART_MspInit+0x3ba>
      Error_Handler();
 8000f0a:	f7ff fdf3 	bl	8000af4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a44      	ldr	r2, [pc, #272]	; (8001024 <HAL_UART_MspInit+0x4d0>)
 8000f12:	67da      	str	r2, [r3, #124]	; 0x7c
 8000f14:	4a43      	ldr	r2, [pc, #268]	; (8001024 <HAL_UART_MspInit+0x4d0>)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	2105      	movs	r1, #5
 8000f1e:	2025      	movs	r0, #37	; 0x25
 8000f20:	f000 faa4 	bl	800146c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f24:	2025      	movs	r0, #37	; 0x25
 8000f26:	f000 fabb 	bl	80014a0 <HAL_NVIC_EnableIRQ>
}
 8000f2a:	e071      	b.n	8001010 <HAL_UART_MspInit+0x4bc>
  else if(huart->Instance==USART3)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a3e      	ldr	r2, [pc, #248]	; (800102c <HAL_UART_MspInit+0x4d8>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d16c      	bne.n	8001010 <HAL_UART_MspInit+0x4bc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f36:	2304      	movs	r3, #4
 8000f38:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f3e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f42:	4618      	mov	r0, r3
 8000f44:	f001 fdbe 	bl	8002ac4 <HAL_RCCEx_PeriphCLKConfig>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <HAL_UART_MspInit+0x3fe>
      Error_Handler();
 8000f4e:	f7ff fdd1 	bl	8000af4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f52:	4b32      	ldr	r3, [pc, #200]	; (800101c <HAL_UART_MspInit+0x4c8>)
 8000f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f56:	4a31      	ldr	r2, [pc, #196]	; (800101c <HAL_UART_MspInit+0x4c8>)
 8000f58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f5c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f5e:	4b2f      	ldr	r3, [pc, #188]	; (800101c <HAL_UART_MspInit+0x4c8>)
 8000f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6a:	4b2c      	ldr	r3, [pc, #176]	; (800101c <HAL_UART_MspInit+0x4c8>)
 8000f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6e:	4a2b      	ldr	r2, [pc, #172]	; (800101c <HAL_UART_MspInit+0x4c8>)
 8000f70:	f043 0302 	orr.w	r3, r3, #2
 8000f74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f76:	4b29      	ldr	r3, [pc, #164]	; (800101c <HAL_UART_MspInit+0x4c8>)
 8000f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7a:	f003 0302 	and.w	r3, r3, #2
 8000f7e:	60bb      	str	r3, [r7, #8]
 8000f80:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f82:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f96:	2300      	movs	r3, #0
 8000f98:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f9c:	2307      	movs	r3, #7
 8000f9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4821      	ldr	r0, [pc, #132]	; (8001030 <HAL_UART_MspInit+0x4dc>)
 8000faa:	f000 fdb9 	bl	8001b20 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel4;
 8000fae:	4b21      	ldr	r3, [pc, #132]	; (8001034 <HAL_UART_MspInit+0x4e0>)
 8000fb0:	4a21      	ldr	r2, [pc, #132]	; (8001038 <HAL_UART_MspInit+0x4e4>)
 8000fb2:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8000fb4:	4b1f      	ldr	r3, [pc, #124]	; (8001034 <HAL_UART_MspInit+0x4e0>)
 8000fb6:	221d      	movs	r2, #29
 8000fb8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fba:	4b1e      	ldr	r3, [pc, #120]	; (8001034 <HAL_UART_MspInit+0x4e0>)
 8000fbc:	2210      	movs	r2, #16
 8000fbe:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fc0:	4b1c      	ldr	r3, [pc, #112]	; (8001034 <HAL_UART_MspInit+0x4e0>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000fc6:	4b1b      	ldr	r3, [pc, #108]	; (8001034 <HAL_UART_MspInit+0x4e0>)
 8000fc8:	2280      	movs	r2, #128	; 0x80
 8000fca:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fcc:	4b19      	ldr	r3, [pc, #100]	; (8001034 <HAL_UART_MspInit+0x4e0>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fd2:	4b18      	ldr	r3, [pc, #96]	; (8001034 <HAL_UART_MspInit+0x4e0>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000fd8:	4b16      	ldr	r3, [pc, #88]	; (8001034 <HAL_UART_MspInit+0x4e0>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000fde:	4b15      	ldr	r3, [pc, #84]	; (8001034 <HAL_UART_MspInit+0x4e0>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000fe4:	4813      	ldr	r0, [pc, #76]	; (8001034 <HAL_UART_MspInit+0x4e0>)
 8000fe6:	f000 fa69 	bl	80014bc <HAL_DMA_Init>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <HAL_UART_MspInit+0x4a0>
      Error_Handler();
 8000ff0:	f7ff fd80 	bl	8000af4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	4a0f      	ldr	r2, [pc, #60]	; (8001034 <HAL_UART_MspInit+0x4e0>)
 8000ff8:	67da      	str	r2, [r3, #124]	; 0x7c
 8000ffa:	4a0e      	ldr	r2, [pc, #56]	; (8001034 <HAL_UART_MspInit+0x4e0>)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001000:	2200      	movs	r2, #0
 8001002:	2105      	movs	r1, #5
 8001004:	2027      	movs	r0, #39	; 0x27
 8001006:	f000 fa31 	bl	800146c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800100a:	2027      	movs	r0, #39	; 0x27
 800100c:	f000 fa48 	bl	80014a0 <HAL_NVIC_EnableIRQ>
}
 8001010:	bf00      	nop
 8001012:	3798      	adds	r7, #152	; 0x98
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40013800 	.word	0x40013800
 800101c:	40021000 	.word	0x40021000
 8001020:	48000800 	.word	0x48000800
 8001024:	20000748 	.word	0x20000748
 8001028:	40020030 	.word	0x40020030
 800102c:	40004800 	.word	0x40004800
 8001030:	48000400 	.word	0x48000400
 8001034:	200007a8 	.word	0x200007a8
 8001038:	40020044 	.word	0x40020044

0800103c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08c      	sub	sp, #48	; 0x30
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 800104c:	4b2c      	ldr	r3, [pc, #176]	; (8001100 <HAL_InitTick+0xc4>)
 800104e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001050:	4a2b      	ldr	r2, [pc, #172]	; (8001100 <HAL_InitTick+0xc4>)
 8001052:	f043 0320 	orr.w	r3, r3, #32
 8001056:	6593      	str	r3, [r2, #88]	; 0x58
 8001058:	4b29      	ldr	r3, [pc, #164]	; (8001100 <HAL_InitTick+0xc4>)
 800105a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800105c:	f003 0320 	and.w	r3, r3, #32
 8001060:	60bb      	str	r3, [r7, #8]
 8001062:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001064:	f107 020c 	add.w	r2, r7, #12
 8001068:	f107 0310 	add.w	r3, r7, #16
 800106c:	4611      	mov	r1, r2
 800106e:	4618      	mov	r0, r3
 8001070:	f001 fcb0 	bl	80029d4 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001074:	f001 fc82 	bl	800297c <HAL_RCC_GetPCLK1Freq>
 8001078:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800107a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800107c:	4a21      	ldr	r2, [pc, #132]	; (8001104 <HAL_InitTick+0xc8>)
 800107e:	fba2 2303 	umull	r2, r3, r2, r3
 8001082:	0c9b      	lsrs	r3, r3, #18
 8001084:	3b01      	subs	r3, #1
 8001086:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001088:	4b1f      	ldr	r3, [pc, #124]	; (8001108 <HAL_InitTick+0xcc>)
 800108a:	4a20      	ldr	r2, [pc, #128]	; (800110c <HAL_InitTick+0xd0>)
 800108c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800108e:	4b1e      	ldr	r3, [pc, #120]	; (8001108 <HAL_InitTick+0xcc>)
 8001090:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001094:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001096:	4a1c      	ldr	r2, [pc, #112]	; (8001108 <HAL_InitTick+0xcc>)
 8001098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800109a:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800109c:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <HAL_InitTick+0xcc>)
 800109e:	2200      	movs	r2, #0
 80010a0:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010a2:	4b19      	ldr	r3, [pc, #100]	; (8001108 <HAL_InitTick+0xcc>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim7);
 80010a8:	4817      	ldr	r0, [pc, #92]	; (8001108 <HAL_InitTick+0xcc>)
 80010aa:	f001 ff47 	bl	8002f3c <HAL_TIM_Base_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80010b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d11b      	bne.n	80010f4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 80010bc:	4812      	ldr	r0, [pc, #72]	; (8001108 <HAL_InitTick+0xcc>)
 80010be:	f001 ff9f 	bl	8003000 <HAL_TIM_Base_Start_IT>
 80010c2:	4603      	mov	r3, r0
 80010c4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80010c8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d111      	bne.n	80010f4 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80010d0:	2037      	movs	r0, #55	; 0x37
 80010d2:	f000 f9e5 	bl	80014a0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2b0f      	cmp	r3, #15
 80010da:	d808      	bhi.n	80010ee <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 80010dc:	2200      	movs	r2, #0
 80010de:	6879      	ldr	r1, [r7, #4]
 80010e0:	2037      	movs	r0, #55	; 0x37
 80010e2:	f000 f9c3 	bl	800146c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010e6:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <HAL_InitTick+0xd4>)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6013      	str	r3, [r2, #0]
 80010ec:	e002      	b.n	80010f4 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80010f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3730      	adds	r7, #48	; 0x30
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}
 8001100:	40021000 	.word	0x40021000
 8001104:	431bde83 	.word	0x431bde83
 8001108:	20000c60 	.word	0x20000c60
 800110c:	40001400 	.word	0x40001400
 8001110:	20000004 	.word	0x20000004

08001114 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001118:	e7fe      	b.n	8001118 <NMI_Handler+0x4>

0800111a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800111e:	e7fe      	b.n	800111e <HardFault_Handler+0x4>

08001120 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001124:	e7fe      	b.n	8001124 <MemManage_Handler+0x4>

08001126 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001126:	b480      	push	{r7}
 8001128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800112a:	e7fe      	b.n	800112a <BusFault_Handler+0x4>

0800112c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001130:	e7fe      	b.n	8001130 <UsageFault_Handler+0x4>

08001132 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001144:	4802      	ldr	r0, [pc, #8]	; (8001150 <DMA1_Channel1_IRQHandler+0x10>)
 8001146:	f000 fb9c 	bl	8001882 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000688 	.word	0x20000688

08001154 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8001158:	4802      	ldr	r0, [pc, #8]	; (8001164 <DMA1_Channel2_IRQHandler+0x10>)
 800115a:	f000 fb92 	bl	8001882 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	200006e8 	.word	0x200006e8

08001168 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800116c:	4802      	ldr	r0, [pc, #8]	; (8001178 <DMA1_Channel3_IRQHandler+0x10>)
 800116e:	f000 fb88 	bl	8001882 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001172:	bf00      	nop
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	20000748 	.word	0x20000748

0800117c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001180:	4802      	ldr	r0, [pc, #8]	; (800118c <DMA1_Channel4_IRQHandler+0x10>)
 8001182:	f000 fb7e 	bl	8001882 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	200007a8 	.word	0x200007a8

08001190 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001194:	4802      	ldr	r0, [pc, #8]	; (80011a0 <USART1_IRQHandler+0x10>)
 8001196:	f002 fadb 	bl	8003750 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000560 	.word	0x20000560

080011a4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80011a8:	4802      	ldr	r0, [pc, #8]	; (80011b4 <USART3_IRQHandler+0x10>)
 80011aa:	f002 fad1 	bl	8003750 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	200005f4 	.word	0x200005f4

080011b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80011bc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80011c0:	f000 fe48 	bl	8001e54 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80011cc:	4802      	ldr	r0, [pc, #8]	; (80011d8 <UART4_IRQHandler+0x10>)
 80011ce:	f002 fabf 	bl	8003750 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	20000438 	.word	0x20000438

080011dc <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt / UART5 wake-up interrupt through EXTI line 35.
  */
void UART5_IRQHandler(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80011e0:	4802      	ldr	r0, [pc, #8]	; (80011ec <UART5_IRQHandler+0x10>)
 80011e2:	f002 fab5 	bl	8003750 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	200004cc 	.word	0x200004cc

080011f0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80011f4:	4802      	ldr	r0, [pc, #8]	; (8001200 <TIM7_IRQHandler+0x10>)
 80011f6:	f001 ff73 	bl	80030e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	20000c60 	.word	0x20000c60

08001204 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001208:	4802      	ldr	r0, [pc, #8]	; (8001214 <LPUART1_IRQHandler+0x10>)
 800120a:	f002 faa1 	bl	8003750 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800120e:	bf00      	nop
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	200003a4 	.word	0x200003a4

08001218 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <SystemInit+0x20>)
 800121e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001222:	4a05      	ldr	r2, [pc, #20]	; (8001238 <SystemInit+0x20>)
 8001224:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001228:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800123c:	480d      	ldr	r0, [pc, #52]	; (8001274 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800123e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001240:	f7ff ffea 	bl	8001218 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001244:	480c      	ldr	r0, [pc, #48]	; (8001278 <LoopForever+0x6>)
  ldr r1, =_edata
 8001246:	490d      	ldr	r1, [pc, #52]	; (800127c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001248:	4a0d      	ldr	r2, [pc, #52]	; (8001280 <LoopForever+0xe>)
  movs r3, #0
 800124a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800124c:	e002      	b.n	8001254 <LoopCopyDataInit>

0800124e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800124e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001250:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001252:	3304      	adds	r3, #4

08001254 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001254:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001256:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001258:	d3f9      	bcc.n	800124e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800125a:	4a0a      	ldr	r2, [pc, #40]	; (8001284 <LoopForever+0x12>)
  ldr r4, =_ebss
 800125c:	4c0a      	ldr	r4, [pc, #40]	; (8001288 <LoopForever+0x16>)
  movs r3, #0
 800125e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001260:	e001      	b.n	8001266 <LoopFillZerobss>

08001262 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001262:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001264:	3204      	adds	r2, #4

08001266 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001266:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001268:	d3fb      	bcc.n	8001262 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800126a:	f005 fa9b 	bl	80067a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800126e:	f7ff f977 	bl	8000560 <main>

08001272 <LoopForever>:

LoopForever:
    b LoopForever
 8001272:	e7fe      	b.n	8001272 <LoopForever>
  ldr   r0, =_estack
 8001274:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8001278:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800127c:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8001280:	0800699c 	.word	0x0800699c
  ldr r2, =_sbss
 8001284:	20000134 	.word	0x20000134
  ldr r4, =_ebss
 8001288:	20000dfc 	.word	0x20000dfc

0800128c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800128c:	e7fe      	b.n	800128c <ADC1_2_IRQHandler>

0800128e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b082      	sub	sp, #8
 8001292:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001294:	2300      	movs	r3, #0
 8001296:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001298:	2003      	movs	r0, #3
 800129a:	f000 f8dc 	bl	8001456 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800129e:	200f      	movs	r0, #15
 80012a0:	f7ff fecc 	bl	800103c <HAL_InitTick>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d002      	beq.n	80012b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	71fb      	strb	r3, [r7, #7]
 80012ae:	e001      	b.n	80012b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012b0:	f7ff fc26 	bl	8000b00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012b4:	79fb      	ldrb	r3, [r7, #7]

}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
	...

080012c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012c4:	4b05      	ldr	r3, [pc, #20]	; (80012dc <HAL_IncTick+0x1c>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	4b05      	ldr	r3, [pc, #20]	; (80012e0 <HAL_IncTick+0x20>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4413      	add	r3, r2
 80012ce:	4a03      	ldr	r2, [pc, #12]	; (80012dc <HAL_IncTick+0x1c>)
 80012d0:	6013      	str	r3, [r2, #0]
}
 80012d2:	bf00      	nop
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr
 80012dc:	20000cac 	.word	0x20000cac
 80012e0:	20000008 	.word	0x20000008

080012e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0
  return uwTick;
 80012e8:	4b03      	ldr	r3, [pc, #12]	; (80012f8 <HAL_GetTick+0x14>)
 80012ea:	681b      	ldr	r3, [r3, #0]
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	20000cac 	.word	0x20000cac

080012fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800130c:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <__NVIC_SetPriorityGrouping+0x44>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001312:	68ba      	ldr	r2, [r7, #8]
 8001314:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001318:	4013      	ands	r3, r2
 800131a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001324:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001328:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800132c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800132e:	4a04      	ldr	r2, [pc, #16]	; (8001340 <__NVIC_SetPriorityGrouping+0x44>)
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	60d3      	str	r3, [r2, #12]
}
 8001334:	bf00      	nop
 8001336:	3714      	adds	r7, #20
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001348:	4b04      	ldr	r3, [pc, #16]	; (800135c <__NVIC_GetPriorityGrouping+0x18>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	0a1b      	lsrs	r3, r3, #8
 800134e:	f003 0307 	and.w	r3, r3, #7
}
 8001352:	4618      	mov	r0, r3
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800136a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136e:	2b00      	cmp	r3, #0
 8001370:	db0b      	blt.n	800138a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	f003 021f 	and.w	r2, r3, #31
 8001378:	4907      	ldr	r1, [pc, #28]	; (8001398 <__NVIC_EnableIRQ+0x38>)
 800137a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137e:	095b      	lsrs	r3, r3, #5
 8001380:	2001      	movs	r0, #1
 8001382:	fa00 f202 	lsl.w	r2, r0, r2
 8001386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	e000e100 	.word	0xe000e100

0800139c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	6039      	str	r1, [r7, #0]
 80013a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	db0a      	blt.n	80013c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	b2da      	uxtb	r2, r3
 80013b4:	490c      	ldr	r1, [pc, #48]	; (80013e8 <__NVIC_SetPriority+0x4c>)
 80013b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ba:	0112      	lsls	r2, r2, #4
 80013bc:	b2d2      	uxtb	r2, r2
 80013be:	440b      	add	r3, r1
 80013c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013c4:	e00a      	b.n	80013dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	4908      	ldr	r1, [pc, #32]	; (80013ec <__NVIC_SetPriority+0x50>)
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	f003 030f 	and.w	r3, r3, #15
 80013d2:	3b04      	subs	r3, #4
 80013d4:	0112      	lsls	r2, r2, #4
 80013d6:	b2d2      	uxtb	r2, r2
 80013d8:	440b      	add	r3, r1
 80013da:	761a      	strb	r2, [r3, #24]
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	e000e100 	.word	0xe000e100
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b089      	sub	sp, #36	; 0x24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	f1c3 0307 	rsb	r3, r3, #7
 800140a:	2b04      	cmp	r3, #4
 800140c:	bf28      	it	cs
 800140e:	2304      	movcs	r3, #4
 8001410:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	3304      	adds	r3, #4
 8001416:	2b06      	cmp	r3, #6
 8001418:	d902      	bls.n	8001420 <NVIC_EncodePriority+0x30>
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	3b03      	subs	r3, #3
 800141e:	e000      	b.n	8001422 <NVIC_EncodePriority+0x32>
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001424:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43da      	mvns	r2, r3
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	401a      	ands	r2, r3
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001438:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	fa01 f303 	lsl.w	r3, r1, r3
 8001442:	43d9      	mvns	r1, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001448:	4313      	orrs	r3, r2
         );
}
 800144a:	4618      	mov	r0, r3
 800144c:	3724      	adds	r7, #36	; 0x24
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b082      	sub	sp, #8
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f7ff ff4c 	bl	80012fc <__NVIC_SetPriorityGrouping>
}
 8001464:	bf00      	nop
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
 8001478:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800147a:	f7ff ff63 	bl	8001344 <__NVIC_GetPriorityGrouping>
 800147e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	68b9      	ldr	r1, [r7, #8]
 8001484:	6978      	ldr	r0, [r7, #20]
 8001486:	f7ff ffb3 	bl	80013f0 <NVIC_EncodePriority>
 800148a:	4602      	mov	r2, r0
 800148c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001490:	4611      	mov	r1, r2
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff ff82 	bl	800139c <__NVIC_SetPriority>
}
 8001498:	bf00      	nop
 800149a:	3718      	adds	r7, #24
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}

080014a0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff ff56 	bl	8001360 <__NVIC_EnableIRQ>
}
 80014b4:	bf00      	nop
 80014b6:	3708      	adds	r7, #8
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d101      	bne.n	80014ce <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e08d      	b.n	80015ea <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	461a      	mov	r2, r3
 80014d4:	4b47      	ldr	r3, [pc, #284]	; (80015f4 <HAL_DMA_Init+0x138>)
 80014d6:	429a      	cmp	r2, r3
 80014d8:	d80f      	bhi.n	80014fa <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	461a      	mov	r2, r3
 80014e0:	4b45      	ldr	r3, [pc, #276]	; (80015f8 <HAL_DMA_Init+0x13c>)
 80014e2:	4413      	add	r3, r2
 80014e4:	4a45      	ldr	r2, [pc, #276]	; (80015fc <HAL_DMA_Init+0x140>)
 80014e6:	fba2 2303 	umull	r2, r3, r2, r3
 80014ea:	091b      	lsrs	r3, r3, #4
 80014ec:	009a      	lsls	r2, r3, #2
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a42      	ldr	r2, [pc, #264]	; (8001600 <HAL_DMA_Init+0x144>)
 80014f6:	641a      	str	r2, [r3, #64]	; 0x40
 80014f8:	e00e      	b.n	8001518 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	461a      	mov	r2, r3
 8001500:	4b40      	ldr	r3, [pc, #256]	; (8001604 <HAL_DMA_Init+0x148>)
 8001502:	4413      	add	r3, r2
 8001504:	4a3d      	ldr	r2, [pc, #244]	; (80015fc <HAL_DMA_Init+0x140>)
 8001506:	fba2 2303 	umull	r2, r3, r2, r3
 800150a:	091b      	lsrs	r3, r3, #4
 800150c:	009a      	lsls	r2, r3, #2
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a3c      	ldr	r2, [pc, #240]	; (8001608 <HAL_DMA_Init+0x14c>)
 8001516:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2202      	movs	r2, #2
 800151c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800152e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001532:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800153c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	691b      	ldr	r3, [r3, #16]
 8001542:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001548:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001554:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6a1b      	ldr	r3, [r3, #32]
 800155a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800155c:	68fa      	ldr	r2, [r7, #12]
 800155e:	4313      	orrs	r3, r2
 8001560:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	68fa      	ldr	r2, [r7, #12]
 8001568:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f000 fa76 	bl	8001a5c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001578:	d102      	bne.n	8001580 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	685a      	ldr	r2, [r3, #4]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001588:	b2d2      	uxtb	r2, r2
 800158a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001594:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d010      	beq.n	80015c0 <HAL_DMA_Init+0x104>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	2b04      	cmp	r3, #4
 80015a4:	d80c      	bhi.n	80015c0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f000 fa96 	bl	8001ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	e008      	b.n	80015d2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2201      	movs	r2, #1
 80015dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3710      	adds	r7, #16
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40020407 	.word	0x40020407
 80015f8:	bffdfff8 	.word	0xbffdfff8
 80015fc:	cccccccd 	.word	0xcccccccd
 8001600:	40020000 	.word	0x40020000
 8001604:	bffdfbf8 	.word	0xbffdfbf8
 8001608:	40020400 	.word	0x40020400

0800160c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b086      	sub	sp, #24
 8001610:	af00      	add	r7, sp, #0
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	60b9      	str	r1, [r7, #8]
 8001616:	607a      	str	r2, [r7, #4]
 8001618:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800161a:	2300      	movs	r3, #0
 800161c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001624:	2b01      	cmp	r3, #1
 8001626:	d101      	bne.n	800162c <HAL_DMA_Start_IT+0x20>
 8001628:	2302      	movs	r3, #2
 800162a:	e066      	b.n	80016fa <HAL_DMA_Start_IT+0xee>
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2201      	movs	r2, #1
 8001630:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800163a:	b2db      	uxtb	r3, r3
 800163c:	2b01      	cmp	r3, #1
 800163e:	d155      	bne.n	80016ec <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2202      	movs	r2, #2
 8001644:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	2200      	movs	r2, #0
 800164c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f022 0201 	bic.w	r2, r2, #1
 800165c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	687a      	ldr	r2, [r7, #4]
 8001662:	68b9      	ldr	r1, [r7, #8]
 8001664:	68f8      	ldr	r0, [r7, #12]
 8001666:	f000 f9bb 	bl	80019e0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	2b00      	cmp	r3, #0
 8001670:	d008      	beq.n	8001684 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f042 020e 	orr.w	r2, r2, #14
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	e00f      	b.n	80016a4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f022 0204 	bic.w	r2, r2, #4
 8001692:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f042 020a 	orr.w	r2, r2, #10
 80016a2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d007      	beq.n	80016c2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016c0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d007      	beq.n	80016da <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80016d8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f042 0201 	orr.w	r2, r2, #1
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	e005      	b.n	80016f8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2200      	movs	r2, #0
 80016f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80016f4:	2302      	movs	r3, #2
 80016f6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80016f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	3718      	adds	r7, #24
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001702:	b480      	push	{r7}
 8001704:	b085      	sub	sp, #20
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800170a:	2300      	movs	r3, #0
 800170c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d005      	beq.n	8001726 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2204      	movs	r2, #4
 800171e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	73fb      	strb	r3, [r7, #15]
 8001724:	e037      	b.n	8001796 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f022 020e 	bic.w	r2, r2, #14
 8001734:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001740:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001744:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	681a      	ldr	r2, [r3, #0]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f022 0201 	bic.w	r2, r2, #1
 8001754:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175a:	f003 021f 	and.w	r2, r3, #31
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	2101      	movs	r1, #1
 8001764:	fa01 f202 	lsl.w	r2, r1, r2
 8001768:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001772:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001778:	2b00      	cmp	r3, #0
 800177a:	d00c      	beq.n	8001796 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001786:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800178a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001794:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2201      	movs	r2, #1
 800179a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80017a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3714      	adds	r7, #20
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b084      	sub	sp, #16
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017bc:	2300      	movs	r3, #0
 80017be:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80017c6:	b2db      	uxtb	r3, r3
 80017c8:	2b02      	cmp	r3, #2
 80017ca:	d00d      	beq.n	80017e8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2204      	movs	r2, #4
 80017d0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2201      	movs	r2, #1
 80017d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	73fb      	strb	r3, [r7, #15]
 80017e6:	e047      	b.n	8001878 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f022 020e 	bic.w	r2, r2, #14
 80017f6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f022 0201 	bic.w	r2, r2, #1
 8001806:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001812:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001816:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181c:	f003 021f 	and.w	r2, r3, #31
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001824:	2101      	movs	r1, #1
 8001826:	fa01 f202 	lsl.w	r2, r1, r2
 800182a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001834:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800183a:	2b00      	cmp	r3, #0
 800183c:	d00c      	beq.n	8001858 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001848:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800184c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001856:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2201      	movs	r2, #1
 800185c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800186c:	2b00      	cmp	r3, #0
 800186e:	d003      	beq.n	8001878 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	4798      	blx	r3
    }
  }
  return status;
 8001878:	7bfb      	ldrb	r3, [r7, #15]
}
 800187a:	4618      	mov	r0, r3
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b084      	sub	sp, #16
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189e:	f003 031f 	and.w	r3, r3, #31
 80018a2:	2204      	movs	r2, #4
 80018a4:	409a      	lsls	r2, r3
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	4013      	ands	r3, r2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d026      	beq.n	80018fc <HAL_DMA_IRQHandler+0x7a>
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	f003 0304 	and.w	r3, r3, #4
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d021      	beq.n	80018fc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0320 	and.w	r3, r3, #32
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d107      	bne.n	80018d6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f022 0204 	bic.w	r2, r2, #4
 80018d4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018da:	f003 021f 	and.w	r2, r3, #31
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	2104      	movs	r1, #4
 80018e4:	fa01 f202 	lsl.w	r2, r1, r2
 80018e8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d071      	beq.n	80019d6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80018fa:	e06c      	b.n	80019d6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001900:	f003 031f 	and.w	r3, r3, #31
 8001904:	2202      	movs	r2, #2
 8001906:	409a      	lsls	r2, r3
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4013      	ands	r3, r2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d02e      	beq.n	800196e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d029      	beq.n	800196e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0320 	and.w	r3, r3, #32
 8001924:	2b00      	cmp	r3, #0
 8001926:	d10b      	bne.n	8001940 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f022 020a 	bic.w	r2, r2, #10
 8001936:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001944:	f003 021f 	and.w	r2, r3, #31
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194c:	2102      	movs	r1, #2
 800194e:	fa01 f202 	lsl.w	r2, r1, r2
 8001952:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001960:	2b00      	cmp	r3, #0
 8001962:	d038      	beq.n	80019d6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800196c:	e033      	b.n	80019d6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001972:	f003 031f 	and.w	r3, r3, #31
 8001976:	2208      	movs	r2, #8
 8001978:	409a      	lsls	r2, r3
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	4013      	ands	r3, r2
 800197e:	2b00      	cmp	r3, #0
 8001980:	d02a      	beq.n	80019d8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	f003 0308 	and.w	r3, r3, #8
 8001988:	2b00      	cmp	r3, #0
 800198a:	d025      	beq.n	80019d8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	681a      	ldr	r2, [r3, #0]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f022 020e 	bic.w	r2, r2, #14
 800199a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a0:	f003 021f 	and.w	r2, r3, #31
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a8:	2101      	movs	r1, #1
 80019aa:	fa01 f202 	lsl.w	r2, r1, r2
 80019ae:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2201      	movs	r2, #1
 80019b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2201      	movs	r2, #1
 80019ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d004      	beq.n	80019d8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80019d6:	bf00      	nop
 80019d8:	bf00      	nop
}
 80019da:	3710      	adds	r7, #16
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b085      	sub	sp, #20
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	60f8      	str	r0, [r7, #12]
 80019e8:	60b9      	str	r1, [r7, #8]
 80019ea:	607a      	str	r2, [r7, #4]
 80019ec:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80019f6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d004      	beq.n	8001a0a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a04:	68fa      	ldr	r2, [r7, #12]
 8001a06:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001a08:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0e:	f003 021f 	and.w	r2, r3, #31
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	2101      	movs	r1, #1
 8001a18:	fa01 f202 	lsl.w	r2, r1, r2
 8001a1c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	2b10      	cmp	r3, #16
 8001a2c:	d108      	bne.n	8001a40 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	68ba      	ldr	r2, [r7, #8]
 8001a3c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001a3e:	e007      	b.n	8001a50 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	68ba      	ldr	r2, [r7, #8]
 8001a46:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	60da      	str	r2, [r3, #12]
}
 8001a50:	bf00      	nop
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b087      	sub	sp, #28
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	461a      	mov	r2, r3
 8001a6a:	4b16      	ldr	r3, [pc, #88]	; (8001ac4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001a6c:	429a      	cmp	r2, r3
 8001a6e:	d802      	bhi.n	8001a76 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001a70:	4b15      	ldr	r3, [pc, #84]	; (8001ac8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001a72:	617b      	str	r3, [r7, #20]
 8001a74:	e001      	b.n	8001a7a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001a76:	4b15      	ldr	r3, [pc, #84]	; (8001acc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001a78:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	3b08      	subs	r3, #8
 8001a86:	4a12      	ldr	r2, [pc, #72]	; (8001ad0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001a88:	fba2 2303 	umull	r2, r3, r2, r3
 8001a8c:	091b      	lsrs	r3, r3, #4
 8001a8e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a94:	089b      	lsrs	r3, r3, #2
 8001a96:	009a      	lsls	r2, r3, #2
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a0b      	ldr	r2, [pc, #44]	; (8001ad4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001aa6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f003 031f 	and.w	r3, r3, #31
 8001aae:	2201      	movs	r2, #1
 8001ab0:	409a      	lsls	r2, r3
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001ab6:	bf00      	nop
 8001ab8:	371c      	adds	r7, #28
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	40020407 	.word	0x40020407
 8001ac8:	40020800 	.word	0x40020800
 8001acc:	40020820 	.word	0x40020820
 8001ad0:	cccccccd 	.word	0xcccccccd
 8001ad4:	40020880 	.word	0x40020880

08001ad8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001ae8:	68fa      	ldr	r2, [r7, #12]
 8001aea:	4b0b      	ldr	r3, [pc, #44]	; (8001b18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001aec:	4413      	add	r3, r2
 8001aee:	009b      	lsls	r3, r3, #2
 8001af0:	461a      	mov	r2, r3
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a08      	ldr	r2, [pc, #32]	; (8001b1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001afa:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	3b01      	subs	r3, #1
 8001b00:	f003 031f 	and.w	r3, r3, #31
 8001b04:	2201      	movs	r2, #1
 8001b06:	409a      	lsls	r2, r3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001b0c:	bf00      	nop
 8001b0e:	3714      	adds	r7, #20
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr
 8001b18:	1000823f 	.word	0x1000823f
 8001b1c:	40020940 	.word	0x40020940

08001b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b087      	sub	sp, #28
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
 8001b28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001b2e:	e15a      	b.n	8001de6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	2101      	movs	r1, #1
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f000 814c 	beq.w	8001de0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 0303 	and.w	r3, r3, #3
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d005      	beq.n	8001b60 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b5c:	2b02      	cmp	r3, #2
 8001b5e:	d130      	bne.n	8001bc2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	2203      	movs	r2, #3
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	693a      	ldr	r2, [r7, #16]
 8001b74:	4013      	ands	r3, r2
 8001b76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	68da      	ldr	r2, [r3, #12]
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	fa02 f303 	lsl.w	r3, r2, r3
 8001b84:	693a      	ldr	r2, [r7, #16]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001b96:	2201      	movs	r2, #1
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43db      	mvns	r3, r3
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	4013      	ands	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	091b      	lsrs	r3, r3, #4
 8001bac:	f003 0201 	and.w	r2, r3, #1
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	693a      	ldr	r2, [r7, #16]
 8001bc0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	f003 0303 	and.w	r3, r3, #3
 8001bca:	2b03      	cmp	r3, #3
 8001bcc:	d017      	beq.n	8001bfe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	68db      	ldr	r3, [r3, #12]
 8001bd2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	2203      	movs	r2, #3
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	43db      	mvns	r3, r3
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	4013      	ands	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	689a      	ldr	r2, [r3, #8]
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	005b      	lsls	r3, r3, #1
 8001bee:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf2:	693a      	ldr	r2, [r7, #16]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	693a      	ldr	r2, [r7, #16]
 8001bfc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	f003 0303 	and.w	r3, r3, #3
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d123      	bne.n	8001c52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	08da      	lsrs	r2, r3, #3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	3208      	adds	r2, #8
 8001c12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	220f      	movs	r2, #15
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43db      	mvns	r3, r3
 8001c28:	693a      	ldr	r2, [r7, #16]
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	691a      	ldr	r2, [r3, #16]
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	009b      	lsls	r3, r3, #2
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	08da      	lsrs	r2, r3, #3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3208      	adds	r2, #8
 8001c4c:	6939      	ldr	r1, [r7, #16]
 8001c4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	005b      	lsls	r3, r3, #1
 8001c5c:	2203      	movs	r2, #3
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43db      	mvns	r3, r3
 8001c64:	693a      	ldr	r2, [r7, #16]
 8001c66:	4013      	ands	r3, r2
 8001c68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f003 0203 	and.w	r2, r3, #3
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	005b      	lsls	r3, r3, #1
 8001c76:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f000 80a6 	beq.w	8001de0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c94:	4b5b      	ldr	r3, [pc, #364]	; (8001e04 <HAL_GPIO_Init+0x2e4>)
 8001c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c98:	4a5a      	ldr	r2, [pc, #360]	; (8001e04 <HAL_GPIO_Init+0x2e4>)
 8001c9a:	f043 0301 	orr.w	r3, r3, #1
 8001c9e:	6613      	str	r3, [r2, #96]	; 0x60
 8001ca0:	4b58      	ldr	r3, [pc, #352]	; (8001e04 <HAL_GPIO_Init+0x2e4>)
 8001ca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ca4:	f003 0301 	and.w	r3, r3, #1
 8001ca8:	60bb      	str	r3, [r7, #8]
 8001caa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cac:	4a56      	ldr	r2, [pc, #344]	; (8001e08 <HAL_GPIO_Init+0x2e8>)
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	089b      	lsrs	r3, r3, #2
 8001cb2:	3302      	adds	r3, #2
 8001cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	f003 0303 	and.w	r3, r3, #3
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	220f      	movs	r2, #15
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	43db      	mvns	r3, r3
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	4013      	ands	r3, r2
 8001cce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001cd6:	d01f      	beq.n	8001d18 <HAL_GPIO_Init+0x1f8>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a4c      	ldr	r2, [pc, #304]	; (8001e0c <HAL_GPIO_Init+0x2ec>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d019      	beq.n	8001d14 <HAL_GPIO_Init+0x1f4>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4a4b      	ldr	r2, [pc, #300]	; (8001e10 <HAL_GPIO_Init+0x2f0>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d013      	beq.n	8001d10 <HAL_GPIO_Init+0x1f0>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a4a      	ldr	r2, [pc, #296]	; (8001e14 <HAL_GPIO_Init+0x2f4>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d00d      	beq.n	8001d0c <HAL_GPIO_Init+0x1ec>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a49      	ldr	r2, [pc, #292]	; (8001e18 <HAL_GPIO_Init+0x2f8>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d007      	beq.n	8001d08 <HAL_GPIO_Init+0x1e8>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	4a48      	ldr	r2, [pc, #288]	; (8001e1c <HAL_GPIO_Init+0x2fc>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d101      	bne.n	8001d04 <HAL_GPIO_Init+0x1e4>
 8001d00:	2305      	movs	r3, #5
 8001d02:	e00a      	b.n	8001d1a <HAL_GPIO_Init+0x1fa>
 8001d04:	2306      	movs	r3, #6
 8001d06:	e008      	b.n	8001d1a <HAL_GPIO_Init+0x1fa>
 8001d08:	2304      	movs	r3, #4
 8001d0a:	e006      	b.n	8001d1a <HAL_GPIO_Init+0x1fa>
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e004      	b.n	8001d1a <HAL_GPIO_Init+0x1fa>
 8001d10:	2302      	movs	r3, #2
 8001d12:	e002      	b.n	8001d1a <HAL_GPIO_Init+0x1fa>
 8001d14:	2301      	movs	r3, #1
 8001d16:	e000      	b.n	8001d1a <HAL_GPIO_Init+0x1fa>
 8001d18:	2300      	movs	r3, #0
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	f002 0203 	and.w	r2, r2, #3
 8001d20:	0092      	lsls	r2, r2, #2
 8001d22:	4093      	lsls	r3, r2
 8001d24:	693a      	ldr	r2, [r7, #16]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d2a:	4937      	ldr	r1, [pc, #220]	; (8001e08 <HAL_GPIO_Init+0x2e8>)
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	089b      	lsrs	r3, r3, #2
 8001d30:	3302      	adds	r3, #2
 8001d32:	693a      	ldr	r2, [r7, #16]
 8001d34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d38:	4b39      	ldr	r3, [pc, #228]	; (8001e20 <HAL_GPIO_Init+0x300>)
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	43db      	mvns	r3, r3
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	4013      	ands	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d003      	beq.n	8001d5c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d5c:	4a30      	ldr	r2, [pc, #192]	; (8001e20 <HAL_GPIO_Init+0x300>)
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d62:	4b2f      	ldr	r3, [pc, #188]	; (8001e20 <HAL_GPIO_Init+0x300>)
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	43db      	mvns	r3, r3
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	4013      	ands	r3, r2
 8001d70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d003      	beq.n	8001d86 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d86:	4a26      	ldr	r2, [pc, #152]	; (8001e20 <HAL_GPIO_Init+0x300>)
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001d8c:	4b24      	ldr	r3, [pc, #144]	; (8001e20 <HAL_GPIO_Init+0x300>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	43db      	mvns	r3, r3
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d003      	beq.n	8001db0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001db0:	4a1b      	ldr	r2, [pc, #108]	; (8001e20 <HAL_GPIO_Init+0x300>)
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001db6:	4b1a      	ldr	r3, [pc, #104]	; (8001e20 <HAL_GPIO_Init+0x300>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	693a      	ldr	r2, [r7, #16]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001dd2:	693a      	ldr	r2, [r7, #16]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001dda:	4a11      	ldr	r2, [pc, #68]	; (8001e20 <HAL_GPIO_Init+0x300>)
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	3301      	adds	r3, #1
 8001de4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	fa22 f303 	lsr.w	r3, r2, r3
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f47f ae9d 	bne.w	8001b30 <HAL_GPIO_Init+0x10>
  }
}
 8001df6:	bf00      	nop
 8001df8:	bf00      	nop
 8001dfa:	371c      	adds	r7, #28
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr
 8001e04:	40021000 	.word	0x40021000
 8001e08:	40010000 	.word	0x40010000
 8001e0c:	48000400 	.word	0x48000400
 8001e10:	48000800 	.word	0x48000800
 8001e14:	48000c00 	.word	0x48000c00
 8001e18:	48001000 	.word	0x48001000
 8001e1c:	48001400 	.word	0x48001400
 8001e20:	40010400 	.word	0x40010400

08001e24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	807b      	strh	r3, [r7, #2]
 8001e30:	4613      	mov	r3, r2
 8001e32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e34:	787b      	ldrb	r3, [r7, #1]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e3a:	887a      	ldrh	r2, [r7, #2]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e40:	e002      	b.n	8001e48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e42:	887a      	ldrh	r2, [r7, #2]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e48:	bf00      	nop
 8001e4a:	370c      	adds	r7, #12
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr

08001e54 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e5e:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e60:	695a      	ldr	r2, [r3, #20]
 8001e62:	88fb      	ldrh	r3, [r7, #6]
 8001e64:	4013      	ands	r3, r2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d006      	beq.n	8001e78 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e6a:	4a05      	ldr	r2, [pc, #20]	; (8001e80 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e6c:	88fb      	ldrh	r3, [r7, #6]
 8001e6e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e70:	88fb      	ldrh	r3, [r7, #6]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f000 f806 	bl	8001e84 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e78:	bf00      	nop
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40010400 	.word	0x40010400

08001e84 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
	...

08001e9c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d141      	bne.n	8001f2e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001eaa:	4b4b      	ldr	r3, [pc, #300]	; (8001fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eb6:	d131      	bne.n	8001f1c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001eb8:	4b47      	ldr	r3, [pc, #284]	; (8001fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ebe:	4a46      	ldr	r2, [pc, #280]	; (8001fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ec0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ec4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ec8:	4b43      	ldr	r3, [pc, #268]	; (8001fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ed0:	4a41      	ldr	r2, [pc, #260]	; (8001fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ed2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ed6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001ed8:	4b40      	ldr	r3, [pc, #256]	; (8001fdc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2232      	movs	r2, #50	; 0x32
 8001ede:	fb02 f303 	mul.w	r3, r2, r3
 8001ee2:	4a3f      	ldr	r2, [pc, #252]	; (8001fe0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee8:	0c9b      	lsrs	r3, r3, #18
 8001eea:	3301      	adds	r3, #1
 8001eec:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001eee:	e002      	b.n	8001ef6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ef6:	4b38      	ldr	r3, [pc, #224]	; (8001fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ef8:	695b      	ldr	r3, [r3, #20]
 8001efa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001efe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f02:	d102      	bne.n	8001f0a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d1f2      	bne.n	8001ef0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f0a:	4b33      	ldr	r3, [pc, #204]	; (8001fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f16:	d158      	bne.n	8001fca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e057      	b.n	8001fcc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f1c:	4b2e      	ldr	r3, [pc, #184]	; (8001fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f22:	4a2d      	ldr	r2, [pc, #180]	; (8001fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001f2c:	e04d      	b.n	8001fca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f34:	d141      	bne.n	8001fba <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f36:	4b28      	ldr	r3, [pc, #160]	; (8001fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f42:	d131      	bne.n	8001fa8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f44:	4b24      	ldr	r3, [pc, #144]	; (8001fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f46:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f4a:	4a23      	ldr	r2, [pc, #140]	; (8001fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f54:	4b20      	ldr	r3, [pc, #128]	; (8001fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f5c:	4a1e      	ldr	r2, [pc, #120]	; (8001fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f62:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f64:	4b1d      	ldr	r3, [pc, #116]	; (8001fdc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2232      	movs	r2, #50	; 0x32
 8001f6a:	fb02 f303 	mul.w	r3, r2, r3
 8001f6e:	4a1c      	ldr	r2, [pc, #112]	; (8001fe0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f70:	fba2 2303 	umull	r2, r3, r2, r3
 8001f74:	0c9b      	lsrs	r3, r3, #18
 8001f76:	3301      	adds	r3, #1
 8001f78:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f7a:	e002      	b.n	8001f82 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001f82:	4b15      	ldr	r3, [pc, #84]	; (8001fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f8e:	d102      	bne.n	8001f96 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d1f2      	bne.n	8001f7c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001f96:	4b10      	ldr	r3, [pc, #64]	; (8001fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f98:	695b      	ldr	r3, [r3, #20]
 8001f9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fa2:	d112      	bne.n	8001fca <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e011      	b.n	8001fcc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fa8:	4b0b      	ldr	r3, [pc, #44]	; (8001fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001faa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001fae:	4a0a      	ldr	r2, [pc, #40]	; (8001fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fb4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001fb8:	e007      	b.n	8001fca <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001fba:	4b07      	ldr	r3, [pc, #28]	; (8001fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001fc2:	4a05      	ldr	r2, [pc, #20]	; (8001fd8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fc4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fc8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3714      	adds	r7, #20
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd6:	4770      	bx	lr
 8001fd8:	40007000 	.word	0x40007000
 8001fdc:	20000000 	.word	0x20000000
 8001fe0:	431bde83 	.word	0x431bde83

08001fe4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001fe8:	4b05      	ldr	r3, [pc, #20]	; (8002000 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	4a04      	ldr	r2, [pc, #16]	; (8002000 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001fee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ff2:	6093      	str	r3, [r2, #8]
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	40007000 	.word	0x40007000

08002004 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b088      	sub	sp, #32
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d101      	bne.n	8002016 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e2fe      	b.n	8002614 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 0301 	and.w	r3, r3, #1
 800201e:	2b00      	cmp	r3, #0
 8002020:	d075      	beq.n	800210e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002022:	4b97      	ldr	r3, [pc, #604]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	f003 030c 	and.w	r3, r3, #12
 800202a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800202c:	4b94      	ldr	r3, [pc, #592]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	f003 0303 	and.w	r3, r3, #3
 8002034:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	2b0c      	cmp	r3, #12
 800203a:	d102      	bne.n	8002042 <HAL_RCC_OscConfig+0x3e>
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	2b03      	cmp	r3, #3
 8002040:	d002      	beq.n	8002048 <HAL_RCC_OscConfig+0x44>
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	2b08      	cmp	r3, #8
 8002046:	d10b      	bne.n	8002060 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002048:	4b8d      	ldr	r3, [pc, #564]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d05b      	beq.n	800210c <HAL_RCC_OscConfig+0x108>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d157      	bne.n	800210c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e2d9      	b.n	8002614 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002068:	d106      	bne.n	8002078 <HAL_RCC_OscConfig+0x74>
 800206a:	4b85      	ldr	r3, [pc, #532]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a84      	ldr	r2, [pc, #528]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 8002070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002074:	6013      	str	r3, [r2, #0]
 8002076:	e01d      	b.n	80020b4 <HAL_RCC_OscConfig+0xb0>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002080:	d10c      	bne.n	800209c <HAL_RCC_OscConfig+0x98>
 8002082:	4b7f      	ldr	r3, [pc, #508]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a7e      	ldr	r2, [pc, #504]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 8002088:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800208c:	6013      	str	r3, [r2, #0]
 800208e:	4b7c      	ldr	r3, [pc, #496]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a7b      	ldr	r2, [pc, #492]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 8002094:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002098:	6013      	str	r3, [r2, #0]
 800209a:	e00b      	b.n	80020b4 <HAL_RCC_OscConfig+0xb0>
 800209c:	4b78      	ldr	r3, [pc, #480]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a77      	ldr	r2, [pc, #476]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 80020a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020a6:	6013      	str	r3, [r2, #0]
 80020a8:	4b75      	ldr	r3, [pc, #468]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a74      	ldr	r2, [pc, #464]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 80020ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d013      	beq.n	80020e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020bc:	f7ff f912 	bl	80012e4 <HAL_GetTick>
 80020c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020c4:	f7ff f90e 	bl	80012e4 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b64      	cmp	r3, #100	; 0x64
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e29e      	b.n	8002614 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020d6:	4b6a      	ldr	r3, [pc, #424]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d0f0      	beq.n	80020c4 <HAL_RCC_OscConfig+0xc0>
 80020e2:	e014      	b.n	800210e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020e4:	f7ff f8fe 	bl	80012e4 <HAL_GetTick>
 80020e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020ea:	e008      	b.n	80020fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020ec:	f7ff f8fa 	bl	80012e4 <HAL_GetTick>
 80020f0:	4602      	mov	r2, r0
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	2b64      	cmp	r3, #100	; 0x64
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e28a      	b.n	8002614 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80020fe:	4b60      	ldr	r3, [pc, #384]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1f0      	bne.n	80020ec <HAL_RCC_OscConfig+0xe8>
 800210a:	e000      	b.n	800210e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800210c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b00      	cmp	r3, #0
 8002118:	d075      	beq.n	8002206 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800211a:	4b59      	ldr	r3, [pc, #356]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	f003 030c 	and.w	r3, r3, #12
 8002122:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002124:	4b56      	ldr	r3, [pc, #344]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	f003 0303 	and.w	r3, r3, #3
 800212c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	2b0c      	cmp	r3, #12
 8002132:	d102      	bne.n	800213a <HAL_RCC_OscConfig+0x136>
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	2b02      	cmp	r3, #2
 8002138:	d002      	beq.n	8002140 <HAL_RCC_OscConfig+0x13c>
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	2b04      	cmp	r3, #4
 800213e:	d11f      	bne.n	8002180 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002140:	4b4f      	ldr	r3, [pc, #316]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002148:	2b00      	cmp	r3, #0
 800214a:	d005      	beq.n	8002158 <HAL_RCC_OscConfig+0x154>
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e25d      	b.n	8002614 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002158:	4b49      	ldr	r3, [pc, #292]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	691b      	ldr	r3, [r3, #16]
 8002164:	061b      	lsls	r3, r3, #24
 8002166:	4946      	ldr	r1, [pc, #280]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 8002168:	4313      	orrs	r3, r2
 800216a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800216c:	4b45      	ldr	r3, [pc, #276]	; (8002284 <HAL_RCC_OscConfig+0x280>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4618      	mov	r0, r3
 8002172:	f7fe ff63 	bl	800103c <HAL_InitTick>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d043      	beq.n	8002204 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e249      	b.n	8002614 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d023      	beq.n	80021d0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002188:	4b3d      	ldr	r3, [pc, #244]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a3c      	ldr	r2, [pc, #240]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 800218e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002192:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002194:	f7ff f8a6 	bl	80012e4 <HAL_GetTick>
 8002198:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800219a:	e008      	b.n	80021ae <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800219c:	f7ff f8a2 	bl	80012e4 <HAL_GetTick>
 80021a0:	4602      	mov	r2, r0
 80021a2:	693b      	ldr	r3, [r7, #16]
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d901      	bls.n	80021ae <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e232      	b.n	8002614 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80021ae:	4b34      	ldr	r3, [pc, #208]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d0f0      	beq.n	800219c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ba:	4b31      	ldr	r3, [pc, #196]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	691b      	ldr	r3, [r3, #16]
 80021c6:	061b      	lsls	r3, r3, #24
 80021c8:	492d      	ldr	r1, [pc, #180]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	604b      	str	r3, [r1, #4]
 80021ce:	e01a      	b.n	8002206 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021d0:	4b2b      	ldr	r3, [pc, #172]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a2a      	ldr	r2, [pc, #168]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 80021d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021dc:	f7ff f882 	bl	80012e4 <HAL_GetTick>
 80021e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021e2:	e008      	b.n	80021f6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021e4:	f7ff f87e 	bl	80012e4 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d901      	bls.n	80021f6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80021f2:	2303      	movs	r3, #3
 80021f4:	e20e      	b.n	8002614 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80021f6:	4b22      	ldr	r3, [pc, #136]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d1f0      	bne.n	80021e4 <HAL_RCC_OscConfig+0x1e0>
 8002202:	e000      	b.n	8002206 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002204:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f003 0308 	and.w	r3, r3, #8
 800220e:	2b00      	cmp	r3, #0
 8002210:	d041      	beq.n	8002296 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d01c      	beq.n	8002254 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800221a:	4b19      	ldr	r3, [pc, #100]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 800221c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002220:	4a17      	ldr	r2, [pc, #92]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 8002222:	f043 0301 	orr.w	r3, r3, #1
 8002226:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800222a:	f7ff f85b 	bl	80012e4 <HAL_GetTick>
 800222e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002230:	e008      	b.n	8002244 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002232:	f7ff f857 	bl	80012e4 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e1e7      	b.n	8002614 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002244:	4b0e      	ldr	r3, [pc, #56]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 8002246:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800224a:	f003 0302 	and.w	r3, r3, #2
 800224e:	2b00      	cmp	r3, #0
 8002250:	d0ef      	beq.n	8002232 <HAL_RCC_OscConfig+0x22e>
 8002252:	e020      	b.n	8002296 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002254:	4b0a      	ldr	r3, [pc, #40]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 8002256:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800225a:	4a09      	ldr	r2, [pc, #36]	; (8002280 <HAL_RCC_OscConfig+0x27c>)
 800225c:	f023 0301 	bic.w	r3, r3, #1
 8002260:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002264:	f7ff f83e 	bl	80012e4 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800226a:	e00d      	b.n	8002288 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800226c:	f7ff f83a 	bl	80012e4 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d906      	bls.n	8002288 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e1ca      	b.n	8002614 <HAL_RCC_OscConfig+0x610>
 800227e:	bf00      	nop
 8002280:	40021000 	.word	0x40021000
 8002284:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002288:	4b8c      	ldr	r3, [pc, #560]	; (80024bc <HAL_RCC_OscConfig+0x4b8>)
 800228a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d1ea      	bne.n	800226c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 0304 	and.w	r3, r3, #4
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f000 80a6 	beq.w	80023f0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022a4:	2300      	movs	r3, #0
 80022a6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022a8:	4b84      	ldr	r3, [pc, #528]	; (80024bc <HAL_RCC_OscConfig+0x4b8>)
 80022aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <HAL_RCC_OscConfig+0x2b4>
 80022b4:	2301      	movs	r3, #1
 80022b6:	e000      	b.n	80022ba <HAL_RCC_OscConfig+0x2b6>
 80022b8:	2300      	movs	r3, #0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00d      	beq.n	80022da <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022be:	4b7f      	ldr	r3, [pc, #508]	; (80024bc <HAL_RCC_OscConfig+0x4b8>)
 80022c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c2:	4a7e      	ldr	r2, [pc, #504]	; (80024bc <HAL_RCC_OscConfig+0x4b8>)
 80022c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022c8:	6593      	str	r3, [r2, #88]	; 0x58
 80022ca:	4b7c      	ldr	r3, [pc, #496]	; (80024bc <HAL_RCC_OscConfig+0x4b8>)
 80022cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80022d6:	2301      	movs	r3, #1
 80022d8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022da:	4b79      	ldr	r3, [pc, #484]	; (80024c0 <HAL_RCC_OscConfig+0x4bc>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d118      	bne.n	8002318 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022e6:	4b76      	ldr	r3, [pc, #472]	; (80024c0 <HAL_RCC_OscConfig+0x4bc>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a75      	ldr	r2, [pc, #468]	; (80024c0 <HAL_RCC_OscConfig+0x4bc>)
 80022ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022f2:	f7fe fff7 	bl	80012e4 <HAL_GetTick>
 80022f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022f8:	e008      	b.n	800230c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022fa:	f7fe fff3 	bl	80012e4 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b02      	cmp	r3, #2
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e183      	b.n	8002614 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800230c:	4b6c      	ldr	r3, [pc, #432]	; (80024c0 <HAL_RCC_OscConfig+0x4bc>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002314:	2b00      	cmp	r3, #0
 8002316:	d0f0      	beq.n	80022fa <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	689b      	ldr	r3, [r3, #8]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d108      	bne.n	8002332 <HAL_RCC_OscConfig+0x32e>
 8002320:	4b66      	ldr	r3, [pc, #408]	; (80024bc <HAL_RCC_OscConfig+0x4b8>)
 8002322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002326:	4a65      	ldr	r2, [pc, #404]	; (80024bc <HAL_RCC_OscConfig+0x4b8>)
 8002328:	f043 0301 	orr.w	r3, r3, #1
 800232c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002330:	e024      	b.n	800237c <HAL_RCC_OscConfig+0x378>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	2b05      	cmp	r3, #5
 8002338:	d110      	bne.n	800235c <HAL_RCC_OscConfig+0x358>
 800233a:	4b60      	ldr	r3, [pc, #384]	; (80024bc <HAL_RCC_OscConfig+0x4b8>)
 800233c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002340:	4a5e      	ldr	r2, [pc, #376]	; (80024bc <HAL_RCC_OscConfig+0x4b8>)
 8002342:	f043 0304 	orr.w	r3, r3, #4
 8002346:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800234a:	4b5c      	ldr	r3, [pc, #368]	; (80024bc <HAL_RCC_OscConfig+0x4b8>)
 800234c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002350:	4a5a      	ldr	r2, [pc, #360]	; (80024bc <HAL_RCC_OscConfig+0x4b8>)
 8002352:	f043 0301 	orr.w	r3, r3, #1
 8002356:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800235a:	e00f      	b.n	800237c <HAL_RCC_OscConfig+0x378>
 800235c:	4b57      	ldr	r3, [pc, #348]	; (80024bc <HAL_RCC_OscConfig+0x4b8>)
 800235e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002362:	4a56      	ldr	r2, [pc, #344]	; (80024bc <HAL_RCC_OscConfig+0x4b8>)
 8002364:	f023 0301 	bic.w	r3, r3, #1
 8002368:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800236c:	4b53      	ldr	r3, [pc, #332]	; (80024bc <HAL_RCC_OscConfig+0x4b8>)
 800236e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002372:	4a52      	ldr	r2, [pc, #328]	; (80024bc <HAL_RCC_OscConfig+0x4b8>)
 8002374:	f023 0304 	bic.w	r3, r3, #4
 8002378:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d016      	beq.n	80023b2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002384:	f7fe ffae 	bl	80012e4 <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800238a:	e00a      	b.n	80023a2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800238c:	f7fe ffaa 	bl	80012e4 <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	f241 3288 	movw	r2, #5000	; 0x1388
 800239a:	4293      	cmp	r3, r2
 800239c:	d901      	bls.n	80023a2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800239e:	2303      	movs	r3, #3
 80023a0:	e138      	b.n	8002614 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023a2:	4b46      	ldr	r3, [pc, #280]	; (80024bc <HAL_RCC_OscConfig+0x4b8>)
 80023a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d0ed      	beq.n	800238c <HAL_RCC_OscConfig+0x388>
 80023b0:	e015      	b.n	80023de <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023b2:	f7fe ff97 	bl	80012e4 <HAL_GetTick>
 80023b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023b8:	e00a      	b.n	80023d0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ba:	f7fe ff93 	bl	80012e4 <HAL_GetTick>
 80023be:	4602      	mov	r2, r0
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e121      	b.n	8002614 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80023d0:	4b3a      	ldr	r3, [pc, #232]	; (80024bc <HAL_RCC_OscConfig+0x4b8>)
 80023d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d6:	f003 0302 	and.w	r3, r3, #2
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d1ed      	bne.n	80023ba <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023de:	7ffb      	ldrb	r3, [r7, #31]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d105      	bne.n	80023f0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023e4:	4b35      	ldr	r3, [pc, #212]	; (80024bc <HAL_RCC_OscConfig+0x4b8>)
 80023e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e8:	4a34      	ldr	r2, [pc, #208]	; (80024bc <HAL_RCC_OscConfig+0x4b8>)
 80023ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0320 	and.w	r3, r3, #32
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d03c      	beq.n	8002476 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d01c      	beq.n	800243e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002404:	4b2d      	ldr	r3, [pc, #180]	; (80024bc <HAL_RCC_OscConfig+0x4b8>)
 8002406:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800240a:	4a2c      	ldr	r2, [pc, #176]	; (80024bc <HAL_RCC_OscConfig+0x4b8>)
 800240c:	f043 0301 	orr.w	r3, r3, #1
 8002410:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002414:	f7fe ff66 	bl	80012e4 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800241c:	f7fe ff62 	bl	80012e4 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e0f2      	b.n	8002614 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800242e:	4b23      	ldr	r3, [pc, #140]	; (80024bc <HAL_RCC_OscConfig+0x4b8>)
 8002430:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002434:	f003 0302 	and.w	r3, r3, #2
 8002438:	2b00      	cmp	r3, #0
 800243a:	d0ef      	beq.n	800241c <HAL_RCC_OscConfig+0x418>
 800243c:	e01b      	b.n	8002476 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800243e:	4b1f      	ldr	r3, [pc, #124]	; (80024bc <HAL_RCC_OscConfig+0x4b8>)
 8002440:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002444:	4a1d      	ldr	r2, [pc, #116]	; (80024bc <HAL_RCC_OscConfig+0x4b8>)
 8002446:	f023 0301 	bic.w	r3, r3, #1
 800244a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800244e:	f7fe ff49 	bl	80012e4 <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002454:	e008      	b.n	8002468 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002456:	f7fe ff45 	bl	80012e4 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e0d5      	b.n	8002614 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002468:	4b14      	ldr	r3, [pc, #80]	; (80024bc <HAL_RCC_OscConfig+0x4b8>)
 800246a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1ef      	bne.n	8002456 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	69db      	ldr	r3, [r3, #28]
 800247a:	2b00      	cmp	r3, #0
 800247c:	f000 80c9 	beq.w	8002612 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002480:	4b0e      	ldr	r3, [pc, #56]	; (80024bc <HAL_RCC_OscConfig+0x4b8>)
 8002482:	689b      	ldr	r3, [r3, #8]
 8002484:	f003 030c 	and.w	r3, r3, #12
 8002488:	2b0c      	cmp	r3, #12
 800248a:	f000 8083 	beq.w	8002594 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	2b02      	cmp	r3, #2
 8002494:	d15e      	bne.n	8002554 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002496:	4b09      	ldr	r3, [pc, #36]	; (80024bc <HAL_RCC_OscConfig+0x4b8>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a08      	ldr	r2, [pc, #32]	; (80024bc <HAL_RCC_OscConfig+0x4b8>)
 800249c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a2:	f7fe ff1f 	bl	80012e4 <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024a8:	e00c      	b.n	80024c4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024aa:	f7fe ff1b 	bl	80012e4 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	2b02      	cmp	r3, #2
 80024b6:	d905      	bls.n	80024c4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80024b8:	2303      	movs	r3, #3
 80024ba:	e0ab      	b.n	8002614 <HAL_RCC_OscConfig+0x610>
 80024bc:	40021000 	.word	0x40021000
 80024c0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024c4:	4b55      	ldr	r3, [pc, #340]	; (800261c <HAL_RCC_OscConfig+0x618>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d1ec      	bne.n	80024aa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024d0:	4b52      	ldr	r3, [pc, #328]	; (800261c <HAL_RCC_OscConfig+0x618>)
 80024d2:	68da      	ldr	r2, [r3, #12]
 80024d4:	4b52      	ldr	r3, [pc, #328]	; (8002620 <HAL_RCC_OscConfig+0x61c>)
 80024d6:	4013      	ands	r3, r2
 80024d8:	687a      	ldr	r2, [r7, #4]
 80024da:	6a11      	ldr	r1, [r2, #32]
 80024dc:	687a      	ldr	r2, [r7, #4]
 80024de:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024e0:	3a01      	subs	r2, #1
 80024e2:	0112      	lsls	r2, r2, #4
 80024e4:	4311      	orrs	r1, r2
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80024ea:	0212      	lsls	r2, r2, #8
 80024ec:	4311      	orrs	r1, r2
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80024f2:	0852      	lsrs	r2, r2, #1
 80024f4:	3a01      	subs	r2, #1
 80024f6:	0552      	lsls	r2, r2, #21
 80024f8:	4311      	orrs	r1, r2
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80024fe:	0852      	lsrs	r2, r2, #1
 8002500:	3a01      	subs	r2, #1
 8002502:	0652      	lsls	r2, r2, #25
 8002504:	4311      	orrs	r1, r2
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800250a:	06d2      	lsls	r2, r2, #27
 800250c:	430a      	orrs	r2, r1
 800250e:	4943      	ldr	r1, [pc, #268]	; (800261c <HAL_RCC_OscConfig+0x618>)
 8002510:	4313      	orrs	r3, r2
 8002512:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002514:	4b41      	ldr	r3, [pc, #260]	; (800261c <HAL_RCC_OscConfig+0x618>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a40      	ldr	r2, [pc, #256]	; (800261c <HAL_RCC_OscConfig+0x618>)
 800251a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800251e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002520:	4b3e      	ldr	r3, [pc, #248]	; (800261c <HAL_RCC_OscConfig+0x618>)
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	4a3d      	ldr	r2, [pc, #244]	; (800261c <HAL_RCC_OscConfig+0x618>)
 8002526:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800252a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252c:	f7fe feda 	bl	80012e4 <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002534:	f7fe fed6 	bl	80012e4 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e066      	b.n	8002614 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002546:	4b35      	ldr	r3, [pc, #212]	; (800261c <HAL_RCC_OscConfig+0x618>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0f0      	beq.n	8002534 <HAL_RCC_OscConfig+0x530>
 8002552:	e05e      	b.n	8002612 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002554:	4b31      	ldr	r3, [pc, #196]	; (800261c <HAL_RCC_OscConfig+0x618>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a30      	ldr	r2, [pc, #192]	; (800261c <HAL_RCC_OscConfig+0x618>)
 800255a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800255e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002560:	f7fe fec0 	bl	80012e4 <HAL_GetTick>
 8002564:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002566:	e008      	b.n	800257a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002568:	f7fe febc 	bl	80012e4 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d901      	bls.n	800257a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e04c      	b.n	8002614 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800257a:	4b28      	ldr	r3, [pc, #160]	; (800261c <HAL_RCC_OscConfig+0x618>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d1f0      	bne.n	8002568 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002586:	4b25      	ldr	r3, [pc, #148]	; (800261c <HAL_RCC_OscConfig+0x618>)
 8002588:	68da      	ldr	r2, [r3, #12]
 800258a:	4924      	ldr	r1, [pc, #144]	; (800261c <HAL_RCC_OscConfig+0x618>)
 800258c:	4b25      	ldr	r3, [pc, #148]	; (8002624 <HAL_RCC_OscConfig+0x620>)
 800258e:	4013      	ands	r3, r2
 8002590:	60cb      	str	r3, [r1, #12]
 8002592:	e03e      	b.n	8002612 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	69db      	ldr	r3, [r3, #28]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d101      	bne.n	80025a0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e039      	b.n	8002614 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80025a0:	4b1e      	ldr	r3, [pc, #120]	; (800261c <HAL_RCC_OscConfig+0x618>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	f003 0203 	and.w	r2, r3, #3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6a1b      	ldr	r3, [r3, #32]
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d12c      	bne.n	800260e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025be:	3b01      	subs	r3, #1
 80025c0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d123      	bne.n	800260e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025d0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d11b      	bne.n	800260e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025d6:	697b      	ldr	r3, [r7, #20]
 80025d8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80025e2:	429a      	cmp	r2, r3
 80025e4:	d113      	bne.n	800260e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f0:	085b      	lsrs	r3, r3, #1
 80025f2:	3b01      	subs	r3, #1
 80025f4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d109      	bne.n	800260e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002604:	085b      	lsrs	r3, r3, #1
 8002606:	3b01      	subs	r3, #1
 8002608:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800260a:	429a      	cmp	r2, r3
 800260c:	d001      	beq.n	8002612 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e000      	b.n	8002614 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002612:	2300      	movs	r3, #0
}
 8002614:	4618      	mov	r0, r3
 8002616:	3720      	adds	r7, #32
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40021000 	.word	0x40021000
 8002620:	019f800c 	.word	0x019f800c
 8002624:	feeefffc 	.word	0xfeeefffc

08002628 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b086      	sub	sp, #24
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002632:	2300      	movs	r3, #0
 8002634:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d101      	bne.n	8002640 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800263c:	2301      	movs	r3, #1
 800263e:	e11e      	b.n	800287e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002640:	4b91      	ldr	r3, [pc, #580]	; (8002888 <HAL_RCC_ClockConfig+0x260>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 030f 	and.w	r3, r3, #15
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	429a      	cmp	r2, r3
 800264c:	d910      	bls.n	8002670 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264e:	4b8e      	ldr	r3, [pc, #568]	; (8002888 <HAL_RCC_ClockConfig+0x260>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f023 020f 	bic.w	r2, r3, #15
 8002656:	498c      	ldr	r1, [pc, #560]	; (8002888 <HAL_RCC_ClockConfig+0x260>)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	4313      	orrs	r3, r2
 800265c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800265e:	4b8a      	ldr	r3, [pc, #552]	; (8002888 <HAL_RCC_ClockConfig+0x260>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 030f 	and.w	r3, r3, #15
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	429a      	cmp	r2, r3
 800266a:	d001      	beq.n	8002670 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e106      	b.n	800287e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	2b00      	cmp	r3, #0
 800267a:	d073      	beq.n	8002764 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2b03      	cmp	r3, #3
 8002682:	d129      	bne.n	80026d8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002684:	4b81      	ldr	r3, [pc, #516]	; (800288c <HAL_RCC_ClockConfig+0x264>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d101      	bne.n	8002694 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002690:	2301      	movs	r3, #1
 8002692:	e0f4      	b.n	800287e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002694:	f000 f9d0 	bl	8002a38 <RCC_GetSysClockFreqFromPLLSource>
 8002698:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	4a7c      	ldr	r2, [pc, #496]	; (8002890 <HAL_RCC_ClockConfig+0x268>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d93f      	bls.n	8002722 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80026a2:	4b7a      	ldr	r3, [pc, #488]	; (800288c <HAL_RCC_ClockConfig+0x264>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d009      	beq.n	80026c2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d033      	beq.n	8002722 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d12f      	bne.n	8002722 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80026c2:	4b72      	ldr	r3, [pc, #456]	; (800288c <HAL_RCC_ClockConfig+0x264>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026ca:	4a70      	ldr	r2, [pc, #448]	; (800288c <HAL_RCC_ClockConfig+0x264>)
 80026cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026d0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80026d2:	2380      	movs	r3, #128	; 0x80
 80026d4:	617b      	str	r3, [r7, #20]
 80026d6:	e024      	b.n	8002722 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d107      	bne.n	80026f0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026e0:	4b6a      	ldr	r3, [pc, #424]	; (800288c <HAL_RCC_ClockConfig+0x264>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d109      	bne.n	8002700 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e0c6      	b.n	800287e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026f0:	4b66      	ldr	r3, [pc, #408]	; (800288c <HAL_RCC_ClockConfig+0x264>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d101      	bne.n	8002700 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e0be      	b.n	800287e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002700:	f000 f8ce 	bl	80028a0 <HAL_RCC_GetSysClockFreq>
 8002704:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	4a61      	ldr	r2, [pc, #388]	; (8002890 <HAL_RCC_ClockConfig+0x268>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d909      	bls.n	8002722 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800270e:	4b5f      	ldr	r3, [pc, #380]	; (800288c <HAL_RCC_ClockConfig+0x264>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002716:	4a5d      	ldr	r2, [pc, #372]	; (800288c <HAL_RCC_ClockConfig+0x264>)
 8002718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800271c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800271e:	2380      	movs	r3, #128	; 0x80
 8002720:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002722:	4b5a      	ldr	r3, [pc, #360]	; (800288c <HAL_RCC_ClockConfig+0x264>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f023 0203 	bic.w	r2, r3, #3
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	4957      	ldr	r1, [pc, #348]	; (800288c <HAL_RCC_ClockConfig+0x264>)
 8002730:	4313      	orrs	r3, r2
 8002732:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002734:	f7fe fdd6 	bl	80012e4 <HAL_GetTick>
 8002738:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800273a:	e00a      	b.n	8002752 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800273c:	f7fe fdd2 	bl	80012e4 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	f241 3288 	movw	r2, #5000	; 0x1388
 800274a:	4293      	cmp	r3, r2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e095      	b.n	800287e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002752:	4b4e      	ldr	r3, [pc, #312]	; (800288c <HAL_RCC_ClockConfig+0x264>)
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	f003 020c 	and.w	r2, r3, #12
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	429a      	cmp	r2, r3
 8002762:	d1eb      	bne.n	800273c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d023      	beq.n	80027b8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	2b00      	cmp	r3, #0
 800277a:	d005      	beq.n	8002788 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800277c:	4b43      	ldr	r3, [pc, #268]	; (800288c <HAL_RCC_ClockConfig+0x264>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	4a42      	ldr	r2, [pc, #264]	; (800288c <HAL_RCC_ClockConfig+0x264>)
 8002782:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002786:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0308 	and.w	r3, r3, #8
 8002790:	2b00      	cmp	r3, #0
 8002792:	d007      	beq.n	80027a4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002794:	4b3d      	ldr	r3, [pc, #244]	; (800288c <HAL_RCC_ClockConfig+0x264>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800279c:	4a3b      	ldr	r2, [pc, #236]	; (800288c <HAL_RCC_ClockConfig+0x264>)
 800279e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027a4:	4b39      	ldr	r3, [pc, #228]	; (800288c <HAL_RCC_ClockConfig+0x264>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	4936      	ldr	r1, [pc, #216]	; (800288c <HAL_RCC_ClockConfig+0x264>)
 80027b2:	4313      	orrs	r3, r2
 80027b4:	608b      	str	r3, [r1, #8]
 80027b6:	e008      	b.n	80027ca <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	2b80      	cmp	r3, #128	; 0x80
 80027bc:	d105      	bne.n	80027ca <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80027be:	4b33      	ldr	r3, [pc, #204]	; (800288c <HAL_RCC_ClockConfig+0x264>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	4a32      	ldr	r2, [pc, #200]	; (800288c <HAL_RCC_ClockConfig+0x264>)
 80027c4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027c8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027ca:	4b2f      	ldr	r3, [pc, #188]	; (8002888 <HAL_RCC_ClockConfig+0x260>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	683a      	ldr	r2, [r7, #0]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d21d      	bcs.n	8002814 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027d8:	4b2b      	ldr	r3, [pc, #172]	; (8002888 <HAL_RCC_ClockConfig+0x260>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f023 020f 	bic.w	r2, r3, #15
 80027e0:	4929      	ldr	r1, [pc, #164]	; (8002888 <HAL_RCC_ClockConfig+0x260>)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80027e8:	f7fe fd7c 	bl	80012e4 <HAL_GetTick>
 80027ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ee:	e00a      	b.n	8002806 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f0:	f7fe fd78 	bl	80012e4 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80027fe:	4293      	cmp	r3, r2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e03b      	b.n	800287e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002806:	4b20      	ldr	r3, [pc, #128]	; (8002888 <HAL_RCC_ClockConfig+0x260>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	429a      	cmp	r2, r3
 8002812:	d1ed      	bne.n	80027f0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0304 	and.w	r3, r3, #4
 800281c:	2b00      	cmp	r3, #0
 800281e:	d008      	beq.n	8002832 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002820:	4b1a      	ldr	r3, [pc, #104]	; (800288c <HAL_RCC_ClockConfig+0x264>)
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	4917      	ldr	r1, [pc, #92]	; (800288c <HAL_RCC_ClockConfig+0x264>)
 800282e:	4313      	orrs	r3, r2
 8002830:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0308 	and.w	r3, r3, #8
 800283a:	2b00      	cmp	r3, #0
 800283c:	d009      	beq.n	8002852 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800283e:	4b13      	ldr	r3, [pc, #76]	; (800288c <HAL_RCC_ClockConfig+0x264>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	490f      	ldr	r1, [pc, #60]	; (800288c <HAL_RCC_ClockConfig+0x264>)
 800284e:	4313      	orrs	r3, r2
 8002850:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002852:	f000 f825 	bl	80028a0 <HAL_RCC_GetSysClockFreq>
 8002856:	4602      	mov	r2, r0
 8002858:	4b0c      	ldr	r3, [pc, #48]	; (800288c <HAL_RCC_ClockConfig+0x264>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	091b      	lsrs	r3, r3, #4
 800285e:	f003 030f 	and.w	r3, r3, #15
 8002862:	490c      	ldr	r1, [pc, #48]	; (8002894 <HAL_RCC_ClockConfig+0x26c>)
 8002864:	5ccb      	ldrb	r3, [r1, r3]
 8002866:	f003 031f 	and.w	r3, r3, #31
 800286a:	fa22 f303 	lsr.w	r3, r2, r3
 800286e:	4a0a      	ldr	r2, [pc, #40]	; (8002898 <HAL_RCC_ClockConfig+0x270>)
 8002870:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002872:	4b0a      	ldr	r3, [pc, #40]	; (800289c <HAL_RCC_ClockConfig+0x274>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f7fe fbe0 	bl	800103c <HAL_InitTick>
 800287c:	4603      	mov	r3, r0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3718      	adds	r7, #24
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40022000 	.word	0x40022000
 800288c:	40021000 	.word	0x40021000
 8002890:	04c4b400 	.word	0x04c4b400
 8002894:	08006920 	.word	0x08006920
 8002898:	20000000 	.word	0x20000000
 800289c:	20000004 	.word	0x20000004

080028a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	b087      	sub	sp, #28
 80028a4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80028a6:	4b2c      	ldr	r3, [pc, #176]	; (8002958 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	f003 030c 	and.w	r3, r3, #12
 80028ae:	2b04      	cmp	r3, #4
 80028b0:	d102      	bne.n	80028b8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80028b2:	4b2a      	ldr	r3, [pc, #168]	; (800295c <HAL_RCC_GetSysClockFreq+0xbc>)
 80028b4:	613b      	str	r3, [r7, #16]
 80028b6:	e047      	b.n	8002948 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80028b8:	4b27      	ldr	r3, [pc, #156]	; (8002958 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f003 030c 	and.w	r3, r3, #12
 80028c0:	2b08      	cmp	r3, #8
 80028c2:	d102      	bne.n	80028ca <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028c4:	4b26      	ldr	r3, [pc, #152]	; (8002960 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028c6:	613b      	str	r3, [r7, #16]
 80028c8:	e03e      	b.n	8002948 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80028ca:	4b23      	ldr	r3, [pc, #140]	; (8002958 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	f003 030c 	and.w	r3, r3, #12
 80028d2:	2b0c      	cmp	r3, #12
 80028d4:	d136      	bne.n	8002944 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028d6:	4b20      	ldr	r3, [pc, #128]	; (8002958 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	f003 0303 	and.w	r3, r3, #3
 80028de:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028e0:	4b1d      	ldr	r3, [pc, #116]	; (8002958 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	091b      	lsrs	r3, r3, #4
 80028e6:	f003 030f 	and.w	r3, r3, #15
 80028ea:	3301      	adds	r3, #1
 80028ec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2b03      	cmp	r3, #3
 80028f2:	d10c      	bne.n	800290e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028f4:	4a1a      	ldr	r2, [pc, #104]	; (8002960 <HAL_RCC_GetSysClockFreq+0xc0>)
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028fc:	4a16      	ldr	r2, [pc, #88]	; (8002958 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028fe:	68d2      	ldr	r2, [r2, #12]
 8002900:	0a12      	lsrs	r2, r2, #8
 8002902:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002906:	fb02 f303 	mul.w	r3, r2, r3
 800290a:	617b      	str	r3, [r7, #20]
      break;
 800290c:	e00c      	b.n	8002928 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800290e:	4a13      	ldr	r2, [pc, #76]	; (800295c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	fbb2 f3f3 	udiv	r3, r2, r3
 8002916:	4a10      	ldr	r2, [pc, #64]	; (8002958 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002918:	68d2      	ldr	r2, [r2, #12]
 800291a:	0a12      	lsrs	r2, r2, #8
 800291c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002920:	fb02 f303 	mul.w	r3, r2, r3
 8002924:	617b      	str	r3, [r7, #20]
      break;
 8002926:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002928:	4b0b      	ldr	r3, [pc, #44]	; (8002958 <HAL_RCC_GetSysClockFreq+0xb8>)
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	0e5b      	lsrs	r3, r3, #25
 800292e:	f003 0303 	and.w	r3, r3, #3
 8002932:	3301      	adds	r3, #1
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002938:	697a      	ldr	r2, [r7, #20]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002940:	613b      	str	r3, [r7, #16]
 8002942:	e001      	b.n	8002948 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002944:	2300      	movs	r3, #0
 8002946:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002948:	693b      	ldr	r3, [r7, #16]
}
 800294a:	4618      	mov	r0, r3
 800294c:	371c      	adds	r7, #28
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	40021000 	.word	0x40021000
 800295c:	00f42400 	.word	0x00f42400
 8002960:	016e3600 	.word	0x016e3600

08002964 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002968:	4b03      	ldr	r3, [pc, #12]	; (8002978 <HAL_RCC_GetHCLKFreq+0x14>)
 800296a:	681b      	ldr	r3, [r3, #0]
}
 800296c:	4618      	mov	r0, r3
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr
 8002976:	bf00      	nop
 8002978:	20000000 	.word	0x20000000

0800297c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002980:	f7ff fff0 	bl	8002964 <HAL_RCC_GetHCLKFreq>
 8002984:	4602      	mov	r2, r0
 8002986:	4b06      	ldr	r3, [pc, #24]	; (80029a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	0a1b      	lsrs	r3, r3, #8
 800298c:	f003 0307 	and.w	r3, r3, #7
 8002990:	4904      	ldr	r1, [pc, #16]	; (80029a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002992:	5ccb      	ldrb	r3, [r1, r3]
 8002994:	f003 031f 	and.w	r3, r3, #31
 8002998:	fa22 f303 	lsr.w	r3, r2, r3
}
 800299c:	4618      	mov	r0, r3
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40021000 	.word	0x40021000
 80029a4:	08006930 	.word	0x08006930

080029a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80029ac:	f7ff ffda 	bl	8002964 <HAL_RCC_GetHCLKFreq>
 80029b0:	4602      	mov	r2, r0
 80029b2:	4b06      	ldr	r3, [pc, #24]	; (80029cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	0adb      	lsrs	r3, r3, #11
 80029b8:	f003 0307 	and.w	r3, r3, #7
 80029bc:	4904      	ldr	r1, [pc, #16]	; (80029d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80029be:	5ccb      	ldrb	r3, [r1, r3]
 80029c0:	f003 031f 	and.w	r3, r3, #31
 80029c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	bd80      	pop	{r7, pc}
 80029cc:	40021000 	.word	0x40021000
 80029d0:	08006930 	.word	0x08006930

080029d4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	220f      	movs	r2, #15
 80029e2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80029e4:	4b12      	ldr	r3, [pc, #72]	; (8002a30 <HAL_RCC_GetClockConfig+0x5c>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f003 0203 	and.w	r2, r3, #3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80029f0:	4b0f      	ldr	r3, [pc, #60]	; (8002a30 <HAL_RCC_GetClockConfig+0x5c>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80029fc:	4b0c      	ldr	r3, [pc, #48]	; (8002a30 <HAL_RCC_GetClockConfig+0x5c>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002a08:	4b09      	ldr	r3, [pc, #36]	; (8002a30 <HAL_RCC_GetClockConfig+0x5c>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	08db      	lsrs	r3, r3, #3
 8002a0e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002a16:	4b07      	ldr	r3, [pc, #28]	; (8002a34 <HAL_RCC_GetClockConfig+0x60>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 020f 	and.w	r2, r3, #15
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	601a      	str	r2, [r3, #0]
}
 8002a22:	bf00      	nop
 8002a24:	370c      	adds	r7, #12
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	40021000 	.word	0x40021000
 8002a34:	40022000 	.word	0x40022000

08002a38 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b087      	sub	sp, #28
 8002a3c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a3e:	4b1e      	ldr	r3, [pc, #120]	; (8002ab8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	f003 0303 	and.w	r3, r3, #3
 8002a46:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a48:	4b1b      	ldr	r3, [pc, #108]	; (8002ab8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	091b      	lsrs	r3, r3, #4
 8002a4e:	f003 030f 	and.w	r3, r3, #15
 8002a52:	3301      	adds	r3, #1
 8002a54:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	2b03      	cmp	r3, #3
 8002a5a:	d10c      	bne.n	8002a76 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a5c:	4a17      	ldr	r2, [pc, #92]	; (8002abc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a64:	4a14      	ldr	r2, [pc, #80]	; (8002ab8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a66:	68d2      	ldr	r2, [r2, #12]
 8002a68:	0a12      	lsrs	r2, r2, #8
 8002a6a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a6e:	fb02 f303 	mul.w	r3, r2, r3
 8002a72:	617b      	str	r3, [r7, #20]
    break;
 8002a74:	e00c      	b.n	8002a90 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002a76:	4a12      	ldr	r2, [pc, #72]	; (8002ac0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7e:	4a0e      	ldr	r2, [pc, #56]	; (8002ab8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a80:	68d2      	ldr	r2, [r2, #12]
 8002a82:	0a12      	lsrs	r2, r2, #8
 8002a84:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002a88:	fb02 f303 	mul.w	r3, r2, r3
 8002a8c:	617b      	str	r3, [r7, #20]
    break;
 8002a8e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a90:	4b09      	ldr	r3, [pc, #36]	; (8002ab8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	0e5b      	lsrs	r3, r3, #25
 8002a96:	f003 0303 	and.w	r3, r3, #3
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	005b      	lsls	r3, r3, #1
 8002a9e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002aa0:	697a      	ldr	r2, [r7, #20]
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aa8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002aaa:	687b      	ldr	r3, [r7, #4]
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	371c      	adds	r7, #28
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	016e3600 	.word	0x016e3600
 8002ac0:	00f42400 	.word	0x00f42400

08002ac4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002acc:	2300      	movs	r3, #0
 8002ace:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	f000 8098 	beq.w	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ae6:	4b43      	ldr	r3, [pc, #268]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d10d      	bne.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002af2:	4b40      	ldr	r3, [pc, #256]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af6:	4a3f      	ldr	r2, [pc, #252]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002afc:	6593      	str	r3, [r2, #88]	; 0x58
 8002afe:	4b3d      	ldr	r3, [pc, #244]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b06:	60bb      	str	r3, [r7, #8]
 8002b08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b0e:	4b3a      	ldr	r3, [pc, #232]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a39      	ldr	r2, [pc, #228]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002b14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b18:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b1a:	f7fe fbe3 	bl	80012e4 <HAL_GetTick>
 8002b1e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b20:	e009      	b.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b22:	f7fe fbdf 	bl	80012e4 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d902      	bls.n	8002b36 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	74fb      	strb	r3, [r7, #19]
        break;
 8002b34:	e005      	b.n	8002b42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b36:	4b30      	ldr	r3, [pc, #192]	; (8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d0ef      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002b42:	7cfb      	ldrb	r3, [r7, #19]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d159      	bne.n	8002bfc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b48:	4b2a      	ldr	r3, [pc, #168]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b52:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d01e      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d019      	beq.n	8002b98 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b64:	4b23      	ldr	r3, [pc, #140]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b6e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b70:	4b20      	ldr	r3, [pc, #128]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b76:	4a1f      	ldr	r2, [pc, #124]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b80:	4b1c      	ldr	r3, [pc, #112]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b86:	4a1b      	ldr	r2, [pc, #108]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b90:	4a18      	ldr	r2, [pc, #96]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d016      	beq.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba2:	f7fe fb9f 	bl	80012e4 <HAL_GetTick>
 8002ba6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ba8:	e00b      	b.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002baa:	f7fe fb9b 	bl	80012e4 <HAL_GetTick>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d902      	bls.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002bbc:	2303      	movs	r3, #3
 8002bbe:	74fb      	strb	r3, [r7, #19]
            break;
 8002bc0:	e006      	b.n	8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bc2:	4b0c      	ldr	r3, [pc, #48]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc8:	f003 0302 	and.w	r3, r3, #2
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d0ec      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002bd0:	7cfb      	ldrb	r3, [r7, #19]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d10b      	bne.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bd6:	4b07      	ldr	r3, [pc, #28]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bdc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be4:	4903      	ldr	r1, [pc, #12]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002be6:	4313      	orrs	r3, r2
 8002be8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002bec:	e008      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002bee:	7cfb      	ldrb	r3, [r7, #19]
 8002bf0:	74bb      	strb	r3, [r7, #18]
 8002bf2:	e005      	b.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bfc:	7cfb      	ldrb	r3, [r7, #19]
 8002bfe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c00:	7c7b      	ldrb	r3, [r7, #17]
 8002c02:	2b01      	cmp	r3, #1
 8002c04:	d105      	bne.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c06:	4ba7      	ldr	r3, [pc, #668]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c0a:	4aa6      	ldr	r2, [pc, #664]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c10:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0301 	and.w	r3, r3, #1
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00a      	beq.n	8002c34 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c1e:	4ba1      	ldr	r3, [pc, #644]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c24:	f023 0203 	bic.w	r2, r3, #3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	499d      	ldr	r1, [pc, #628]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00a      	beq.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c40:	4b98      	ldr	r3, [pc, #608]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c46:	f023 020c 	bic.w	r2, r3, #12
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	4995      	ldr	r1, [pc, #596]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c50:	4313      	orrs	r3, r2
 8002c52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0304 	and.w	r3, r3, #4
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00a      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002c62:	4b90      	ldr	r3, [pc, #576]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c68:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	498c      	ldr	r1, [pc, #560]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0308 	and.w	r3, r3, #8
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00a      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002c84:	4b87      	ldr	r3, [pc, #540]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	691b      	ldr	r3, [r3, #16]
 8002c92:	4984      	ldr	r1, [pc, #528]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0310 	and.w	r3, r3, #16
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00a      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ca6:	4b7f      	ldr	r3, [pc, #508]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	497b      	ldr	r1, [pc, #492]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0320 	and.w	r3, r3, #32
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00a      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002cc8:	4b76      	ldr	r3, [pc, #472]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	4973      	ldr	r1, [pc, #460]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00a      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002cea:	4b6e      	ldr	r3, [pc, #440]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	69db      	ldr	r3, [r3, #28]
 8002cf8:	496a      	ldr	r1, [pc, #424]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00a      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d0c:	4b65      	ldr	r3, [pc, #404]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d12:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	4962      	ldr	r1, [pc, #392]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00a      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d2e:	4b5d      	ldr	r3, [pc, #372]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3c:	4959      	ldr	r1, [pc, #356]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00a      	beq.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d50:	4b54      	ldr	r3, [pc, #336]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d56:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d5e:	4951      	ldr	r1, [pc, #324]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d015      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d72:	4b4c      	ldr	r3, [pc, #304]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d78:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d80:	4948      	ldr	r1, [pc, #288]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d90:	d105      	bne.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d92:	4b44      	ldr	r3, [pc, #272]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	4a43      	ldr	r2, [pc, #268]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d9c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d015      	beq.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002daa:	4b3e      	ldr	r3, [pc, #248]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002db0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db8:	493a      	ldr	r1, [pc, #232]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dc8:	d105      	bne.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dca:	4b36      	ldr	r3, [pc, #216]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	4a35      	ldr	r2, [pc, #212]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dd0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dd4:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d015      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002de2:	4b30      	ldr	r3, [pc, #192]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df0:	492c      	ldr	r1, [pc, #176]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e00:	d105      	bne.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e02:	4b28      	ldr	r3, [pc, #160]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	4a27      	ldr	r2, [pc, #156]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e0c:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d015      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e1a:	4b22      	ldr	r3, [pc, #136]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e20:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e28:	491e      	ldr	r1, [pc, #120]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e34:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e38:	d105      	bne.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e3a:	4b1a      	ldr	r3, [pc, #104]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	4a19      	ldr	r2, [pc, #100]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e40:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e44:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d015      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e52:	4b14      	ldr	r3, [pc, #80]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e58:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e60:	4910      	ldr	r1, [pc, #64]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e6c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e70:	d105      	bne.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e72:	4b0c      	ldr	r3, [pc, #48]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e74:	68db      	ldr	r3, [r3, #12]
 8002e76:	4a0b      	ldr	r2, [pc, #44]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e7c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d018      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002e8a:	4b06      	ldr	r3, [pc, #24]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e90:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e98:	4902      	ldr	r1, [pc, #8]	; (8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	e001      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002ea4:	40021000 	.word	0x40021000
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002eae:	d105      	bne.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002eb0:	4b21      	ldr	r3, [pc, #132]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	4a20      	ldr	r2, [pc, #128]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002eb6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eba:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d015      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002ec8:	4b1b      	ldr	r3, [pc, #108]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002eca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ece:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed6:	4918      	ldr	r1, [pc, #96]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee6:	d105      	bne.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002ee8:	4b13      	ldr	r3, [pc, #76]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	4a12      	ldr	r2, [pc, #72]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002eee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ef2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d015      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002f00:	4b0d      	ldr	r3, [pc, #52]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002f02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f0e:	490a      	ldr	r1, [pc, #40]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f1a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f1e:	d105      	bne.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f20:	4b05      	ldr	r3, [pc, #20]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	4a04      	ldr	r2, [pc, #16]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002f26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f2a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002f2c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3718      	adds	r7, #24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	40021000 	.word	0x40021000

08002f3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e049      	b.n	8002fe2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d106      	bne.n	8002f68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 f841 	bl	8002fea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	3304      	adds	r3, #4
 8002f78:	4619      	mov	r1, r3
 8002f7a:	4610      	mov	r0, r2
 8002f7c:	f000 fa28 	bl	80033d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2201      	movs	r2, #1
 8002fac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2201      	movs	r2, #1
 8002fc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002fea:	b480      	push	{r7}
 8002fec:	b083      	sub	sp, #12
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002ff2:	bf00      	nop
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
	...

08003000 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003000:	b480      	push	{r7}
 8003002:	b085      	sub	sp, #20
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b01      	cmp	r3, #1
 8003012:	d001      	beq.n	8003018 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e04f      	b.n	80030b8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2202      	movs	r2, #2
 800301c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68da      	ldr	r2, [r3, #12]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f042 0201 	orr.w	r2, r2, #1
 800302e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a23      	ldr	r2, [pc, #140]	; (80030c4 <HAL_TIM_Base_Start_IT+0xc4>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d01d      	beq.n	8003076 <HAL_TIM_Base_Start_IT+0x76>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003042:	d018      	beq.n	8003076 <HAL_TIM_Base_Start_IT+0x76>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a1f      	ldr	r2, [pc, #124]	; (80030c8 <HAL_TIM_Base_Start_IT+0xc8>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d013      	beq.n	8003076 <HAL_TIM_Base_Start_IT+0x76>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a1e      	ldr	r2, [pc, #120]	; (80030cc <HAL_TIM_Base_Start_IT+0xcc>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d00e      	beq.n	8003076 <HAL_TIM_Base_Start_IT+0x76>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a1c      	ldr	r2, [pc, #112]	; (80030d0 <HAL_TIM_Base_Start_IT+0xd0>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d009      	beq.n	8003076 <HAL_TIM_Base_Start_IT+0x76>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a1b      	ldr	r2, [pc, #108]	; (80030d4 <HAL_TIM_Base_Start_IT+0xd4>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d004      	beq.n	8003076 <HAL_TIM_Base_Start_IT+0x76>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a19      	ldr	r2, [pc, #100]	; (80030d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d115      	bne.n	80030a2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	689a      	ldr	r2, [r3, #8]
 800307c:	4b17      	ldr	r3, [pc, #92]	; (80030dc <HAL_TIM_Base_Start_IT+0xdc>)
 800307e:	4013      	ands	r3, r2
 8003080:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2b06      	cmp	r3, #6
 8003086:	d015      	beq.n	80030b4 <HAL_TIM_Base_Start_IT+0xb4>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800308e:	d011      	beq.n	80030b4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f042 0201 	orr.w	r2, r2, #1
 800309e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030a0:	e008      	b.n	80030b4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f042 0201 	orr.w	r2, r2, #1
 80030b0:	601a      	str	r2, [r3, #0]
 80030b2:	e000      	b.n	80030b6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030b4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3714      	adds	r7, #20
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr
 80030c4:	40012c00 	.word	0x40012c00
 80030c8:	40000400 	.word	0x40000400
 80030cc:	40000800 	.word	0x40000800
 80030d0:	40013400 	.word	0x40013400
 80030d4:	40014000 	.word	0x40014000
 80030d8:	40015000 	.word	0x40015000
 80030dc:	00010007 	.word	0x00010007

080030e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	68db      	ldr	r3, [r3, #12]
 80030ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	f003 0302 	and.w	r3, r3, #2
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d020      	beq.n	8003144 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b00      	cmp	r3, #0
 800310a:	d01b      	beq.n	8003144 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f06f 0202 	mvn.w	r2, #2
 8003114:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	f003 0303 	and.w	r3, r3, #3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d003      	beq.n	8003132 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 f931 	bl	8003392 <HAL_TIM_IC_CaptureCallback>
 8003130:	e005      	b.n	800313e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 f923 	bl	800337e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 f934 	bl	80033a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	f003 0304 	and.w	r3, r3, #4
 800314a:	2b00      	cmp	r3, #0
 800314c:	d020      	beq.n	8003190 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	2b00      	cmp	r3, #0
 8003156:	d01b      	beq.n	8003190 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f06f 0204 	mvn.w	r2, #4
 8003160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2202      	movs	r2, #2
 8003166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003172:	2b00      	cmp	r3, #0
 8003174:	d003      	beq.n	800317e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 f90b 	bl	8003392 <HAL_TIM_IC_CaptureCallback>
 800317c:	e005      	b.n	800318a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 f8fd 	bl	800337e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f000 f90e 	bl	80033a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	f003 0308 	and.w	r3, r3, #8
 8003196:	2b00      	cmp	r3, #0
 8003198:	d020      	beq.n	80031dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f003 0308 	and.w	r3, r3, #8
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d01b      	beq.n	80031dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f06f 0208 	mvn.w	r2, #8
 80031ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2204      	movs	r2, #4
 80031b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	69db      	ldr	r3, [r3, #28]
 80031ba:	f003 0303 	and.w	r3, r3, #3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d003      	beq.n	80031ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f8e5 	bl	8003392 <HAL_TIM_IC_CaptureCallback>
 80031c8:	e005      	b.n	80031d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 f8d7 	bl	800337e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031d0:	6878      	ldr	r0, [r7, #4]
 80031d2:	f000 f8e8 	bl	80033a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	f003 0310 	and.w	r3, r3, #16
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d020      	beq.n	8003228 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f003 0310 	and.w	r3, r3, #16
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d01b      	beq.n	8003228 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f06f 0210 	mvn.w	r2, #16
 80031f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2208      	movs	r2, #8
 80031fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800320a:	2b00      	cmp	r3, #0
 800320c:	d003      	beq.n	8003216 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 f8bf 	bl	8003392 <HAL_TIM_IC_CaptureCallback>
 8003214:	e005      	b.n	8003222 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 f8b1 	bl	800337e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 f8c2 	bl	80033a6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	f003 0301 	and.w	r3, r3, #1
 800322e:	2b00      	cmp	r3, #0
 8003230:	d00c      	beq.n	800324c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f003 0301 	and.w	r3, r3, #1
 8003238:	2b00      	cmp	r3, #0
 800323a:	d007      	beq.n	800324c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f06f 0201 	mvn.w	r2, #1
 8003244:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7fd fc42 	bl	8000ad0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800324c:	68bb      	ldr	r3, [r7, #8]
 800324e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003252:	2b00      	cmp	r3, #0
 8003254:	d104      	bne.n	8003260 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800325c:	2b00      	cmp	r3, #0
 800325e:	d00c      	beq.n	800327a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003266:	2b00      	cmp	r3, #0
 8003268:	d007      	beq.n	800327a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8003272:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	f000 f95f 	bl	8003538 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003280:	2b00      	cmp	r3, #0
 8003282:	d00c      	beq.n	800329e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800328a:	2b00      	cmp	r3, #0
 800328c:	d007      	beq.n	800329e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003296:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003298:	6878      	ldr	r0, [r7, #4]
 800329a:	f000 f957 	bl	800354c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800329e:	68bb      	ldr	r3, [r7, #8]
 80032a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d00c      	beq.n	80032c2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d007      	beq.n	80032c2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f000 f87c 	bl	80033ba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	f003 0320 	and.w	r3, r3, #32
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00c      	beq.n	80032e6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	f003 0320 	and.w	r3, r3, #32
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d007      	beq.n	80032e6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f06f 0220 	mvn.w	r2, #32
 80032de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 f91f 	bl	8003524 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00c      	beq.n	800330a <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d007      	beq.n	800330a <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8003302:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 f92b 	bl	8003560 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d00c      	beq.n	800332e <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d007      	beq.n	800332e <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8003326:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f000 f923 	bl	8003574 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003334:	2b00      	cmp	r3, #0
 8003336:	d00c      	beq.n	8003352 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d007      	beq.n	8003352 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800334a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f000 f91b 	bl	8003588 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d00c      	beq.n	8003376 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003362:	2b00      	cmp	r3, #0
 8003364:	d007      	beq.n	8003376 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800336e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f000 f913 	bl	800359c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003376:	bf00      	nop
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800337e:	b480      	push	{r7}
 8003380:	b083      	sub	sp, #12
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003386:	bf00      	nop
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr

08003392 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003392:	b480      	push	{r7}
 8003394:	b083      	sub	sp, #12
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800339a:	bf00      	nop
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr

080033a6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80033a6:	b480      	push	{r7}
 80033a8:	b083      	sub	sp, #12
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80033ae:	bf00      	nop
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr

080033ba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80033ba:	b480      	push	{r7}
 80033bc:	b083      	sub	sp, #12
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80033c2:	bf00      	nop
 80033c4:	370c      	adds	r7, #12
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
	...

080033d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b085      	sub	sp, #20
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a48      	ldr	r2, [pc, #288]	; (8003504 <TIM_Base_SetConfig+0x134>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d013      	beq.n	8003410 <TIM_Base_SetConfig+0x40>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033ee:	d00f      	beq.n	8003410 <TIM_Base_SetConfig+0x40>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	4a45      	ldr	r2, [pc, #276]	; (8003508 <TIM_Base_SetConfig+0x138>)
 80033f4:	4293      	cmp	r3, r2
 80033f6:	d00b      	beq.n	8003410 <TIM_Base_SetConfig+0x40>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	4a44      	ldr	r2, [pc, #272]	; (800350c <TIM_Base_SetConfig+0x13c>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d007      	beq.n	8003410 <TIM_Base_SetConfig+0x40>
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a43      	ldr	r2, [pc, #268]	; (8003510 <TIM_Base_SetConfig+0x140>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d003      	beq.n	8003410 <TIM_Base_SetConfig+0x40>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	4a42      	ldr	r2, [pc, #264]	; (8003514 <TIM_Base_SetConfig+0x144>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d108      	bne.n	8003422 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003416:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	68fa      	ldr	r2, [r7, #12]
 800341e:	4313      	orrs	r3, r2
 8003420:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	4a37      	ldr	r2, [pc, #220]	; (8003504 <TIM_Base_SetConfig+0x134>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d01f      	beq.n	800346a <TIM_Base_SetConfig+0x9a>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003430:	d01b      	beq.n	800346a <TIM_Base_SetConfig+0x9a>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	4a34      	ldr	r2, [pc, #208]	; (8003508 <TIM_Base_SetConfig+0x138>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d017      	beq.n	800346a <TIM_Base_SetConfig+0x9a>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a33      	ldr	r2, [pc, #204]	; (800350c <TIM_Base_SetConfig+0x13c>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d013      	beq.n	800346a <TIM_Base_SetConfig+0x9a>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a32      	ldr	r2, [pc, #200]	; (8003510 <TIM_Base_SetConfig+0x140>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d00f      	beq.n	800346a <TIM_Base_SetConfig+0x9a>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a32      	ldr	r2, [pc, #200]	; (8003518 <TIM_Base_SetConfig+0x148>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d00b      	beq.n	800346a <TIM_Base_SetConfig+0x9a>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a31      	ldr	r2, [pc, #196]	; (800351c <TIM_Base_SetConfig+0x14c>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d007      	beq.n	800346a <TIM_Base_SetConfig+0x9a>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a30      	ldr	r2, [pc, #192]	; (8003520 <TIM_Base_SetConfig+0x150>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d003      	beq.n	800346a <TIM_Base_SetConfig+0x9a>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a2b      	ldr	r2, [pc, #172]	; (8003514 <TIM_Base_SetConfig+0x144>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d108      	bne.n	800347c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003470:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	68db      	ldr	r3, [r3, #12]
 8003476:	68fa      	ldr	r2, [r7, #12]
 8003478:	4313      	orrs	r3, r2
 800347a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	4313      	orrs	r3, r2
 8003488:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	689a      	ldr	r2, [r3, #8]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a18      	ldr	r2, [pc, #96]	; (8003504 <TIM_Base_SetConfig+0x134>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d013      	beq.n	80034d0 <TIM_Base_SetConfig+0x100>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a19      	ldr	r2, [pc, #100]	; (8003510 <TIM_Base_SetConfig+0x140>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d00f      	beq.n	80034d0 <TIM_Base_SetConfig+0x100>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a19      	ldr	r2, [pc, #100]	; (8003518 <TIM_Base_SetConfig+0x148>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d00b      	beq.n	80034d0 <TIM_Base_SetConfig+0x100>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a18      	ldr	r2, [pc, #96]	; (800351c <TIM_Base_SetConfig+0x14c>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d007      	beq.n	80034d0 <TIM_Base_SetConfig+0x100>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	4a17      	ldr	r2, [pc, #92]	; (8003520 <TIM_Base_SetConfig+0x150>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d003      	beq.n	80034d0 <TIM_Base_SetConfig+0x100>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	4a12      	ldr	r2, [pc, #72]	; (8003514 <TIM_Base_SetConfig+0x144>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d103      	bne.n	80034d8 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	691a      	ldr	r2, [r3, #16]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d105      	bne.n	80034f6 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	691b      	ldr	r3, [r3, #16]
 80034ee:	f023 0201 	bic.w	r2, r3, #1
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	611a      	str	r2, [r3, #16]
  }
}
 80034f6:	bf00      	nop
 80034f8:	3714      	adds	r7, #20
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
 8003502:	bf00      	nop
 8003504:	40012c00 	.word	0x40012c00
 8003508:	40000400 	.word	0x40000400
 800350c:	40000800 	.word	0x40000800
 8003510:	40013400 	.word	0x40013400
 8003514:	40015000 	.word	0x40015000
 8003518:	40014000 	.word	0x40014000
 800351c:	40014400 	.word	0x40014400
 8003520:	40014800 	.word	0x40014800

08003524 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800352c:	bf00      	nop
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr

08003538 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003538:	b480      	push	{r7}
 800353a:	b083      	sub	sp, #12
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003540:	bf00      	nop
 8003542:	370c      	adds	r7, #12
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr

0800354c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800354c:	b480      	push	{r7}
 800354e:	b083      	sub	sp, #12
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003554:	bf00      	nop
 8003556:	370c      	adds	r7, #12
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr

08003560 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003560:	b480      	push	{r7}
 8003562:	b083      	sub	sp, #12
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003568:	bf00      	nop
 800356a:	370c      	adds	r7, #12
 800356c:	46bd      	mov	sp, r7
 800356e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003572:	4770      	bx	lr

08003574 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003574:	b480      	push	{r7}
 8003576:	b083      	sub	sp, #12
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800357c:	bf00      	nop
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003590:	bf00      	nop
 8003592:	370c      	adds	r7, #12
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ae:	4770      	bx	lr

080035b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b082      	sub	sp, #8
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d101      	bne.n	80035c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e042      	b.n	8003648 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d106      	bne.n	80035da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f7fd fabd 	bl	8000b54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2224      	movs	r2, #36	; 0x24
 80035de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f022 0201 	bic.w	r2, r2, #1
 80035f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d002      	beq.n	8003600 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 fed2 	bl	80043a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f000 fbd3 	bl	8003dac <UART_SetConfig>
 8003606:	4603      	mov	r3, r0
 8003608:	2b01      	cmp	r3, #1
 800360a:	d101      	bne.n	8003610 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e01b      	b.n	8003648 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	685a      	ldr	r2, [r3, #4]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800361e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	689a      	ldr	r2, [r3, #8]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800362e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f042 0201 	orr.w	r2, r2, #1
 800363e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 ff51 	bl	80044e8 <UART_CheckIdleState>
 8003646:	4603      	mov	r3, r0
}
 8003648:	4618      	mov	r0, r3
 800364a:	3708      	adds	r7, #8
 800364c:	46bd      	mov	sp, r7
 800364e:	bd80      	pop	{r7, pc}

08003650 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b08a      	sub	sp, #40	; 0x28
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	4613      	mov	r3, r2
 800365c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003664:	2b20      	cmp	r3, #32
 8003666:	d167      	bne.n	8003738 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003668:	68bb      	ldr	r3, [r7, #8]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d002      	beq.n	8003674 <HAL_UART_Transmit_DMA+0x24>
 800366e:	88fb      	ldrh	r3, [r7, #6]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d101      	bne.n	8003678 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e060      	b.n	800373a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	68ba      	ldr	r2, [r7, #8]
 800367c:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	88fa      	ldrh	r2, [r7, #6]
 8003682:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	88fa      	ldrh	r2, [r7, #6]
 800368a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2221      	movs	r2, #33	; 0x21
 800369a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d028      	beq.n	80036f8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036aa:	4a26      	ldr	r2, [pc, #152]	; (8003744 <HAL_UART_Transmit_DMA+0xf4>)
 80036ac:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036b2:	4a25      	ldr	r2, [pc, #148]	; (8003748 <HAL_UART_Transmit_DMA+0xf8>)
 80036b4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036ba:	4a24      	ldr	r2, [pc, #144]	; (800374c <HAL_UART_Transmit_DMA+0xfc>)
 80036bc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036c2:	2200      	movs	r2, #0
 80036c4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ce:	4619      	mov	r1, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	3328      	adds	r3, #40	; 0x28
 80036d6:	461a      	mov	r2, r3
 80036d8:	88fb      	ldrh	r3, [r7, #6]
 80036da:	f7fd ff97 	bl	800160c <HAL_DMA_Start_IT>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d009      	beq.n	80036f8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2210      	movs	r2, #16
 80036e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2220      	movs	r2, #32
 80036f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	e020      	b.n	800373a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2240      	movs	r2, #64	; 0x40
 80036fe:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	3308      	adds	r3, #8
 8003706:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	e853 3f00 	ldrex	r3, [r3]
 800370e:	613b      	str	r3, [r7, #16]
   return(result);
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003716:	627b      	str	r3, [r7, #36]	; 0x24
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	3308      	adds	r3, #8
 800371e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003720:	623a      	str	r2, [r7, #32]
 8003722:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003724:	69f9      	ldr	r1, [r7, #28]
 8003726:	6a3a      	ldr	r2, [r7, #32]
 8003728:	e841 2300 	strex	r3, r2, [r1]
 800372c:	61bb      	str	r3, [r7, #24]
   return(result);
 800372e:	69bb      	ldr	r3, [r7, #24]
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1e5      	bne.n	8003700 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8003734:	2300      	movs	r3, #0
 8003736:	e000      	b.n	800373a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8003738:	2302      	movs	r3, #2
  }
}
 800373a:	4618      	mov	r0, r3
 800373c:	3728      	adds	r7, #40	; 0x28
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	08004865 	.word	0x08004865
 8003748:	080048ff 	.word	0x080048ff
 800374c:	0800491b 	.word	0x0800491b

08003750 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b0ba      	sub	sp, #232	; 0xe8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	69db      	ldr	r3, [r3, #28]
 800375e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003776:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800377a:	f640 030f 	movw	r3, #2063	; 0x80f
 800377e:	4013      	ands	r3, r2
 8003780:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003784:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003788:	2b00      	cmp	r3, #0
 800378a:	d11b      	bne.n	80037c4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800378c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003790:	f003 0320 	and.w	r3, r3, #32
 8003794:	2b00      	cmp	r3, #0
 8003796:	d015      	beq.n	80037c4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003798:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800379c:	f003 0320 	and.w	r3, r3, #32
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d105      	bne.n	80037b0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80037a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d009      	beq.n	80037c4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	f000 82e3 	beq.w	8003d80 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	4798      	blx	r3
      }
      return;
 80037c2:	e2dd      	b.n	8003d80 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80037c4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f000 8123 	beq.w	8003a14 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80037ce:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80037d2:	4b8d      	ldr	r3, [pc, #564]	; (8003a08 <HAL_UART_IRQHandler+0x2b8>)
 80037d4:	4013      	ands	r3, r2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d106      	bne.n	80037e8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80037da:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80037de:	4b8b      	ldr	r3, [pc, #556]	; (8003a0c <HAL_UART_IRQHandler+0x2bc>)
 80037e0:	4013      	ands	r3, r2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	f000 8116 	beq.w	8003a14 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80037e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037ec:	f003 0301 	and.w	r3, r3, #1
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d011      	beq.n	8003818 <HAL_UART_IRQHandler+0xc8>
 80037f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d00b      	beq.n	8003818 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2201      	movs	r2, #1
 8003806:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800380e:	f043 0201 	orr.w	r2, r3, #1
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d011      	beq.n	8003848 <HAL_UART_IRQHandler+0xf8>
 8003824:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	2b00      	cmp	r3, #0
 800382e:	d00b      	beq.n	8003848 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2202      	movs	r2, #2
 8003836:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800383e:	f043 0204 	orr.w	r2, r3, #4
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800384c:	f003 0304 	and.w	r3, r3, #4
 8003850:	2b00      	cmp	r3, #0
 8003852:	d011      	beq.n	8003878 <HAL_UART_IRQHandler+0x128>
 8003854:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	2b00      	cmp	r3, #0
 800385e:	d00b      	beq.n	8003878 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2204      	movs	r2, #4
 8003866:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800386e:	f043 0202 	orr.w	r2, r3, #2
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800387c:	f003 0308 	and.w	r3, r3, #8
 8003880:	2b00      	cmp	r3, #0
 8003882:	d017      	beq.n	80038b4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003888:	f003 0320 	and.w	r3, r3, #32
 800388c:	2b00      	cmp	r3, #0
 800388e:	d105      	bne.n	800389c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003890:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003894:	4b5c      	ldr	r3, [pc, #368]	; (8003a08 <HAL_UART_IRQHandler+0x2b8>)
 8003896:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00b      	beq.n	80038b4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2208      	movs	r2, #8
 80038a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038aa:	f043 0208 	orr.w	r2, r3, #8
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80038b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d012      	beq.n	80038e6 <HAL_UART_IRQHandler+0x196>
 80038c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80038c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d00c      	beq.n	80038e6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038d4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038dc:	f043 0220 	orr.w	r2, r3, #32
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f000 8249 	beq.w	8003d84 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80038f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80038f6:	f003 0320 	and.w	r3, r3, #32
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d013      	beq.n	8003926 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80038fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003902:	f003 0320 	and.w	r3, r3, #32
 8003906:	2b00      	cmp	r3, #0
 8003908:	d105      	bne.n	8003916 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800390a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800390e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d007      	beq.n	8003926 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800391a:	2b00      	cmp	r3, #0
 800391c:	d003      	beq.n	8003926 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800392c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	689b      	ldr	r3, [r3, #8]
 8003936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800393a:	2b40      	cmp	r3, #64	; 0x40
 800393c:	d005      	beq.n	800394a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800393e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003942:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003946:	2b00      	cmp	r3, #0
 8003948:	d054      	beq.n	80039f4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f000 ff24 	bl	8004798 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800395a:	2b40      	cmp	r3, #64	; 0x40
 800395c:	d146      	bne.n	80039ec <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	3308      	adds	r3, #8
 8003964:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003968:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800396c:	e853 3f00 	ldrex	r3, [r3]
 8003970:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003974:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003978:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800397c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	3308      	adds	r3, #8
 8003986:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800398a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800398e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003992:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003996:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800399a:	e841 2300 	strex	r3, r2, [r1]
 800399e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80039a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d1d9      	bne.n	800395e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d017      	beq.n	80039e4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039ba:	4a15      	ldr	r2, [pc, #84]	; (8003a10 <HAL_UART_IRQHandler+0x2c0>)
 80039bc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039c4:	4618      	mov	r0, r3
 80039c6:	f7fd fef5 	bl	80017b4 <HAL_DMA_Abort_IT>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d019      	beq.n	8003a04 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80039d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d8:	687a      	ldr	r2, [r7, #4]
 80039da:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 80039de:	4610      	mov	r0, r2
 80039e0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039e2:	e00f      	b.n	8003a04 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f002 fc4b 	bl	8006280 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039ea:	e00b      	b.n	8003a04 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f002 fc47 	bl	8006280 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80039f2:	e007      	b.n	8003a04 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f002 fc43 	bl	8006280 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8003a02:	e1bf      	b.n	8003d84 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a04:	bf00      	nop
    return;
 8003a06:	e1bd      	b.n	8003d84 <HAL_UART_IRQHandler+0x634>
 8003a08:	10000001 	.word	0x10000001
 8003a0c:	04000120 	.word	0x04000120
 8003a10:	0800499b 	.word	0x0800499b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a18:	2b01      	cmp	r3, #1
 8003a1a:	f040 8153 	bne.w	8003cc4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003a1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a22:	f003 0310 	and.w	r3, r3, #16
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	f000 814c 	beq.w	8003cc4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003a2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a30:	f003 0310 	and.w	r3, r3, #16
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f000 8145 	beq.w	8003cc4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2210      	movs	r2, #16
 8003a40:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a4c:	2b40      	cmp	r3, #64	; 0x40
 8003a4e:	f040 80bb 	bne.w	8003bc8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003a60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	f000 818f 	beq.w	8003d88 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003a70:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a74:	429a      	cmp	r2, r3
 8003a76:	f080 8187 	bcs.w	8003d88 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003a80:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0320 	and.w	r3, r3, #32
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	f040 8087 	bne.w	8003ba6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aa0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003aa4:	e853 3f00 	ldrex	r3, [r3]
 8003aa8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003aac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003ab0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ab4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	461a      	mov	r2, r3
 8003abe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003ac2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003ac6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003ace:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003ad2:	e841 2300 	strex	r3, r2, [r1]
 8003ad6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003ada:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1da      	bne.n	8003a98 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	3308      	adds	r3, #8
 8003ae8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003aec:	e853 3f00 	ldrex	r3, [r3]
 8003af0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003af2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003af4:	f023 0301 	bic.w	r3, r3, #1
 8003af8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	3308      	adds	r3, #8
 8003b02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b06:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003b0a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b0c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003b0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003b12:	e841 2300 	strex	r3, r2, [r1]
 8003b16:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003b18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d1e1      	bne.n	8003ae2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	3308      	adds	r3, #8
 8003b24:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b28:	e853 3f00 	ldrex	r3, [r3]
 8003b2c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003b2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	3308      	adds	r3, #8
 8003b3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003b42:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b44:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b46:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003b48:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003b4a:	e841 2300 	strex	r3, r2, [r1]
 8003b4e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003b50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d1e3      	bne.n	8003b1e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2220      	movs	r2, #32
 8003b5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b6c:	e853 3f00 	ldrex	r3, [r3]
 8003b70:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003b72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b74:	f023 0310 	bic.w	r3, r3, #16
 8003b78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	461a      	mov	r2, r3
 8003b82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b86:	65bb      	str	r3, [r7, #88]	; 0x58
 8003b88:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003b8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003b8e:	e841 2300 	strex	r3, r2, [r1]
 8003b92:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003b94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d1e4      	bne.n	8003b64 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ba0:	4618      	mov	r0, r3
 8003ba2:	f7fd fdae 	bl	8001702 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2202      	movs	r2, #2
 8003baa:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003bb8:	b29b      	uxth	r3, r3
 8003bba:	1ad3      	subs	r3, r2, r3
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f002 fb49 	bl	8006258 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003bc6:	e0df      	b.n	8003d88 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	1ad3      	subs	r3, r2, r3
 8003bd8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	f000 80d1 	beq.w	8003d8c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8003bea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f000 80cc 	beq.w	8003d8c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bfc:	e853 3f00 	ldrex	r3, [r3]
 8003c00:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003c08:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	461a      	mov	r2, r3
 8003c12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003c16:	647b      	str	r3, [r7, #68]	; 0x44
 8003c18:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003c1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003c1e:	e841 2300 	strex	r3, r2, [r1]
 8003c22:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003c24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d1e4      	bne.n	8003bf4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	3308      	adds	r3, #8
 8003c30:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c34:	e853 3f00 	ldrex	r3, [r3]
 8003c38:	623b      	str	r3, [r7, #32]
   return(result);
 8003c3a:	6a3b      	ldr	r3, [r7, #32]
 8003c3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c40:	f023 0301 	bic.w	r3, r3, #1
 8003c44:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	3308      	adds	r3, #8
 8003c4e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003c52:	633a      	str	r2, [r7, #48]	; 0x30
 8003c54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c5a:	e841 2300 	strex	r3, r2, [r1]
 8003c5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d1e1      	bne.n	8003c2a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2220      	movs	r2, #32
 8003c6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2200      	movs	r2, #0
 8003c78:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	e853 3f00 	ldrex	r3, [r3]
 8003c86:	60fb      	str	r3, [r7, #12]
   return(result);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f023 0310 	bic.w	r3, r3, #16
 8003c8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	461a      	mov	r2, r3
 8003c98:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003c9c:	61fb      	str	r3, [r7, #28]
 8003c9e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca0:	69b9      	ldr	r1, [r7, #24]
 8003ca2:	69fa      	ldr	r2, [r7, #28]
 8003ca4:	e841 2300 	strex	r3, r2, [r1]
 8003ca8:	617b      	str	r3, [r7, #20]
   return(result);
 8003caa:	697b      	ldr	r3, [r7, #20]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1e4      	bne.n	8003c7a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003cb6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003cba:	4619      	mov	r1, r3
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f002 facb 	bl	8006258 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003cc2:	e063      	b.n	8003d8c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003cc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00e      	beq.n	8003cee <HAL_UART_IRQHandler+0x59e>
 8003cd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cd4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d008      	beq.n	8003cee <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003ce4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 fe98 	bl	8004a1c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003cec:	e051      	b.n	8003d92 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003cee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d014      	beq.n	8003d24 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003cfa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d105      	bne.n	8003d12 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003d06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d008      	beq.n	8003d24 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d03a      	beq.n	8003d90 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	4798      	blx	r3
    }
    return;
 8003d22:	e035      	b.n	8003d90 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003d24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d009      	beq.n	8003d44 <HAL_UART_IRQHandler+0x5f4>
 8003d30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d003      	beq.n	8003d44 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f000 fe42 	bl	80049c6 <UART_EndTransmit_IT>
    return;
 8003d42:	e026      	b.n	8003d92 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003d44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d009      	beq.n	8003d64 <HAL_UART_IRQHandler+0x614>
 8003d50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d54:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d003      	beq.n	8003d64 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f000 fe67 	bl	8004a30 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003d62:	e016      	b.n	8003d92 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003d64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d010      	beq.n	8003d92 <HAL_UART_IRQHandler+0x642>
 8003d70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	da0c      	bge.n	8003d92 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f002 fa5b 	bl	8006234 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003d7e:	e008      	b.n	8003d92 <HAL_UART_IRQHandler+0x642>
      return;
 8003d80:	bf00      	nop
 8003d82:	e006      	b.n	8003d92 <HAL_UART_IRQHandler+0x642>
    return;
 8003d84:	bf00      	nop
 8003d86:	e004      	b.n	8003d92 <HAL_UART_IRQHandler+0x642>
      return;
 8003d88:	bf00      	nop
 8003d8a:	e002      	b.n	8003d92 <HAL_UART_IRQHandler+0x642>
      return;
 8003d8c:	bf00      	nop
 8003d8e:	e000      	b.n	8003d92 <HAL_UART_IRQHandler+0x642>
    return;
 8003d90:	bf00      	nop
  }
}
 8003d92:	37e8      	adds	r7, #232	; 0xe8
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b083      	sub	sp, #12
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8003da0:	bf00      	nop
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003dac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003db0:	b08c      	sub	sp, #48	; 0x30
 8003db2:	af00      	add	r7, sp, #0
 8003db4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003db6:	2300      	movs	r3, #0
 8003db8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	689a      	ldr	r2, [r3, #8]
 8003dc0:	697b      	ldr	r3, [r7, #20]
 8003dc2:	691b      	ldr	r3, [r3, #16]
 8003dc4:	431a      	orrs	r2, r3
 8003dc6:	697b      	ldr	r3, [r7, #20]
 8003dc8:	695b      	ldr	r3, [r3, #20]
 8003dca:	431a      	orrs	r2, r3
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	69db      	ldr	r3, [r3, #28]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	4baa      	ldr	r3, [pc, #680]	; (8004084 <UART_SetConfig+0x2d8>)
 8003ddc:	4013      	ands	r3, r2
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	6812      	ldr	r2, [r2, #0]
 8003de2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003de4:	430b      	orrs	r3, r1
 8003de6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	685b      	ldr	r3, [r3, #4]
 8003dee:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	68da      	ldr	r2, [r3, #12]
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e04:	697b      	ldr	r3, [r7, #20]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a9f      	ldr	r2, [pc, #636]	; (8004088 <UART_SetConfig+0x2dc>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d004      	beq.n	8003e18 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e14:	4313      	orrs	r3, r2
 8003e16:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e18:	697b      	ldr	r3, [r7, #20]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003e22:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	6812      	ldr	r2, [r2, #0]
 8003e2a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e2c:	430b      	orrs	r3, r1
 8003e2e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003e30:	697b      	ldr	r3, [r7, #20]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e36:	f023 010f 	bic.w	r1, r3, #15
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e3e:	697b      	ldr	r3, [r7, #20]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	430a      	orrs	r2, r1
 8003e44:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a90      	ldr	r2, [pc, #576]	; (800408c <UART_SetConfig+0x2e0>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d125      	bne.n	8003e9c <UART_SetConfig+0xf0>
 8003e50:	4b8f      	ldr	r3, [pc, #572]	; (8004090 <UART_SetConfig+0x2e4>)
 8003e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e56:	f003 0303 	and.w	r3, r3, #3
 8003e5a:	2b03      	cmp	r3, #3
 8003e5c:	d81a      	bhi.n	8003e94 <UART_SetConfig+0xe8>
 8003e5e:	a201      	add	r2, pc, #4	; (adr r2, 8003e64 <UART_SetConfig+0xb8>)
 8003e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e64:	08003e75 	.word	0x08003e75
 8003e68:	08003e85 	.word	0x08003e85
 8003e6c:	08003e7d 	.word	0x08003e7d
 8003e70:	08003e8d 	.word	0x08003e8d
 8003e74:	2301      	movs	r3, #1
 8003e76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e7a:	e116      	b.n	80040aa <UART_SetConfig+0x2fe>
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e82:	e112      	b.n	80040aa <UART_SetConfig+0x2fe>
 8003e84:	2304      	movs	r3, #4
 8003e86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e8a:	e10e      	b.n	80040aa <UART_SetConfig+0x2fe>
 8003e8c:	2308      	movs	r3, #8
 8003e8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e92:	e10a      	b.n	80040aa <UART_SetConfig+0x2fe>
 8003e94:	2310      	movs	r3, #16
 8003e96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e9a:	e106      	b.n	80040aa <UART_SetConfig+0x2fe>
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a7c      	ldr	r2, [pc, #496]	; (8004094 <UART_SetConfig+0x2e8>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d138      	bne.n	8003f18 <UART_SetConfig+0x16c>
 8003ea6:	4b7a      	ldr	r3, [pc, #488]	; (8004090 <UART_SetConfig+0x2e4>)
 8003ea8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eac:	f003 030c 	and.w	r3, r3, #12
 8003eb0:	2b0c      	cmp	r3, #12
 8003eb2:	d82d      	bhi.n	8003f10 <UART_SetConfig+0x164>
 8003eb4:	a201      	add	r2, pc, #4	; (adr r2, 8003ebc <UART_SetConfig+0x110>)
 8003eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eba:	bf00      	nop
 8003ebc:	08003ef1 	.word	0x08003ef1
 8003ec0:	08003f11 	.word	0x08003f11
 8003ec4:	08003f11 	.word	0x08003f11
 8003ec8:	08003f11 	.word	0x08003f11
 8003ecc:	08003f01 	.word	0x08003f01
 8003ed0:	08003f11 	.word	0x08003f11
 8003ed4:	08003f11 	.word	0x08003f11
 8003ed8:	08003f11 	.word	0x08003f11
 8003edc:	08003ef9 	.word	0x08003ef9
 8003ee0:	08003f11 	.word	0x08003f11
 8003ee4:	08003f11 	.word	0x08003f11
 8003ee8:	08003f11 	.word	0x08003f11
 8003eec:	08003f09 	.word	0x08003f09
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ef6:	e0d8      	b.n	80040aa <UART_SetConfig+0x2fe>
 8003ef8:	2302      	movs	r3, #2
 8003efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003efe:	e0d4      	b.n	80040aa <UART_SetConfig+0x2fe>
 8003f00:	2304      	movs	r3, #4
 8003f02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f06:	e0d0      	b.n	80040aa <UART_SetConfig+0x2fe>
 8003f08:	2308      	movs	r3, #8
 8003f0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f0e:	e0cc      	b.n	80040aa <UART_SetConfig+0x2fe>
 8003f10:	2310      	movs	r3, #16
 8003f12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f16:	e0c8      	b.n	80040aa <UART_SetConfig+0x2fe>
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4a5e      	ldr	r2, [pc, #376]	; (8004098 <UART_SetConfig+0x2ec>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d125      	bne.n	8003f6e <UART_SetConfig+0x1c2>
 8003f22:	4b5b      	ldr	r3, [pc, #364]	; (8004090 <UART_SetConfig+0x2e4>)
 8003f24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f28:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003f2c:	2b30      	cmp	r3, #48	; 0x30
 8003f2e:	d016      	beq.n	8003f5e <UART_SetConfig+0x1b2>
 8003f30:	2b30      	cmp	r3, #48	; 0x30
 8003f32:	d818      	bhi.n	8003f66 <UART_SetConfig+0x1ba>
 8003f34:	2b20      	cmp	r3, #32
 8003f36:	d00a      	beq.n	8003f4e <UART_SetConfig+0x1a2>
 8003f38:	2b20      	cmp	r3, #32
 8003f3a:	d814      	bhi.n	8003f66 <UART_SetConfig+0x1ba>
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d002      	beq.n	8003f46 <UART_SetConfig+0x19a>
 8003f40:	2b10      	cmp	r3, #16
 8003f42:	d008      	beq.n	8003f56 <UART_SetConfig+0x1aa>
 8003f44:	e00f      	b.n	8003f66 <UART_SetConfig+0x1ba>
 8003f46:	2300      	movs	r3, #0
 8003f48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f4c:	e0ad      	b.n	80040aa <UART_SetConfig+0x2fe>
 8003f4e:	2302      	movs	r3, #2
 8003f50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f54:	e0a9      	b.n	80040aa <UART_SetConfig+0x2fe>
 8003f56:	2304      	movs	r3, #4
 8003f58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f5c:	e0a5      	b.n	80040aa <UART_SetConfig+0x2fe>
 8003f5e:	2308      	movs	r3, #8
 8003f60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f64:	e0a1      	b.n	80040aa <UART_SetConfig+0x2fe>
 8003f66:	2310      	movs	r3, #16
 8003f68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003f6c:	e09d      	b.n	80040aa <UART_SetConfig+0x2fe>
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a4a      	ldr	r2, [pc, #296]	; (800409c <UART_SetConfig+0x2f0>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d125      	bne.n	8003fc4 <UART_SetConfig+0x218>
 8003f78:	4b45      	ldr	r3, [pc, #276]	; (8004090 <UART_SetConfig+0x2e4>)
 8003f7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f7e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003f82:	2bc0      	cmp	r3, #192	; 0xc0
 8003f84:	d016      	beq.n	8003fb4 <UART_SetConfig+0x208>
 8003f86:	2bc0      	cmp	r3, #192	; 0xc0
 8003f88:	d818      	bhi.n	8003fbc <UART_SetConfig+0x210>
 8003f8a:	2b80      	cmp	r3, #128	; 0x80
 8003f8c:	d00a      	beq.n	8003fa4 <UART_SetConfig+0x1f8>
 8003f8e:	2b80      	cmp	r3, #128	; 0x80
 8003f90:	d814      	bhi.n	8003fbc <UART_SetConfig+0x210>
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d002      	beq.n	8003f9c <UART_SetConfig+0x1f0>
 8003f96:	2b40      	cmp	r3, #64	; 0x40
 8003f98:	d008      	beq.n	8003fac <UART_SetConfig+0x200>
 8003f9a:	e00f      	b.n	8003fbc <UART_SetConfig+0x210>
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fa2:	e082      	b.n	80040aa <UART_SetConfig+0x2fe>
 8003fa4:	2302      	movs	r3, #2
 8003fa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003faa:	e07e      	b.n	80040aa <UART_SetConfig+0x2fe>
 8003fac:	2304      	movs	r3, #4
 8003fae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fb2:	e07a      	b.n	80040aa <UART_SetConfig+0x2fe>
 8003fb4:	2308      	movs	r3, #8
 8003fb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fba:	e076      	b.n	80040aa <UART_SetConfig+0x2fe>
 8003fbc:	2310      	movs	r3, #16
 8003fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003fc2:	e072      	b.n	80040aa <UART_SetConfig+0x2fe>
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a35      	ldr	r2, [pc, #212]	; (80040a0 <UART_SetConfig+0x2f4>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d12a      	bne.n	8004024 <UART_SetConfig+0x278>
 8003fce:	4b30      	ldr	r3, [pc, #192]	; (8004090 <UART_SetConfig+0x2e4>)
 8003fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fd8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fdc:	d01a      	beq.n	8004014 <UART_SetConfig+0x268>
 8003fde:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003fe2:	d81b      	bhi.n	800401c <UART_SetConfig+0x270>
 8003fe4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fe8:	d00c      	beq.n	8004004 <UART_SetConfig+0x258>
 8003fea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fee:	d815      	bhi.n	800401c <UART_SetConfig+0x270>
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d003      	beq.n	8003ffc <UART_SetConfig+0x250>
 8003ff4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ff8:	d008      	beq.n	800400c <UART_SetConfig+0x260>
 8003ffa:	e00f      	b.n	800401c <UART_SetConfig+0x270>
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004002:	e052      	b.n	80040aa <UART_SetConfig+0x2fe>
 8004004:	2302      	movs	r3, #2
 8004006:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800400a:	e04e      	b.n	80040aa <UART_SetConfig+0x2fe>
 800400c:	2304      	movs	r3, #4
 800400e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004012:	e04a      	b.n	80040aa <UART_SetConfig+0x2fe>
 8004014:	2308      	movs	r3, #8
 8004016:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800401a:	e046      	b.n	80040aa <UART_SetConfig+0x2fe>
 800401c:	2310      	movs	r3, #16
 800401e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004022:	e042      	b.n	80040aa <UART_SetConfig+0x2fe>
 8004024:	697b      	ldr	r3, [r7, #20]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a17      	ldr	r2, [pc, #92]	; (8004088 <UART_SetConfig+0x2dc>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d13a      	bne.n	80040a4 <UART_SetConfig+0x2f8>
 800402e:	4b18      	ldr	r3, [pc, #96]	; (8004090 <UART_SetConfig+0x2e4>)
 8004030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004034:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004038:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800403c:	d01a      	beq.n	8004074 <UART_SetConfig+0x2c8>
 800403e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004042:	d81b      	bhi.n	800407c <UART_SetConfig+0x2d0>
 8004044:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004048:	d00c      	beq.n	8004064 <UART_SetConfig+0x2b8>
 800404a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800404e:	d815      	bhi.n	800407c <UART_SetConfig+0x2d0>
 8004050:	2b00      	cmp	r3, #0
 8004052:	d003      	beq.n	800405c <UART_SetConfig+0x2b0>
 8004054:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004058:	d008      	beq.n	800406c <UART_SetConfig+0x2c0>
 800405a:	e00f      	b.n	800407c <UART_SetConfig+0x2d0>
 800405c:	2300      	movs	r3, #0
 800405e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004062:	e022      	b.n	80040aa <UART_SetConfig+0x2fe>
 8004064:	2302      	movs	r3, #2
 8004066:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800406a:	e01e      	b.n	80040aa <UART_SetConfig+0x2fe>
 800406c:	2304      	movs	r3, #4
 800406e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004072:	e01a      	b.n	80040aa <UART_SetConfig+0x2fe>
 8004074:	2308      	movs	r3, #8
 8004076:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800407a:	e016      	b.n	80040aa <UART_SetConfig+0x2fe>
 800407c:	2310      	movs	r3, #16
 800407e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004082:	e012      	b.n	80040aa <UART_SetConfig+0x2fe>
 8004084:	cfff69f3 	.word	0xcfff69f3
 8004088:	40008000 	.word	0x40008000
 800408c:	40013800 	.word	0x40013800
 8004090:	40021000 	.word	0x40021000
 8004094:	40004400 	.word	0x40004400
 8004098:	40004800 	.word	0x40004800
 800409c:	40004c00 	.word	0x40004c00
 80040a0:	40005000 	.word	0x40005000
 80040a4:	2310      	movs	r3, #16
 80040a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4aae      	ldr	r2, [pc, #696]	; (8004368 <UART_SetConfig+0x5bc>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	f040 8097 	bne.w	80041e4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80040b6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80040ba:	2b08      	cmp	r3, #8
 80040bc:	d823      	bhi.n	8004106 <UART_SetConfig+0x35a>
 80040be:	a201      	add	r2, pc, #4	; (adr r2, 80040c4 <UART_SetConfig+0x318>)
 80040c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040c4:	080040e9 	.word	0x080040e9
 80040c8:	08004107 	.word	0x08004107
 80040cc:	080040f1 	.word	0x080040f1
 80040d0:	08004107 	.word	0x08004107
 80040d4:	080040f7 	.word	0x080040f7
 80040d8:	08004107 	.word	0x08004107
 80040dc:	08004107 	.word	0x08004107
 80040e0:	08004107 	.word	0x08004107
 80040e4:	080040ff 	.word	0x080040ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80040e8:	f7fe fc48 	bl	800297c <HAL_RCC_GetPCLK1Freq>
 80040ec:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80040ee:	e010      	b.n	8004112 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80040f0:	4b9e      	ldr	r3, [pc, #632]	; (800436c <UART_SetConfig+0x5c0>)
 80040f2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80040f4:	e00d      	b.n	8004112 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040f6:	f7fe fbd3 	bl	80028a0 <HAL_RCC_GetSysClockFreq>
 80040fa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80040fc:	e009      	b.n	8004112 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004102:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004104:	e005      	b.n	8004112 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004106:	2300      	movs	r3, #0
 8004108:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004110:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004114:	2b00      	cmp	r3, #0
 8004116:	f000 8130 	beq.w	800437a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411e:	4a94      	ldr	r2, [pc, #592]	; (8004370 <UART_SetConfig+0x5c4>)
 8004120:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004124:	461a      	mov	r2, r3
 8004126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004128:	fbb3 f3f2 	udiv	r3, r3, r2
 800412c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	685a      	ldr	r2, [r3, #4]
 8004132:	4613      	mov	r3, r2
 8004134:	005b      	lsls	r3, r3, #1
 8004136:	4413      	add	r3, r2
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	429a      	cmp	r2, r3
 800413c:	d305      	bcc.n	800414a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004144:	69ba      	ldr	r2, [r7, #24]
 8004146:	429a      	cmp	r2, r3
 8004148:	d903      	bls.n	8004152 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004150:	e113      	b.n	800437a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004154:	2200      	movs	r2, #0
 8004156:	60bb      	str	r3, [r7, #8]
 8004158:	60fa      	str	r2, [r7, #12]
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800415e:	4a84      	ldr	r2, [pc, #528]	; (8004370 <UART_SetConfig+0x5c4>)
 8004160:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004164:	b29b      	uxth	r3, r3
 8004166:	2200      	movs	r2, #0
 8004168:	603b      	str	r3, [r7, #0]
 800416a:	607a      	str	r2, [r7, #4]
 800416c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004170:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004174:	f7fc f85c 	bl	8000230 <__aeabi_uldivmod>
 8004178:	4602      	mov	r2, r0
 800417a:	460b      	mov	r3, r1
 800417c:	4610      	mov	r0, r2
 800417e:	4619      	mov	r1, r3
 8004180:	f04f 0200 	mov.w	r2, #0
 8004184:	f04f 0300 	mov.w	r3, #0
 8004188:	020b      	lsls	r3, r1, #8
 800418a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800418e:	0202      	lsls	r2, r0, #8
 8004190:	6979      	ldr	r1, [r7, #20]
 8004192:	6849      	ldr	r1, [r1, #4]
 8004194:	0849      	lsrs	r1, r1, #1
 8004196:	2000      	movs	r0, #0
 8004198:	460c      	mov	r4, r1
 800419a:	4605      	mov	r5, r0
 800419c:	eb12 0804 	adds.w	r8, r2, r4
 80041a0:	eb43 0905 	adc.w	r9, r3, r5
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	2200      	movs	r2, #0
 80041aa:	469a      	mov	sl, r3
 80041ac:	4693      	mov	fp, r2
 80041ae:	4652      	mov	r2, sl
 80041b0:	465b      	mov	r3, fp
 80041b2:	4640      	mov	r0, r8
 80041b4:	4649      	mov	r1, r9
 80041b6:	f7fc f83b 	bl	8000230 <__aeabi_uldivmod>
 80041ba:	4602      	mov	r2, r0
 80041bc:	460b      	mov	r3, r1
 80041be:	4613      	mov	r3, r2
 80041c0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80041c2:	6a3b      	ldr	r3, [r7, #32]
 80041c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041c8:	d308      	bcc.n	80041dc <UART_SetConfig+0x430>
 80041ca:	6a3b      	ldr	r3, [r7, #32]
 80041cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041d0:	d204      	bcs.n	80041dc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	6a3a      	ldr	r2, [r7, #32]
 80041d8:	60da      	str	r2, [r3, #12]
 80041da:	e0ce      	b.n	800437a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80041e2:	e0ca      	b.n	800437a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	69db      	ldr	r3, [r3, #28]
 80041e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041ec:	d166      	bne.n	80042bc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80041ee:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80041f2:	2b08      	cmp	r3, #8
 80041f4:	d827      	bhi.n	8004246 <UART_SetConfig+0x49a>
 80041f6:	a201      	add	r2, pc, #4	; (adr r2, 80041fc <UART_SetConfig+0x450>)
 80041f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041fc:	08004221 	.word	0x08004221
 8004200:	08004229 	.word	0x08004229
 8004204:	08004231 	.word	0x08004231
 8004208:	08004247 	.word	0x08004247
 800420c:	08004237 	.word	0x08004237
 8004210:	08004247 	.word	0x08004247
 8004214:	08004247 	.word	0x08004247
 8004218:	08004247 	.word	0x08004247
 800421c:	0800423f 	.word	0x0800423f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004220:	f7fe fbac 	bl	800297c <HAL_RCC_GetPCLK1Freq>
 8004224:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004226:	e014      	b.n	8004252 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004228:	f7fe fbbe 	bl	80029a8 <HAL_RCC_GetPCLK2Freq>
 800422c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800422e:	e010      	b.n	8004252 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004230:	4b4e      	ldr	r3, [pc, #312]	; (800436c <UART_SetConfig+0x5c0>)
 8004232:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004234:	e00d      	b.n	8004252 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004236:	f7fe fb33 	bl	80028a0 <HAL_RCC_GetSysClockFreq>
 800423a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800423c:	e009      	b.n	8004252 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800423e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004242:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004244:	e005      	b.n	8004252 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004246:	2300      	movs	r3, #0
 8004248:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004250:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004254:	2b00      	cmp	r3, #0
 8004256:	f000 8090 	beq.w	800437a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425e:	4a44      	ldr	r2, [pc, #272]	; (8004370 <UART_SetConfig+0x5c4>)
 8004260:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004264:	461a      	mov	r2, r3
 8004266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004268:	fbb3 f3f2 	udiv	r3, r3, r2
 800426c:	005a      	lsls	r2, r3, #1
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	085b      	lsrs	r3, r3, #1
 8004274:	441a      	add	r2, r3
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	fbb2 f3f3 	udiv	r3, r2, r3
 800427e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004280:	6a3b      	ldr	r3, [r7, #32]
 8004282:	2b0f      	cmp	r3, #15
 8004284:	d916      	bls.n	80042b4 <UART_SetConfig+0x508>
 8004286:	6a3b      	ldr	r3, [r7, #32]
 8004288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800428c:	d212      	bcs.n	80042b4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800428e:	6a3b      	ldr	r3, [r7, #32]
 8004290:	b29b      	uxth	r3, r3
 8004292:	f023 030f 	bic.w	r3, r3, #15
 8004296:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004298:	6a3b      	ldr	r3, [r7, #32]
 800429a:	085b      	lsrs	r3, r3, #1
 800429c:	b29b      	uxth	r3, r3
 800429e:	f003 0307 	and.w	r3, r3, #7
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	8bfb      	ldrh	r3, [r7, #30]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	8bfa      	ldrh	r2, [r7, #30]
 80042b0:	60da      	str	r2, [r3, #12]
 80042b2:	e062      	b.n	800437a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80042ba:	e05e      	b.n	800437a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80042bc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80042c0:	2b08      	cmp	r3, #8
 80042c2:	d828      	bhi.n	8004316 <UART_SetConfig+0x56a>
 80042c4:	a201      	add	r2, pc, #4	; (adr r2, 80042cc <UART_SetConfig+0x520>)
 80042c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ca:	bf00      	nop
 80042cc:	080042f1 	.word	0x080042f1
 80042d0:	080042f9 	.word	0x080042f9
 80042d4:	08004301 	.word	0x08004301
 80042d8:	08004317 	.word	0x08004317
 80042dc:	08004307 	.word	0x08004307
 80042e0:	08004317 	.word	0x08004317
 80042e4:	08004317 	.word	0x08004317
 80042e8:	08004317 	.word	0x08004317
 80042ec:	0800430f 	.word	0x0800430f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042f0:	f7fe fb44 	bl	800297c <HAL_RCC_GetPCLK1Freq>
 80042f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80042f6:	e014      	b.n	8004322 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042f8:	f7fe fb56 	bl	80029a8 <HAL_RCC_GetPCLK2Freq>
 80042fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80042fe:	e010      	b.n	8004322 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004300:	4b1a      	ldr	r3, [pc, #104]	; (800436c <UART_SetConfig+0x5c0>)
 8004302:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004304:	e00d      	b.n	8004322 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004306:	f7fe facb 	bl	80028a0 <HAL_RCC_GetSysClockFreq>
 800430a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800430c:	e009      	b.n	8004322 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800430e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004312:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004314:	e005      	b.n	8004322 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004316:	2300      	movs	r3, #0
 8004318:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004320:	bf00      	nop
    }

    if (pclk != 0U)
 8004322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004324:	2b00      	cmp	r3, #0
 8004326:	d028      	beq.n	800437a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432c:	4a10      	ldr	r2, [pc, #64]	; (8004370 <UART_SetConfig+0x5c4>)
 800432e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004332:	461a      	mov	r2, r3
 8004334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004336:	fbb3 f2f2 	udiv	r2, r3, r2
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	085b      	lsrs	r3, r3, #1
 8004340:	441a      	add	r2, r3
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	fbb2 f3f3 	udiv	r3, r2, r3
 800434a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800434c:	6a3b      	ldr	r3, [r7, #32]
 800434e:	2b0f      	cmp	r3, #15
 8004350:	d910      	bls.n	8004374 <UART_SetConfig+0x5c8>
 8004352:	6a3b      	ldr	r3, [r7, #32]
 8004354:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004358:	d20c      	bcs.n	8004374 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800435a:	6a3b      	ldr	r3, [r7, #32]
 800435c:	b29a      	uxth	r2, r3
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	60da      	str	r2, [r3, #12]
 8004364:	e009      	b.n	800437a <UART_SetConfig+0x5ce>
 8004366:	bf00      	nop
 8004368:	40008000 	.word	0x40008000
 800436c:	00f42400 	.word	0x00f42400
 8004370:	08006938 	.word	0x08006938
      }
      else
      {
        ret = HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	2201      	movs	r2, #1
 800437e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	2201      	movs	r2, #1
 8004386:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	2200      	movs	r2, #0
 800438e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	2200      	movs	r2, #0
 8004394:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004396:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800439a:	4618      	mov	r0, r3
 800439c:	3730      	adds	r7, #48	; 0x30
 800439e:	46bd      	mov	sp, r7
 80043a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080043a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b083      	sub	sp, #12
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043b0:	f003 0308 	and.w	r3, r3, #8
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00a      	beq.n	80043ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	430a      	orrs	r2, r1
 80043cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d2:	f003 0301 	and.w	r3, r3, #1
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d00a      	beq.n	80043f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	430a      	orrs	r2, r1
 80043ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043f4:	f003 0302 	and.w	r3, r3, #2
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d00a      	beq.n	8004412 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	430a      	orrs	r2, r1
 8004410:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004416:	f003 0304 	and.w	r3, r3, #4
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00a      	beq.n	8004434 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	685b      	ldr	r3, [r3, #4]
 8004424:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	430a      	orrs	r2, r1
 8004432:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004438:	f003 0310 	and.w	r3, r3, #16
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00a      	beq.n	8004456 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	430a      	orrs	r2, r1
 8004454:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800445a:	f003 0320 	and.w	r3, r3, #32
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00a      	beq.n	8004478 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	689b      	ldr	r3, [r3, #8]
 8004468:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	430a      	orrs	r2, r1
 8004476:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800447c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004480:	2b00      	cmp	r3, #0
 8004482:	d01a      	beq.n	80044ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	430a      	orrs	r2, r1
 8004498:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800449e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80044a2:	d10a      	bne.n	80044ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	430a      	orrs	r2, r1
 80044b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d00a      	beq.n	80044dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	430a      	orrs	r2, r1
 80044da:	605a      	str	r2, [r3, #4]
  }
}
 80044dc:	bf00      	nop
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b098      	sub	sp, #96	; 0x60
 80044ec:	af02      	add	r7, sp, #8
 80044ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80044f8:	f7fc fef4 	bl	80012e4 <HAL_GetTick>
 80044fc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0308 	and.w	r3, r3, #8
 8004508:	2b08      	cmp	r3, #8
 800450a:	d12f      	bne.n	800456c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800450c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004510:	9300      	str	r3, [sp, #0]
 8004512:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004514:	2200      	movs	r2, #0
 8004516:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 f88e 	bl	800463c <UART_WaitOnFlagUntilTimeout>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d022      	beq.n	800456c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800452c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800452e:	e853 3f00 	ldrex	r3, [r3]
 8004532:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004536:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800453a:	653b      	str	r3, [r7, #80]	; 0x50
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	461a      	mov	r2, r3
 8004542:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004544:	647b      	str	r3, [r7, #68]	; 0x44
 8004546:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004548:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800454a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800454c:	e841 2300 	strex	r3, r2, [r1]
 8004550:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004552:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004554:	2b00      	cmp	r3, #0
 8004556:	d1e6      	bne.n	8004526 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2220      	movs	r2, #32
 800455c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e063      	b.n	8004634 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0304 	and.w	r3, r3, #4
 8004576:	2b04      	cmp	r3, #4
 8004578:	d149      	bne.n	800460e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800457a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800457e:	9300      	str	r3, [sp, #0]
 8004580:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004582:	2200      	movs	r2, #0
 8004584:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f000 f857 	bl	800463c <UART_WaitOnFlagUntilTimeout>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d03c      	beq.n	800460e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459c:	e853 3f00 	ldrex	r3, [r3]
 80045a0:	623b      	str	r3, [r7, #32]
   return(result);
 80045a2:	6a3b      	ldr	r3, [r7, #32]
 80045a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	461a      	mov	r2, r3
 80045b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045b2:	633b      	str	r3, [r7, #48]	; 0x30
 80045b4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045ba:	e841 2300 	strex	r3, r2, [r1]
 80045be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80045c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d1e6      	bne.n	8004594 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	3308      	adds	r3, #8
 80045cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	e853 3f00 	ldrex	r3, [r3]
 80045d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f023 0301 	bic.w	r3, r3, #1
 80045dc:	64bb      	str	r3, [r7, #72]	; 0x48
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	3308      	adds	r3, #8
 80045e4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80045e6:	61fa      	str	r2, [r7, #28]
 80045e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ea:	69b9      	ldr	r1, [r7, #24]
 80045ec:	69fa      	ldr	r2, [r7, #28]
 80045ee:	e841 2300 	strex	r3, r2, [r1]
 80045f2:	617b      	str	r3, [r7, #20]
   return(result);
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d1e5      	bne.n	80045c6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2220      	movs	r2, #32
 80045fe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800460a:	2303      	movs	r3, #3
 800460c:	e012      	b.n	8004634 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2220      	movs	r2, #32
 8004612:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	2220      	movs	r2, #32
 800461a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3758      	adds	r7, #88	; 0x58
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	603b      	str	r3, [r7, #0]
 8004648:	4613      	mov	r3, r2
 800464a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800464c:	e04f      	b.n	80046ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004654:	d04b      	beq.n	80046ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004656:	f7fc fe45 	bl	80012e4 <HAL_GetTick>
 800465a:	4602      	mov	r2, r0
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	69ba      	ldr	r2, [r7, #24]
 8004662:	429a      	cmp	r2, r3
 8004664:	d302      	bcc.n	800466c <UART_WaitOnFlagUntilTimeout+0x30>
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d101      	bne.n	8004670 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e04e      	b.n	800470e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f003 0304 	and.w	r3, r3, #4
 800467a:	2b00      	cmp	r3, #0
 800467c:	d037      	beq.n	80046ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	2b80      	cmp	r3, #128	; 0x80
 8004682:	d034      	beq.n	80046ee <UART_WaitOnFlagUntilTimeout+0xb2>
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	2b40      	cmp	r3, #64	; 0x40
 8004688:	d031      	beq.n	80046ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	69db      	ldr	r3, [r3, #28]
 8004690:	f003 0308 	and.w	r3, r3, #8
 8004694:	2b08      	cmp	r3, #8
 8004696:	d110      	bne.n	80046ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2208      	movs	r2, #8
 800469e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80046a0:	68f8      	ldr	r0, [r7, #12]
 80046a2:	f000 f879 	bl	8004798 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	2208      	movs	r2, #8
 80046aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2200      	movs	r2, #0
 80046b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80046b6:	2301      	movs	r3, #1
 80046b8:	e029      	b.n	800470e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	69db      	ldr	r3, [r3, #28]
 80046c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046c8:	d111      	bne.n	80046ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80046d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80046d4:	68f8      	ldr	r0, [r7, #12]
 80046d6:	f000 f85f 	bl	8004798 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2220      	movs	r2, #32
 80046de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80046ea:	2303      	movs	r3, #3
 80046ec:	e00f      	b.n	800470e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	69da      	ldr	r2, [r3, #28]
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	4013      	ands	r3, r2
 80046f8:	68ba      	ldr	r2, [r7, #8]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	bf0c      	ite	eq
 80046fe:	2301      	moveq	r3, #1
 8004700:	2300      	movne	r3, #0
 8004702:	b2db      	uxtb	r3, r3
 8004704:	461a      	mov	r2, r3
 8004706:	79fb      	ldrb	r3, [r7, #7]
 8004708:	429a      	cmp	r2, r3
 800470a:	d0a0      	beq.n	800464e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}

08004716 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004716:	b480      	push	{r7}
 8004718:	b08f      	sub	sp, #60	; 0x3c
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004724:	6a3b      	ldr	r3, [r7, #32]
 8004726:	e853 3f00 	ldrex	r3, [r3]
 800472a:	61fb      	str	r3, [r7, #28]
   return(result);
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004732:	637b      	str	r3, [r7, #52]	; 0x34
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	461a      	mov	r2, r3
 800473a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800473c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800473e:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004740:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004742:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004744:	e841 2300 	strex	r3, r2, [r1]
 8004748:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800474a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474c:	2b00      	cmp	r3, #0
 800474e:	d1e6      	bne.n	800471e <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	3308      	adds	r3, #8
 8004756:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	e853 3f00 	ldrex	r3, [r3]
 800475e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004766:	633b      	str	r3, [r7, #48]	; 0x30
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	3308      	adds	r3, #8
 800476e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004770:	61ba      	str	r2, [r7, #24]
 8004772:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004774:	6979      	ldr	r1, [r7, #20]
 8004776:	69ba      	ldr	r2, [r7, #24]
 8004778:	e841 2300 	strex	r3, r2, [r1]
 800477c:	613b      	str	r3, [r7, #16]
   return(result);
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1e5      	bne.n	8004750 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2220      	movs	r2, #32
 8004788:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800478c:	bf00      	nop
 800478e:	373c      	adds	r7, #60	; 0x3c
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004798:	b480      	push	{r7}
 800479a:	b095      	sub	sp, #84	; 0x54
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80047a8:	e853 3f00 	ldrex	r3, [r3]
 80047ac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80047ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80047b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	461a      	mov	r2, r3
 80047bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047be:	643b      	str	r3, [r7, #64]	; 0x40
 80047c0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80047c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047c6:	e841 2300 	strex	r3, r2, [r1]
 80047ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80047cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d1e6      	bne.n	80047a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	3308      	adds	r3, #8
 80047d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047da:	6a3b      	ldr	r3, [r7, #32]
 80047dc:	e853 3f00 	ldrex	r3, [r3]
 80047e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047e8:	f023 0301 	bic.w	r3, r3, #1
 80047ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	3308      	adds	r3, #8
 80047f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80047f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047fe:	e841 2300 	strex	r3, r2, [r1]
 8004802:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004806:	2b00      	cmp	r3, #0
 8004808:	d1e3      	bne.n	80047d2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800480e:	2b01      	cmp	r3, #1
 8004810:	d118      	bne.n	8004844 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	e853 3f00 	ldrex	r3, [r3]
 800481e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	f023 0310 	bic.w	r3, r3, #16
 8004826:	647b      	str	r3, [r7, #68]	; 0x44
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	461a      	mov	r2, r3
 800482e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004830:	61bb      	str	r3, [r7, #24]
 8004832:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004834:	6979      	ldr	r1, [r7, #20]
 8004836:	69ba      	ldr	r2, [r7, #24]
 8004838:	e841 2300 	strex	r3, r2, [r1]
 800483c:	613b      	str	r3, [r7, #16]
   return(result);
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1e6      	bne.n	8004812 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2220      	movs	r2, #32
 8004848:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2200      	movs	r2, #0
 8004850:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004858:	bf00      	nop
 800485a:	3754      	adds	r7, #84	; 0x54
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b090      	sub	sp, #64	; 0x40
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004870:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0320 	and.w	r3, r3, #32
 800487c:	2b00      	cmp	r3, #0
 800487e:	d137      	bne.n	80048f0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8004880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004882:	2200      	movs	r2, #0
 8004884:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	3308      	adds	r3, #8
 800488e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004892:	e853 3f00 	ldrex	r3, [r3]
 8004896:	623b      	str	r3, [r7, #32]
   return(result);
 8004898:	6a3b      	ldr	r3, [r7, #32]
 800489a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800489e:	63bb      	str	r3, [r7, #56]	; 0x38
 80048a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	3308      	adds	r3, #8
 80048a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80048a8:	633a      	str	r2, [r7, #48]	; 0x30
 80048aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80048ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80048b0:	e841 2300 	strex	r3, r2, [r1]
 80048b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80048b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1e5      	bne.n	8004888 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80048bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	e853 3f00 	ldrex	r3, [r3]
 80048c8:	60fb      	str	r3, [r7, #12]
   return(result);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048d0:	637b      	str	r3, [r7, #52]	; 0x34
 80048d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	461a      	mov	r2, r3
 80048d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048da:	61fb      	str	r3, [r7, #28]
 80048dc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048de:	69b9      	ldr	r1, [r7, #24]
 80048e0:	69fa      	ldr	r2, [r7, #28]
 80048e2:	e841 2300 	strex	r3, r2, [r1]
 80048e6:	617b      	str	r3, [r7, #20]
   return(result);
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d1e6      	bne.n	80048bc <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80048ee:	e002      	b.n	80048f6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80048f0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80048f2:	f001 fc2f 	bl	8006154 <HAL_UART_TxCpltCallback>
}
 80048f6:	bf00      	nop
 80048f8:	3740      	adds	r7, #64	; 0x40
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}

080048fe <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80048fe:	b580      	push	{r7, lr}
 8004900:	b084      	sub	sp, #16
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800490c:	68f8      	ldr	r0, [r7, #12]
 800490e:	f7ff fa43 	bl	8003d98 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004912:	bf00      	nop
 8004914:	3710      	adds	r7, #16
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}

0800491a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800491a:	b580      	push	{r7, lr}
 800491c:	b086      	sub	sp, #24
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004926:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800492e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004936:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004942:	2b80      	cmp	r3, #128	; 0x80
 8004944:	d109      	bne.n	800495a <UART_DMAError+0x40>
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	2b21      	cmp	r3, #33	; 0x21
 800494a:	d106      	bne.n	800495a <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	2200      	movs	r2, #0
 8004950:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8004954:	6978      	ldr	r0, [r7, #20]
 8004956:	f7ff fede 	bl	8004716 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004964:	2b40      	cmp	r3, #64	; 0x40
 8004966:	d109      	bne.n	800497c <UART_DMAError+0x62>
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2b22      	cmp	r3, #34	; 0x22
 800496c:	d106      	bne.n	800497c <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	2200      	movs	r2, #0
 8004972:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8004976:	6978      	ldr	r0, [r7, #20]
 8004978:	f7ff ff0e 	bl	8004798 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004982:	f043 0210 	orr.w	r2, r3, #16
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800498c:	6978      	ldr	r0, [r7, #20]
 800498e:	f001 fc77 	bl	8006280 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004992:	bf00      	nop
 8004994:	3718      	adds	r7, #24
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}

0800499a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800499a:	b580      	push	{r7, lr}
 800499c:	b084      	sub	sp, #16
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2200      	movs	r2, #0
 80049b4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f001 fc61 	bl	8006280 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049be:	bf00      	nop
 80049c0:	3710      	adds	r7, #16
 80049c2:	46bd      	mov	sp, r7
 80049c4:	bd80      	pop	{r7, pc}

080049c6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b088      	sub	sp, #32
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	e853 3f00 	ldrex	r3, [r3]
 80049da:	60bb      	str	r3, [r7, #8]
   return(result);
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049e2:	61fb      	str	r3, [r7, #28]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	461a      	mov	r2, r3
 80049ea:	69fb      	ldr	r3, [r7, #28]
 80049ec:	61bb      	str	r3, [r7, #24]
 80049ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049f0:	6979      	ldr	r1, [r7, #20]
 80049f2:	69ba      	ldr	r2, [r7, #24]
 80049f4:	e841 2300 	strex	r3, r2, [r1]
 80049f8:	613b      	str	r3, [r7, #16]
   return(result);
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1e6      	bne.n	80049ce <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2220      	movs	r2, #32
 8004a04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f001 fba0 	bl	8006154 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004a14:	bf00      	nop
 8004a16:	3720      	adds	r7, #32
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b083      	sub	sp, #12
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004a24:	bf00      	nop
 8004a26:	370c      	adds	r7, #12
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2e:	4770      	bx	lr

08004a30 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004a30:	b480      	push	{r7}
 8004a32:	b083      	sub	sp, #12
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004a38:	bf00      	nop
 8004a3a:	370c      	adds	r7, #12
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b085      	sub	sp, #20
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d101      	bne.n	8004a5a <HAL_UARTEx_DisableFifoMode+0x16>
 8004a56:	2302      	movs	r3, #2
 8004a58:	e027      	b.n	8004aaa <HAL_UARTEx_DisableFifoMode+0x66>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2224      	movs	r2, #36	; 0x24
 8004a66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f022 0201 	bic.w	r2, r2, #1
 8004a80:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004a88:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68fa      	ldr	r2, [r7, #12]
 8004a96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2220      	movs	r2, #32
 8004a9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3714      	adds	r7, #20
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr

08004ab6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b084      	sub	sp, #16
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	6078      	str	r0, [r7, #4]
 8004abe:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d101      	bne.n	8004ace <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004aca:	2302      	movs	r3, #2
 8004acc:	e02d      	b.n	8004b2a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2224      	movs	r2, #36	; 0x24
 8004ada:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f022 0201 	bic.w	r2, r2, #1
 8004af4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	683a      	ldr	r2, [r7, #0]
 8004b06:	430a      	orrs	r2, r1
 8004b08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 f850 	bl	8004bb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004b28:	2300      	movs	r3, #0
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3710      	adds	r7, #16
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}

08004b32 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b084      	sub	sp, #16
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
 8004b3a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d101      	bne.n	8004b4a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004b46:	2302      	movs	r3, #2
 8004b48:	e02d      	b.n	8004ba6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2224      	movs	r2, #36	; 0x24
 8004b56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f022 0201 	bic.w	r2, r2, #1
 8004b70:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	683a      	ldr	r2, [r7, #0]
 8004b82:	430a      	orrs	r2, r1
 8004b84:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f000 f812 	bl	8004bb0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2220      	movs	r2, #32
 8004b98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3710      	adds	r7, #16
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
	...

08004bb0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d108      	bne.n	8004bd2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004bd0:	e031      	b.n	8004c36 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004bd2:	2308      	movs	r3, #8
 8004bd4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004bd6:	2308      	movs	r3, #8
 8004bd8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	0e5b      	lsrs	r3, r3, #25
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	f003 0307 	and.w	r3, r3, #7
 8004be8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	0f5b      	lsrs	r3, r3, #29
 8004bf2:	b2db      	uxtb	r3, r3
 8004bf4:	f003 0307 	and.w	r3, r3, #7
 8004bf8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004bfa:	7bbb      	ldrb	r3, [r7, #14]
 8004bfc:	7b3a      	ldrb	r2, [r7, #12]
 8004bfe:	4911      	ldr	r1, [pc, #68]	; (8004c44 <UARTEx_SetNbDataToProcess+0x94>)
 8004c00:	5c8a      	ldrb	r2, [r1, r2]
 8004c02:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004c06:	7b3a      	ldrb	r2, [r7, #12]
 8004c08:	490f      	ldr	r1, [pc, #60]	; (8004c48 <UARTEx_SetNbDataToProcess+0x98>)
 8004c0a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004c0c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004c10:	b29a      	uxth	r2, r3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004c18:	7bfb      	ldrb	r3, [r7, #15]
 8004c1a:	7b7a      	ldrb	r2, [r7, #13]
 8004c1c:	4909      	ldr	r1, [pc, #36]	; (8004c44 <UARTEx_SetNbDataToProcess+0x94>)
 8004c1e:	5c8a      	ldrb	r2, [r1, r2]
 8004c20:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004c24:	7b7a      	ldrb	r2, [r7, #13]
 8004c26:	4908      	ldr	r1, [pc, #32]	; (8004c48 <UARTEx_SetNbDataToProcess+0x98>)
 8004c28:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004c2a:	fb93 f3f2 	sdiv	r3, r3, r2
 8004c2e:	b29a      	uxth	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8004c36:	bf00      	nop
 8004c38:	3714      	adds	r7, #20
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	08006950 	.word	0x08006950
 8004c48:	08006958 	.word	0x08006958

08004c4c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	4603      	mov	r3, r0
 8004c54:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004c56:	2300      	movs	r3, #0
 8004c58:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004c5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004c5e:	2b84      	cmp	r3, #132	; 0x84
 8004c60:	d005      	beq.n	8004c6e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004c62:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	4413      	add	r3, r2
 8004c6a:	3303      	adds	r3, #3
 8004c6c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
}
 8004c70:	4618      	mov	r0, r3
 8004c72:	3714      	adds	r7, #20
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004c80:	f000 fa26 	bl	80050d0 <vTaskStartScheduler>
  
  return osOK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	bd80      	pop	{r7, pc}

08004c8a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8004c8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c8c:	b089      	sub	sp, #36	; 0x24
 8004c8e:	af04      	add	r7, sp, #16
 8004c90:	6078      	str	r0, [r7, #4]
 8004c92:	6039      	str	r1, [r7, #0]
      return NULL;
    } 
  }
#elif( configSUPPORT_STATIC_ALLOCATION == 1 )

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	685c      	ldr	r4, [r3, #4]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	691e      	ldr	r6, [r3, #16]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	f7ff ffd0 	bl	8004c4c <makeFreeRtosPriority>
 8004cac:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004cb6:	9202      	str	r2, [sp, #8]
 8004cb8:	9301      	str	r3, [sp, #4]
 8004cba:	9100      	str	r1, [sp, #0]
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	4632      	mov	r2, r6
 8004cc0:	4629      	mov	r1, r5
 8004cc2:	4620      	mov	r0, r4
 8004cc4:	f000 f8ba 	bl	8004e3c <xTaskCreateStatic>
 8004cc8:	60f8      	str	r0, [r7, #12]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8004cca:	68fb      	ldr	r3, [r7, #12]
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3714      	adds	r7, #20
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004cd4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f103 0208 	add.w	r2, r3, #8
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004cec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f103 0208 	add.w	r2, r3, #8
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f103 0208 	add.w	r2, r3, #8
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004d08:	bf00      	nop
 8004d0a:	370c      	adds	r7, #12
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004d14:	b480      	push	{r7}
 8004d16:	b083      	sub	sp, #12
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004d22:	bf00      	nop
 8004d24:	370c      	adds	r7, #12
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr

08004d2e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d2e:	b480      	push	{r7}
 8004d30:	b085      	sub	sp, #20
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
 8004d36:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	68fa      	ldr	r2, [r7, #12]
 8004d42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	689a      	ldr	r2, [r3, #8]
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	683a      	ldr	r2, [r7, #0]
 8004d52:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	683a      	ldr	r2, [r7, #0]
 8004d58:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	687a      	ldr	r2, [r7, #4]
 8004d5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	1c5a      	adds	r2, r3, #1
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	601a      	str	r2, [r3, #0]
}
 8004d6a:	bf00      	nop
 8004d6c:	3714      	adds	r7, #20
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr

08004d76 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d76:	b480      	push	{r7}
 8004d78:	b085      	sub	sp, #20
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
 8004d7e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d8c:	d103      	bne.n	8004d96 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	691b      	ldr	r3, [r3, #16]
 8004d92:	60fb      	str	r3, [r7, #12]
 8004d94:	e00c      	b.n	8004db0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	3308      	adds	r3, #8
 8004d9a:	60fb      	str	r3, [r7, #12]
 8004d9c:	e002      	b.n	8004da4 <vListInsert+0x2e>
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	60fb      	str	r3, [r7, #12]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	68ba      	ldr	r2, [r7, #8]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d2f6      	bcs.n	8004d9e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	685b      	ldr	r3, [r3, #4]
 8004dbc:	683a      	ldr	r2, [r7, #0]
 8004dbe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	683a      	ldr	r2, [r7, #0]
 8004dca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	1c5a      	adds	r2, r3, #1
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	601a      	str	r2, [r3, #0]
}
 8004ddc:	bf00      	nop
 8004dde:	3714      	adds	r7, #20
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004de8:	b480      	push	{r7}
 8004dea:	b085      	sub	sp, #20
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	687a      	ldr	r2, [r7, #4]
 8004dfc:	6892      	ldr	r2, [r2, #8]
 8004dfe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	689b      	ldr	r3, [r3, #8]
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	6852      	ldr	r2, [r2, #4]
 8004e08:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	685b      	ldr	r3, [r3, #4]
 8004e0e:	687a      	ldr	r2, [r7, #4]
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d103      	bne.n	8004e1c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	689a      	ldr	r2, [r3, #8]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	1e5a      	subs	r2, r3, #1
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
}
 8004e30:	4618      	mov	r0, r3
 8004e32:	3714      	adds	r7, #20
 8004e34:	46bd      	mov	sp, r7
 8004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3a:	4770      	bx	lr

08004e3c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b08e      	sub	sp, #56	; 0x38
 8004e40:	af04      	add	r7, sp, #16
 8004e42:	60f8      	str	r0, [r7, #12]
 8004e44:	60b9      	str	r1, [r7, #8]
 8004e46:	607a      	str	r2, [r7, #4]
 8004e48:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004e4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d10a      	bne.n	8004e66 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e54:	f383 8811 	msr	BASEPRI, r3
 8004e58:	f3bf 8f6f 	isb	sy
 8004e5c:	f3bf 8f4f 	dsb	sy
 8004e60:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004e62:	bf00      	nop
 8004e64:	e7fe      	b.n	8004e64 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004e66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d10a      	bne.n	8004e82 <xTaskCreateStatic+0x46>
	__asm volatile
 8004e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e70:	f383 8811 	msr	BASEPRI, r3
 8004e74:	f3bf 8f6f 	isb	sy
 8004e78:	f3bf 8f4f 	dsb	sy
 8004e7c:	61fb      	str	r3, [r7, #28]
}
 8004e7e:	bf00      	nop
 8004e80:	e7fe      	b.n	8004e80 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004e82:	2354      	movs	r3, #84	; 0x54
 8004e84:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	2b54      	cmp	r3, #84	; 0x54
 8004e8a:	d00a      	beq.n	8004ea2 <xTaskCreateStatic+0x66>
	__asm volatile
 8004e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e90:	f383 8811 	msr	BASEPRI, r3
 8004e94:	f3bf 8f6f 	isb	sy
 8004e98:	f3bf 8f4f 	dsb	sy
 8004e9c:	61bb      	str	r3, [r7, #24]
}
 8004e9e:	bf00      	nop
 8004ea0:	e7fe      	b.n	8004ea0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004ea2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d01a      	beq.n	8004ee0 <xTaskCreateStatic+0xa4>
 8004eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d017      	beq.n	8004ee0 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004eb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004eb8:	631a      	str	r2, [r3, #48]	; 0x30
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004eba:	2300      	movs	r3, #0
 8004ebc:	9303      	str	r3, [sp, #12]
 8004ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec0:	9302      	str	r3, [sp, #8]
 8004ec2:	f107 0314 	add.w	r3, r7, #20
 8004ec6:	9301      	str	r3, [sp, #4]
 8004ec8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eca:	9300      	str	r3, [sp, #0]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	687a      	ldr	r2, [r7, #4]
 8004ed0:	68b9      	ldr	r1, [r7, #8]
 8004ed2:	68f8      	ldr	r0, [r7, #12]
 8004ed4:	f000 f80b 	bl	8004eee <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ed8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004eda:	f000 f88f 	bl	8004ffc <prvAddNewTaskToReadyList>
 8004ede:	e001      	b.n	8004ee4 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004ee4:	697b      	ldr	r3, [r7, #20]
	}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3728      	adds	r7, #40	; 0x28
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b088      	sub	sp, #32
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	60f8      	str	r0, [r7, #12]
 8004ef6:	60b9      	str	r1, [r7, #8]
 8004ef8:	607a      	str	r2, [r7, #4]
 8004efa:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004efe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004f06:	3b01      	subs	r3, #1
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	4413      	add	r3, r2
 8004f0c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004f0e:	69bb      	ldr	r3, [r7, #24]
 8004f10:	f023 0307 	bic.w	r3, r3, #7
 8004f14:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	f003 0307 	and.w	r3, r3, #7
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d00a      	beq.n	8004f36 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f24:	f383 8811 	msr	BASEPRI, r3
 8004f28:	f3bf 8f6f 	isb	sy
 8004f2c:	f3bf 8f4f 	dsb	sy
 8004f30:	617b      	str	r3, [r7, #20]
}
 8004f32:	bf00      	nop
 8004f34:	e7fe      	b.n	8004f34 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004f36:	68bb      	ldr	r3, [r7, #8]
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d01f      	beq.n	8004f7c <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	61fb      	str	r3, [r7, #28]
 8004f40:	e012      	b.n	8004f68 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004f42:	68ba      	ldr	r2, [r7, #8]
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	4413      	add	r3, r2
 8004f48:	7819      	ldrb	r1, [r3, #0]
 8004f4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	4413      	add	r3, r2
 8004f50:	3334      	adds	r3, #52	; 0x34
 8004f52:	460a      	mov	r2, r1
 8004f54:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004f56:	68ba      	ldr	r2, [r7, #8]
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d006      	beq.n	8004f70 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	3301      	adds	r3, #1
 8004f66:	61fb      	str	r3, [r7, #28]
 8004f68:	69fb      	ldr	r3, [r7, #28]
 8004f6a:	2b0f      	cmp	r3, #15
 8004f6c:	d9e9      	bls.n	8004f42 <prvInitialiseNewTask+0x54>
 8004f6e:	e000      	b.n	8004f72 <prvInitialiseNewTask+0x84>
			{
				break;
 8004f70:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004f72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f7a:	e003      	b.n	8004f84 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f86:	2b06      	cmp	r3, #6
 8004f88:	d901      	bls.n	8004f8e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004f8a:	2306      	movs	r3, #6
 8004f8c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f92:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004f98:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa2:	3304      	adds	r3, #4
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f7ff feb5 	bl	8004d14 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fac:	3318      	adds	r3, #24
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7ff feb0 	bl	8004d14 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004fb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fb8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fbc:	f1c3 0207 	rsb	r2, r3, #7
 8004fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fc8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fcc:	2200      	movs	r2, #0
 8004fce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004fd8:	683a      	ldr	r2, [r7, #0]
 8004fda:	68f9      	ldr	r1, [r7, #12]
 8004fdc:	69b8      	ldr	r0, [r7, #24]
 8004fde:	f000 fc35 	bl	800584c <pxPortInitialiseStack>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d002      	beq.n	8004ff4 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ff2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ff4:	bf00      	nop
 8004ff6:	3720      	adds	r7, #32
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005004:	f000 fd4e 	bl	8005aa4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005008:	4b2a      	ldr	r3, [pc, #168]	; (80050b4 <prvAddNewTaskToReadyList+0xb8>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	3301      	adds	r3, #1
 800500e:	4a29      	ldr	r2, [pc, #164]	; (80050b4 <prvAddNewTaskToReadyList+0xb8>)
 8005010:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005012:	4b29      	ldr	r3, [pc, #164]	; (80050b8 <prvAddNewTaskToReadyList+0xbc>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d109      	bne.n	800502e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800501a:	4a27      	ldr	r2, [pc, #156]	; (80050b8 <prvAddNewTaskToReadyList+0xbc>)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005020:	4b24      	ldr	r3, [pc, #144]	; (80050b4 <prvAddNewTaskToReadyList+0xb8>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d110      	bne.n	800504a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005028:	f000 f9de 	bl	80053e8 <prvInitialiseTaskLists>
 800502c:	e00d      	b.n	800504a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800502e:	4b23      	ldr	r3, [pc, #140]	; (80050bc <prvAddNewTaskToReadyList+0xc0>)
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d109      	bne.n	800504a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005036:	4b20      	ldr	r3, [pc, #128]	; (80050b8 <prvAddNewTaskToReadyList+0xbc>)
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005040:	429a      	cmp	r2, r3
 8005042:	d802      	bhi.n	800504a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005044:	4a1c      	ldr	r2, [pc, #112]	; (80050b8 <prvAddNewTaskToReadyList+0xbc>)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800504a:	4b1d      	ldr	r3, [pc, #116]	; (80050c0 <prvAddNewTaskToReadyList+0xc4>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	3301      	adds	r3, #1
 8005050:	4a1b      	ldr	r2, [pc, #108]	; (80050c0 <prvAddNewTaskToReadyList+0xc4>)
 8005052:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005058:	2201      	movs	r2, #1
 800505a:	409a      	lsls	r2, r3
 800505c:	4b19      	ldr	r3, [pc, #100]	; (80050c4 <prvAddNewTaskToReadyList+0xc8>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4313      	orrs	r3, r2
 8005062:	4a18      	ldr	r2, [pc, #96]	; (80050c4 <prvAddNewTaskToReadyList+0xc8>)
 8005064:	6013      	str	r3, [r2, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800506a:	4613      	mov	r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	4413      	add	r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	4a15      	ldr	r2, [pc, #84]	; (80050c8 <prvAddNewTaskToReadyList+0xcc>)
 8005074:	441a      	add	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	3304      	adds	r3, #4
 800507a:	4619      	mov	r1, r3
 800507c:	4610      	mov	r0, r2
 800507e:	f7ff fe56 	bl	8004d2e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005082:	f000 fd3f 	bl	8005b04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005086:	4b0d      	ldr	r3, [pc, #52]	; (80050bc <prvAddNewTaskToReadyList+0xc0>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00e      	beq.n	80050ac <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800508e:	4b0a      	ldr	r3, [pc, #40]	; (80050b8 <prvAddNewTaskToReadyList+0xbc>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005098:	429a      	cmp	r2, r3
 800509a:	d207      	bcs.n	80050ac <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800509c:	4b0b      	ldr	r3, [pc, #44]	; (80050cc <prvAddNewTaskToReadyList+0xd0>)
 800509e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050a2:	601a      	str	r2, [r3, #0]
 80050a4:	f3bf 8f4f 	dsb	sy
 80050a8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050ac:	bf00      	nop
 80050ae:	3708      	adds	r7, #8
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	20000db0 	.word	0x20000db0
 80050b8:	20000cb0 	.word	0x20000cb0
 80050bc:	20000dbc 	.word	0x20000dbc
 80050c0:	20000dcc 	.word	0x20000dcc
 80050c4:	20000db8 	.word	0x20000db8
 80050c8:	20000cb4 	.word	0x20000cb4
 80050cc:	e000ed04 	.word	0xe000ed04

080050d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b08a      	sub	sp, #40	; 0x28
 80050d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80050d6:	2300      	movs	r3, #0
 80050d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80050da:	2300      	movs	r3, #0
 80050dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80050de:	463a      	mov	r2, r7
 80050e0:	1d39      	adds	r1, r7, #4
 80050e2:	f107 0308 	add.w	r3, r7, #8
 80050e6:	4618      	mov	r0, r3
 80050e8:	f7fb fa20 	bl	800052c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80050ec:	6839      	ldr	r1, [r7, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	68ba      	ldr	r2, [r7, #8]
 80050f2:	9202      	str	r2, [sp, #8]
 80050f4:	9301      	str	r3, [sp, #4]
 80050f6:	2300      	movs	r3, #0
 80050f8:	9300      	str	r3, [sp, #0]
 80050fa:	2300      	movs	r3, #0
 80050fc:	460a      	mov	r2, r1
 80050fe:	491e      	ldr	r1, [pc, #120]	; (8005178 <vTaskStartScheduler+0xa8>)
 8005100:	481e      	ldr	r0, [pc, #120]	; (800517c <vTaskStartScheduler+0xac>)
 8005102:	f7ff fe9b 	bl	8004e3c <xTaskCreateStatic>
 8005106:	4603      	mov	r3, r0
 8005108:	4a1d      	ldr	r2, [pc, #116]	; (8005180 <vTaskStartScheduler+0xb0>)
 800510a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800510c:	4b1c      	ldr	r3, [pc, #112]	; (8005180 <vTaskStartScheduler+0xb0>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d002      	beq.n	800511a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005114:	2301      	movs	r3, #1
 8005116:	617b      	str	r3, [r7, #20]
 8005118:	e001      	b.n	800511e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800511a:	2300      	movs	r3, #0
 800511c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d116      	bne.n	8005152 <vTaskStartScheduler+0x82>
	__asm volatile
 8005124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005128:	f383 8811 	msr	BASEPRI, r3
 800512c:	f3bf 8f6f 	isb	sy
 8005130:	f3bf 8f4f 	dsb	sy
 8005134:	613b      	str	r3, [r7, #16]
}
 8005136:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005138:	4b12      	ldr	r3, [pc, #72]	; (8005184 <vTaskStartScheduler+0xb4>)
 800513a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800513e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005140:	4b11      	ldr	r3, [pc, #68]	; (8005188 <vTaskStartScheduler+0xb8>)
 8005142:	2201      	movs	r2, #1
 8005144:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005146:	4b11      	ldr	r3, [pc, #68]	; (800518c <vTaskStartScheduler+0xbc>)
 8005148:	2200      	movs	r2, #0
 800514a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800514c:	f000 fc08 	bl	8005960 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005150:	e00e      	b.n	8005170 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005152:	697b      	ldr	r3, [r7, #20]
 8005154:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005158:	d10a      	bne.n	8005170 <vTaskStartScheduler+0xa0>
	__asm volatile
 800515a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800515e:	f383 8811 	msr	BASEPRI, r3
 8005162:	f3bf 8f6f 	isb	sy
 8005166:	f3bf 8f4f 	dsb	sy
 800516a:	60fb      	str	r3, [r7, #12]
}
 800516c:	bf00      	nop
 800516e:	e7fe      	b.n	800516e <vTaskStartScheduler+0x9e>
}
 8005170:	bf00      	nop
 8005172:	3718      	adds	r7, #24
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}
 8005178:	08006848 	.word	0x08006848
 800517c:	080053b9 	.word	0x080053b9
 8005180:	20000dd4 	.word	0x20000dd4
 8005184:	20000dd0 	.word	0x20000dd0
 8005188:	20000dbc 	.word	0x20000dbc
 800518c:	20000db4 	.word	0x20000db4

08005190 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005196:	2300      	movs	r3, #0
 8005198:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800519a:	4b4e      	ldr	r3, [pc, #312]	; (80052d4 <xTaskIncrementTick+0x144>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	f040 808e 	bne.w	80052c0 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80051a4:	4b4c      	ldr	r3, [pc, #304]	; (80052d8 <xTaskIncrementTick+0x148>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	3301      	adds	r3, #1
 80051aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80051ac:	4a4a      	ldr	r2, [pc, #296]	; (80052d8 <xTaskIncrementTick+0x148>)
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d120      	bne.n	80051fa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80051b8:	4b48      	ldr	r3, [pc, #288]	; (80052dc <xTaskIncrementTick+0x14c>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d00a      	beq.n	80051d8 <xTaskIncrementTick+0x48>
	__asm volatile
 80051c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c6:	f383 8811 	msr	BASEPRI, r3
 80051ca:	f3bf 8f6f 	isb	sy
 80051ce:	f3bf 8f4f 	dsb	sy
 80051d2:	603b      	str	r3, [r7, #0]
}
 80051d4:	bf00      	nop
 80051d6:	e7fe      	b.n	80051d6 <xTaskIncrementTick+0x46>
 80051d8:	4b40      	ldr	r3, [pc, #256]	; (80052dc <xTaskIncrementTick+0x14c>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	60fb      	str	r3, [r7, #12]
 80051de:	4b40      	ldr	r3, [pc, #256]	; (80052e0 <xTaskIncrementTick+0x150>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a3e      	ldr	r2, [pc, #248]	; (80052dc <xTaskIncrementTick+0x14c>)
 80051e4:	6013      	str	r3, [r2, #0]
 80051e6:	4a3e      	ldr	r2, [pc, #248]	; (80052e0 <xTaskIncrementTick+0x150>)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6013      	str	r3, [r2, #0]
 80051ec:	4b3d      	ldr	r3, [pc, #244]	; (80052e4 <xTaskIncrementTick+0x154>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	3301      	adds	r3, #1
 80051f2:	4a3c      	ldr	r2, [pc, #240]	; (80052e4 <xTaskIncrementTick+0x154>)
 80051f4:	6013      	str	r3, [r2, #0]
 80051f6:	f000 f96f 	bl	80054d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80051fa:	4b3b      	ldr	r3, [pc, #236]	; (80052e8 <xTaskIncrementTick+0x158>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	693a      	ldr	r2, [r7, #16]
 8005200:	429a      	cmp	r2, r3
 8005202:	d348      	bcc.n	8005296 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005204:	4b35      	ldr	r3, [pc, #212]	; (80052dc <xTaskIncrementTick+0x14c>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d104      	bne.n	8005218 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800520e:	4b36      	ldr	r3, [pc, #216]	; (80052e8 <xTaskIncrementTick+0x158>)
 8005210:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005214:	601a      	str	r2, [r3, #0]
					break;
 8005216:	e03e      	b.n	8005296 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005218:	4b30      	ldr	r3, [pc, #192]	; (80052dc <xTaskIncrementTick+0x14c>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68db      	ldr	r3, [r3, #12]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005228:	693a      	ldr	r2, [r7, #16]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	429a      	cmp	r2, r3
 800522e:	d203      	bcs.n	8005238 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005230:	4a2d      	ldr	r2, [pc, #180]	; (80052e8 <xTaskIncrementTick+0x158>)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005236:	e02e      	b.n	8005296 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	3304      	adds	r3, #4
 800523c:	4618      	mov	r0, r3
 800523e:	f7ff fdd3 	bl	8004de8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005246:	2b00      	cmp	r3, #0
 8005248:	d004      	beq.n	8005254 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	3318      	adds	r3, #24
 800524e:	4618      	mov	r0, r3
 8005250:	f7ff fdca 	bl	8004de8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005258:	2201      	movs	r2, #1
 800525a:	409a      	lsls	r2, r3
 800525c:	4b23      	ldr	r3, [pc, #140]	; (80052ec <xTaskIncrementTick+0x15c>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4313      	orrs	r3, r2
 8005262:	4a22      	ldr	r2, [pc, #136]	; (80052ec <xTaskIncrementTick+0x15c>)
 8005264:	6013      	str	r3, [r2, #0]
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800526a:	4613      	mov	r3, r2
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	4413      	add	r3, r2
 8005270:	009b      	lsls	r3, r3, #2
 8005272:	4a1f      	ldr	r2, [pc, #124]	; (80052f0 <xTaskIncrementTick+0x160>)
 8005274:	441a      	add	r2, r3
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	3304      	adds	r3, #4
 800527a:	4619      	mov	r1, r3
 800527c:	4610      	mov	r0, r2
 800527e:	f7ff fd56 	bl	8004d2e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005286:	4b1b      	ldr	r3, [pc, #108]	; (80052f4 <xTaskIncrementTick+0x164>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528c:	429a      	cmp	r2, r3
 800528e:	d3b9      	bcc.n	8005204 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005290:	2301      	movs	r3, #1
 8005292:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005294:	e7b6      	b.n	8005204 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005296:	4b17      	ldr	r3, [pc, #92]	; (80052f4 <xTaskIncrementTick+0x164>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800529c:	4914      	ldr	r1, [pc, #80]	; (80052f0 <xTaskIncrementTick+0x160>)
 800529e:	4613      	mov	r3, r2
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	4413      	add	r3, r2
 80052a4:	009b      	lsls	r3, r3, #2
 80052a6:	440b      	add	r3, r1
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d901      	bls.n	80052b2 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 80052ae:	2301      	movs	r3, #1
 80052b0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80052b2:	4b11      	ldr	r3, [pc, #68]	; (80052f8 <xTaskIncrementTick+0x168>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d007      	beq.n	80052ca <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 80052ba:	2301      	movs	r3, #1
 80052bc:	617b      	str	r3, [r7, #20]
 80052be:	e004      	b.n	80052ca <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80052c0:	4b0e      	ldr	r3, [pc, #56]	; (80052fc <xTaskIncrementTick+0x16c>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	3301      	adds	r3, #1
 80052c6:	4a0d      	ldr	r2, [pc, #52]	; (80052fc <xTaskIncrementTick+0x16c>)
 80052c8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80052ca:	697b      	ldr	r3, [r7, #20]
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3718      	adds	r7, #24
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	20000dd8 	.word	0x20000dd8
 80052d8:	20000db4 	.word	0x20000db4
 80052dc:	20000d68 	.word	0x20000d68
 80052e0:	20000d6c 	.word	0x20000d6c
 80052e4:	20000dc8 	.word	0x20000dc8
 80052e8:	20000dd0 	.word	0x20000dd0
 80052ec:	20000db8 	.word	0x20000db8
 80052f0:	20000cb4 	.word	0x20000cb4
 80052f4:	20000cb0 	.word	0x20000cb0
 80052f8:	20000dc4 	.word	0x20000dc4
 80052fc:	20000dc0 	.word	0x20000dc0

08005300 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005300:	b480      	push	{r7}
 8005302:	b087      	sub	sp, #28
 8005304:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005306:	4b27      	ldr	r3, [pc, #156]	; (80053a4 <vTaskSwitchContext+0xa4>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d003      	beq.n	8005316 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800530e:	4b26      	ldr	r3, [pc, #152]	; (80053a8 <vTaskSwitchContext+0xa8>)
 8005310:	2201      	movs	r2, #1
 8005312:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005314:	e03f      	b.n	8005396 <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8005316:	4b24      	ldr	r3, [pc, #144]	; (80053a8 <vTaskSwitchContext+0xa8>)
 8005318:	2200      	movs	r2, #0
 800531a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800531c:	4b23      	ldr	r3, [pc, #140]	; (80053ac <vTaskSwitchContext+0xac>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	fab3 f383 	clz	r3, r3
 8005328:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800532a:	7afb      	ldrb	r3, [r7, #11]
 800532c:	f1c3 031f 	rsb	r3, r3, #31
 8005330:	617b      	str	r3, [r7, #20]
 8005332:	491f      	ldr	r1, [pc, #124]	; (80053b0 <vTaskSwitchContext+0xb0>)
 8005334:	697a      	ldr	r2, [r7, #20]
 8005336:	4613      	mov	r3, r2
 8005338:	009b      	lsls	r3, r3, #2
 800533a:	4413      	add	r3, r2
 800533c:	009b      	lsls	r3, r3, #2
 800533e:	440b      	add	r3, r1
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d10a      	bne.n	800535c <vTaskSwitchContext+0x5c>
	__asm volatile
 8005346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800534a:	f383 8811 	msr	BASEPRI, r3
 800534e:	f3bf 8f6f 	isb	sy
 8005352:	f3bf 8f4f 	dsb	sy
 8005356:	607b      	str	r3, [r7, #4]
}
 8005358:	bf00      	nop
 800535a:	e7fe      	b.n	800535a <vTaskSwitchContext+0x5a>
 800535c:	697a      	ldr	r2, [r7, #20]
 800535e:	4613      	mov	r3, r2
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	4413      	add	r3, r2
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	4a12      	ldr	r2, [pc, #72]	; (80053b0 <vTaskSwitchContext+0xb0>)
 8005368:	4413      	add	r3, r2
 800536a:	613b      	str	r3, [r7, #16]
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	685a      	ldr	r2, [r3, #4]
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	605a      	str	r2, [r3, #4]
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	685a      	ldr	r2, [r3, #4]
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	3308      	adds	r3, #8
 800537e:	429a      	cmp	r2, r3
 8005380:	d104      	bne.n	800538c <vTaskSwitchContext+0x8c>
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	685a      	ldr	r2, [r3, #4]
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	605a      	str	r2, [r3, #4]
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	4a08      	ldr	r2, [pc, #32]	; (80053b4 <vTaskSwitchContext+0xb4>)
 8005394:	6013      	str	r3, [r2, #0]
}
 8005396:	bf00      	nop
 8005398:	371c      	adds	r7, #28
 800539a:	46bd      	mov	sp, r7
 800539c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a0:	4770      	bx	lr
 80053a2:	bf00      	nop
 80053a4:	20000dd8 	.word	0x20000dd8
 80053a8:	20000dc4 	.word	0x20000dc4
 80053ac:	20000db8 	.word	0x20000db8
 80053b0:	20000cb4 	.word	0x20000cb4
 80053b4:	20000cb0 	.word	0x20000cb0

080053b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b082      	sub	sp, #8
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80053c0:	f000 f852 	bl	8005468 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80053c4:	4b06      	ldr	r3, [pc, #24]	; (80053e0 <prvIdleTask+0x28>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d9f9      	bls.n	80053c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80053cc:	4b05      	ldr	r3, [pc, #20]	; (80053e4 <prvIdleTask+0x2c>)
 80053ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053d2:	601a      	str	r2, [r3, #0]
 80053d4:	f3bf 8f4f 	dsb	sy
 80053d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80053dc:	e7f0      	b.n	80053c0 <prvIdleTask+0x8>
 80053de:	bf00      	nop
 80053e0:	20000cb4 	.word	0x20000cb4
 80053e4:	e000ed04 	.word	0xe000ed04

080053e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b082      	sub	sp, #8
 80053ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80053ee:	2300      	movs	r3, #0
 80053f0:	607b      	str	r3, [r7, #4]
 80053f2:	e00c      	b.n	800540e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	4613      	mov	r3, r2
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	4413      	add	r3, r2
 80053fc:	009b      	lsls	r3, r3, #2
 80053fe:	4a12      	ldr	r2, [pc, #72]	; (8005448 <prvInitialiseTaskLists+0x60>)
 8005400:	4413      	add	r3, r2
 8005402:	4618      	mov	r0, r3
 8005404:	f7ff fc66 	bl	8004cd4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	3301      	adds	r3, #1
 800540c:	607b      	str	r3, [r7, #4]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2b06      	cmp	r3, #6
 8005412:	d9ef      	bls.n	80053f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005414:	480d      	ldr	r0, [pc, #52]	; (800544c <prvInitialiseTaskLists+0x64>)
 8005416:	f7ff fc5d 	bl	8004cd4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800541a:	480d      	ldr	r0, [pc, #52]	; (8005450 <prvInitialiseTaskLists+0x68>)
 800541c:	f7ff fc5a 	bl	8004cd4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005420:	480c      	ldr	r0, [pc, #48]	; (8005454 <prvInitialiseTaskLists+0x6c>)
 8005422:	f7ff fc57 	bl	8004cd4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005426:	480c      	ldr	r0, [pc, #48]	; (8005458 <prvInitialiseTaskLists+0x70>)
 8005428:	f7ff fc54 	bl	8004cd4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800542c:	480b      	ldr	r0, [pc, #44]	; (800545c <prvInitialiseTaskLists+0x74>)
 800542e:	f7ff fc51 	bl	8004cd4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005432:	4b0b      	ldr	r3, [pc, #44]	; (8005460 <prvInitialiseTaskLists+0x78>)
 8005434:	4a05      	ldr	r2, [pc, #20]	; (800544c <prvInitialiseTaskLists+0x64>)
 8005436:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005438:	4b0a      	ldr	r3, [pc, #40]	; (8005464 <prvInitialiseTaskLists+0x7c>)
 800543a:	4a05      	ldr	r2, [pc, #20]	; (8005450 <prvInitialiseTaskLists+0x68>)
 800543c:	601a      	str	r2, [r3, #0]
}
 800543e:	bf00      	nop
 8005440:	3708      	adds	r7, #8
 8005442:	46bd      	mov	sp, r7
 8005444:	bd80      	pop	{r7, pc}
 8005446:	bf00      	nop
 8005448:	20000cb4 	.word	0x20000cb4
 800544c:	20000d40 	.word	0x20000d40
 8005450:	20000d54 	.word	0x20000d54
 8005454:	20000d70 	.word	0x20000d70
 8005458:	20000d84 	.word	0x20000d84
 800545c:	20000d9c 	.word	0x20000d9c
 8005460:	20000d68 	.word	0x20000d68
 8005464:	20000d6c 	.word	0x20000d6c

08005468 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800546e:	e019      	b.n	80054a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005470:	f000 fb18 	bl	8005aa4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005474:	4b10      	ldr	r3, [pc, #64]	; (80054b8 <prvCheckTasksWaitingTermination+0x50>)
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	3304      	adds	r3, #4
 8005480:	4618      	mov	r0, r3
 8005482:	f7ff fcb1 	bl	8004de8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005486:	4b0d      	ldr	r3, [pc, #52]	; (80054bc <prvCheckTasksWaitingTermination+0x54>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	3b01      	subs	r3, #1
 800548c:	4a0b      	ldr	r2, [pc, #44]	; (80054bc <prvCheckTasksWaitingTermination+0x54>)
 800548e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005490:	4b0b      	ldr	r3, [pc, #44]	; (80054c0 <prvCheckTasksWaitingTermination+0x58>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	3b01      	subs	r3, #1
 8005496:	4a0a      	ldr	r2, [pc, #40]	; (80054c0 <prvCheckTasksWaitingTermination+0x58>)
 8005498:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800549a:	f000 fb33 	bl	8005b04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800549e:	6878      	ldr	r0, [r7, #4]
 80054a0:	f000 f810 	bl	80054c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80054a4:	4b06      	ldr	r3, [pc, #24]	; (80054c0 <prvCheckTasksWaitingTermination+0x58>)
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d1e1      	bne.n	8005470 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80054ac:	bf00      	nop
 80054ae:	bf00      	nop
 80054b0:	3708      	adds	r7, #8
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	20000d84 	.word	0x20000d84
 80054bc:	20000db0 	.word	0x20000db0
 80054c0:	20000d98 	.word	0x20000d98

080054c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80054cc:	bf00      	nop
 80054ce:	370c      	adds	r7, #12
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80054d8:	b480      	push	{r7}
 80054da:	b083      	sub	sp, #12
 80054dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054de:	4b0c      	ldr	r3, [pc, #48]	; (8005510 <prvResetNextTaskUnblockTime+0x38>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d104      	bne.n	80054f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80054e8:	4b0a      	ldr	r3, [pc, #40]	; (8005514 <prvResetNextTaskUnblockTime+0x3c>)
 80054ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80054ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80054f0:	e008      	b.n	8005504 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054f2:	4b07      	ldr	r3, [pc, #28]	; (8005510 <prvResetNextTaskUnblockTime+0x38>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	4a04      	ldr	r2, [pc, #16]	; (8005514 <prvResetNextTaskUnblockTime+0x3c>)
 8005502:	6013      	str	r3, [r2, #0]
}
 8005504:	bf00      	nop
 8005506:	370c      	adds	r7, #12
 8005508:	46bd      	mov	sp, r7
 800550a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550e:	4770      	bx	lr
 8005510:	20000d68 	.word	0x20000d68
 8005514:	20000dd0 	.word	0x20000dd0

08005518 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8005518:	b580      	push	{r7, lr}
 800551a:	b086      	sub	sp, #24
 800551c:	af00      	add	r7, sp, #0
 800551e:	60f8      	str	r0, [r7, #12]
 8005520:	60b9      	str	r1, [r7, #8]
 8005522:	607a      	str	r2, [r7, #4]
 8005524:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8005526:	f000 fabd 	bl	8005aa4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800552a:	4b26      	ldr	r3, [pc, #152]	; (80055c4 <xTaskNotifyWait+0xac>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005532:	b2db      	uxtb	r3, r3
 8005534:	2b02      	cmp	r3, #2
 8005536:	d01a      	beq.n	800556e <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8005538:	4b22      	ldr	r3, [pc, #136]	; (80055c4 <xTaskNotifyWait+0xac>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	43d2      	mvns	r2, r2
 8005542:	400a      	ands	r2, r1
 8005544:	64da      	str	r2, [r3, #76]	; 0x4c

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8005546:	4b1f      	ldr	r3, [pc, #124]	; (80055c4 <xTaskNotifyWait+0xac>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

				if( xTicksToWait > ( TickType_t ) 0 )
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00b      	beq.n	800556e <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005556:	2101      	movs	r1, #1
 8005558:	6838      	ldr	r0, [r7, #0]
 800555a:	f000 f911 	bl	8005780 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800555e:	4b1a      	ldr	r3, [pc, #104]	; (80055c8 <xTaskNotifyWait+0xb0>)
 8005560:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005564:	601a      	str	r2, [r3, #0]
 8005566:	f3bf 8f4f 	dsb	sy
 800556a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800556e:	f000 fac9 	bl	8005b04 <vPortExitCritical>

		taskENTER_CRITICAL();
 8005572:	f000 fa97 	bl	8005aa4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d004      	beq.n	8005586 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800557c:	4b11      	ldr	r3, [pc, #68]	; (80055c4 <xTaskNotifyWait+0xac>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8005586:	4b0f      	ldr	r3, [pc, #60]	; (80055c4 <xTaskNotifyWait+0xac>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800558e:	b2db      	uxtb	r3, r3
 8005590:	2b02      	cmp	r3, #2
 8005592:	d002      	beq.n	800559a <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8005594:	2300      	movs	r3, #0
 8005596:	617b      	str	r3, [r7, #20]
 8005598:	e008      	b.n	80055ac <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800559a:	4b0a      	ldr	r3, [pc, #40]	; (80055c4 <xTaskNotifyWait+0xac>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80055a0:	68ba      	ldr	r2, [r7, #8]
 80055a2:	43d2      	mvns	r2, r2
 80055a4:	400a      	ands	r2, r1
 80055a6:	64da      	str	r2, [r3, #76]	; 0x4c
				xReturn = pdTRUE;
 80055a8:	2301      	movs	r3, #1
 80055aa:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80055ac:	4b05      	ldr	r3, [pc, #20]	; (80055c4 <xTaskNotifyWait+0xac>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		}
		taskEXIT_CRITICAL();
 80055b6:	f000 faa5 	bl	8005b04 <vPortExitCritical>

		return xReturn;
 80055ba:	697b      	ldr	r3, [r7, #20]
	}
 80055bc:	4618      	mov	r0, r3
 80055be:	3718      	adds	r7, #24
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	20000cb0 	.word	0x20000cb0
 80055c8:	e000ed04 	.word	0xe000ed04

080055cc <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b08e      	sub	sp, #56	; 0x38
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	60b9      	str	r1, [r7, #8]
 80055d6:	603b      	str	r3, [r7, #0]
 80055d8:	4613      	mov	r3, r2
 80055da:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80055dc:	2301      	movs	r3, #1
 80055de:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d10a      	bne.n	80055fc <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 80055e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ea:	f383 8811 	msr	BASEPRI, r3
 80055ee:	f3bf 8f6f 	isb	sy
 80055f2:	f3bf 8f4f 	dsb	sy
 80055f6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80055f8:	bf00      	nop
 80055fa:	e7fe      	b.n	80055fa <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80055fc:	f000 fb34 	bl	8005c68 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	633b      	str	r3, [r7, #48]	; 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005604:	f3ef 8211 	mrs	r2, BASEPRI
 8005608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560c:	f383 8811 	msr	BASEPRI, r3
 8005610:	f3bf 8f6f 	isb	sy
 8005614:	f3bf 8f4f 	dsb	sy
 8005618:	623a      	str	r2, [r7, #32]
 800561a:	61fb      	str	r3, [r7, #28]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800561c:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800561e:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d003      	beq.n	800562e <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8005626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005628:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800562e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005630:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005634:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8005638:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800563a:	2202      	movs	r2, #2
 800563c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8005640:	79fb      	ldrb	r3, [r7, #7]
 8005642:	2b04      	cmp	r3, #4
 8005644:	d828      	bhi.n	8005698 <xTaskGenericNotifyFromISR+0xcc>
 8005646:	a201      	add	r2, pc, #4	; (adr r2, 800564c <xTaskGenericNotifyFromISR+0x80>)
 8005648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800564c:	080056b9 	.word	0x080056b9
 8005650:	08005661 	.word	0x08005661
 8005654:	0800566f 	.word	0x0800566f
 8005658:	0800567b 	.word	0x0800567b
 800565c:	08005683 	.word	0x08005683
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005662:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005664:	68bb      	ldr	r3, [r7, #8]
 8005666:	431a      	orrs	r2, r3
 8005668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800566c:	e027      	b.n	80056be <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800566e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005672:	1c5a      	adds	r2, r3, #1
 8005674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005676:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8005678:	e021      	b.n	80056be <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800567a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567c:	68ba      	ldr	r2, [r7, #8]
 800567e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8005680:	e01d      	b.n	80056be <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005682:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005686:	2b02      	cmp	r3, #2
 8005688:	d003      	beq.n	8005692 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800568a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800568c:	68ba      	ldr	r2, [r7, #8]
 800568e:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8005690:	e015      	b.n	80056be <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 8005692:	2300      	movs	r3, #0
 8005694:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8005696:	e012      	b.n	80056be <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8005698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800569c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056a0:	d00c      	beq.n	80056bc <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 80056a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a6:	f383 8811 	msr	BASEPRI, r3
 80056aa:	f3bf 8f6f 	isb	sy
 80056ae:	f3bf 8f4f 	dsb	sy
 80056b2:	61bb      	str	r3, [r7, #24]
}
 80056b4:	bf00      	nop
 80056b6:	e7fe      	b.n	80056b6 <xTaskGenericNotifyFromISR+0xea>
					break;
 80056b8:	bf00      	nop
 80056ba:	e000      	b.n	80056be <xTaskGenericNotifyFromISR+0xf2>
					break;
 80056bc:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80056be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d145      	bne.n	8005752 <xTaskGenericNotifyFromISR+0x186>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80056c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00a      	beq.n	80056e4 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 80056ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d2:	f383 8811 	msr	BASEPRI, r3
 80056d6:	f3bf 8f6f 	isb	sy
 80056da:	f3bf 8f4f 	dsb	sy
 80056de:	617b      	str	r3, [r7, #20]
}
 80056e0:	bf00      	nop
 80056e2:	e7fe      	b.n	80056e2 <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056e4:	4b20      	ldr	r3, [pc, #128]	; (8005768 <xTaskGenericNotifyFromISR+0x19c>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d11c      	bne.n	8005726 <xTaskGenericNotifyFromISR+0x15a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ee:	3304      	adds	r3, #4
 80056f0:	4618      	mov	r0, r3
 80056f2:	f7ff fb79 	bl	8004de8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80056f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fa:	2201      	movs	r2, #1
 80056fc:	409a      	lsls	r2, r3
 80056fe:	4b1b      	ldr	r3, [pc, #108]	; (800576c <xTaskGenericNotifyFromISR+0x1a0>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4313      	orrs	r3, r2
 8005704:	4a19      	ldr	r2, [pc, #100]	; (800576c <xTaskGenericNotifyFromISR+0x1a0>)
 8005706:	6013      	str	r3, [r2, #0]
 8005708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800570a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800570c:	4613      	mov	r3, r2
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	4413      	add	r3, r2
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	4a16      	ldr	r2, [pc, #88]	; (8005770 <xTaskGenericNotifyFromISR+0x1a4>)
 8005716:	441a      	add	r2, r3
 8005718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571a:	3304      	adds	r3, #4
 800571c:	4619      	mov	r1, r3
 800571e:	4610      	mov	r0, r2
 8005720:	f7ff fb05 	bl	8004d2e <vListInsertEnd>
 8005724:	e005      	b.n	8005732 <xTaskGenericNotifyFromISR+0x166>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005728:	3318      	adds	r3, #24
 800572a:	4619      	mov	r1, r3
 800572c:	4811      	ldr	r0, [pc, #68]	; (8005774 <xTaskGenericNotifyFromISR+0x1a8>)
 800572e:	f7ff fafe 	bl	8004d2e <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005736:	4b10      	ldr	r3, [pc, #64]	; (8005778 <xTaskGenericNotifyFromISR+0x1ac>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573c:	429a      	cmp	r2, r3
 800573e:	d908      	bls.n	8005752 <xTaskGenericNotifyFromISR+0x186>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8005740:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005742:	2b00      	cmp	r3, #0
 8005744:	d002      	beq.n	800574c <xTaskGenericNotifyFromISR+0x180>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8005746:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005748:	2201      	movs	r2, #1
 800574a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800574c:	4b0b      	ldr	r3, [pc, #44]	; (800577c <xTaskGenericNotifyFromISR+0x1b0>)
 800574e:	2201      	movs	r2, #1
 8005750:	601a      	str	r2, [r3, #0]
 8005752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005754:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800575c:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800575e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8005760:	4618      	mov	r0, r3
 8005762:	3738      	adds	r7, #56	; 0x38
 8005764:	46bd      	mov	sp, r7
 8005766:	bd80      	pop	{r7, pc}
 8005768:	20000dd8 	.word	0x20000dd8
 800576c:	20000db8 	.word	0x20000db8
 8005770:	20000cb4 	.word	0x20000cb4
 8005774:	20000d70 	.word	0x20000d70
 8005778:	20000cb0 	.word	0x20000cb0
 800577c:	20000dc4 	.word	0x20000dc4

08005780 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
 8005788:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800578a:	4b29      	ldr	r3, [pc, #164]	; (8005830 <prvAddCurrentTaskToDelayedList+0xb0>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005790:	4b28      	ldr	r3, [pc, #160]	; (8005834 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	3304      	adds	r3, #4
 8005796:	4618      	mov	r0, r3
 8005798:	f7ff fb26 	bl	8004de8 <uxListRemove>
 800579c:	4603      	mov	r3, r0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d10b      	bne.n	80057ba <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80057a2:	4b24      	ldr	r3, [pc, #144]	; (8005834 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a8:	2201      	movs	r2, #1
 80057aa:	fa02 f303 	lsl.w	r3, r2, r3
 80057ae:	43da      	mvns	r2, r3
 80057b0:	4b21      	ldr	r3, [pc, #132]	; (8005838 <prvAddCurrentTaskToDelayedList+0xb8>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4013      	ands	r3, r2
 80057b6:	4a20      	ldr	r2, [pc, #128]	; (8005838 <prvAddCurrentTaskToDelayedList+0xb8>)
 80057b8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057c0:	d10a      	bne.n	80057d8 <prvAddCurrentTaskToDelayedList+0x58>
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d007      	beq.n	80057d8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057c8:	4b1a      	ldr	r3, [pc, #104]	; (8005834 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	3304      	adds	r3, #4
 80057ce:	4619      	mov	r1, r3
 80057d0:	481a      	ldr	r0, [pc, #104]	; (800583c <prvAddCurrentTaskToDelayedList+0xbc>)
 80057d2:	f7ff faac 	bl	8004d2e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80057d6:	e026      	b.n	8005826 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4413      	add	r3, r2
 80057de:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80057e0:	4b14      	ldr	r3, [pc, #80]	; (8005834 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68ba      	ldr	r2, [r7, #8]
 80057e6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80057e8:	68ba      	ldr	r2, [r7, #8]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d209      	bcs.n	8005804 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057f0:	4b13      	ldr	r3, [pc, #76]	; (8005840 <prvAddCurrentTaskToDelayedList+0xc0>)
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	4b0f      	ldr	r3, [pc, #60]	; (8005834 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	3304      	adds	r3, #4
 80057fa:	4619      	mov	r1, r3
 80057fc:	4610      	mov	r0, r2
 80057fe:	f7ff faba 	bl	8004d76 <vListInsert>
}
 8005802:	e010      	b.n	8005826 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005804:	4b0f      	ldr	r3, [pc, #60]	; (8005844 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	4b0a      	ldr	r3, [pc, #40]	; (8005834 <prvAddCurrentTaskToDelayedList+0xb4>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	3304      	adds	r3, #4
 800580e:	4619      	mov	r1, r3
 8005810:	4610      	mov	r0, r2
 8005812:	f7ff fab0 	bl	8004d76 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005816:	4b0c      	ldr	r3, [pc, #48]	; (8005848 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	68ba      	ldr	r2, [r7, #8]
 800581c:	429a      	cmp	r2, r3
 800581e:	d202      	bcs.n	8005826 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005820:	4a09      	ldr	r2, [pc, #36]	; (8005848 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005822:	68bb      	ldr	r3, [r7, #8]
 8005824:	6013      	str	r3, [r2, #0]
}
 8005826:	bf00      	nop
 8005828:	3710      	adds	r7, #16
 800582a:	46bd      	mov	sp, r7
 800582c:	bd80      	pop	{r7, pc}
 800582e:	bf00      	nop
 8005830:	20000db4 	.word	0x20000db4
 8005834:	20000cb0 	.word	0x20000cb0
 8005838:	20000db8 	.word	0x20000db8
 800583c:	20000d9c 	.word	0x20000d9c
 8005840:	20000d6c 	.word	0x20000d6c
 8005844:	20000d68 	.word	0x20000d68
 8005848:	20000dd0 	.word	0x20000dd0

0800584c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	60f8      	str	r0, [r7, #12]
 8005854:	60b9      	str	r1, [r7, #8]
 8005856:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	3b04      	subs	r3, #4
 800585c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005864:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	3b04      	subs	r3, #4
 800586a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800586c:	68bb      	ldr	r3, [r7, #8]
 800586e:	f023 0201 	bic.w	r2, r3, #1
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	3b04      	subs	r3, #4
 800587a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800587c:	4a0c      	ldr	r2, [pc, #48]	; (80058b0 <pxPortInitialiseStack+0x64>)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	3b14      	subs	r3, #20
 8005886:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005888:	687a      	ldr	r2, [r7, #4]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	3b04      	subs	r3, #4
 8005892:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f06f 0202 	mvn.w	r2, #2
 800589a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	3b20      	subs	r3, #32
 80058a0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80058a2:	68fb      	ldr	r3, [r7, #12]
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3714      	adds	r7, #20
 80058a8:	46bd      	mov	sp, r7
 80058aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ae:	4770      	bx	lr
 80058b0:	080058b5 	.word	0x080058b5

080058b4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80058b4:	b480      	push	{r7}
 80058b6:	b085      	sub	sp, #20
 80058b8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80058ba:	2300      	movs	r3, #0
 80058bc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80058be:	4b12      	ldr	r3, [pc, #72]	; (8005908 <prvTaskExitError+0x54>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058c6:	d00a      	beq.n	80058de <prvTaskExitError+0x2a>
	__asm volatile
 80058c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058cc:	f383 8811 	msr	BASEPRI, r3
 80058d0:	f3bf 8f6f 	isb	sy
 80058d4:	f3bf 8f4f 	dsb	sy
 80058d8:	60fb      	str	r3, [r7, #12]
}
 80058da:	bf00      	nop
 80058dc:	e7fe      	b.n	80058dc <prvTaskExitError+0x28>
	__asm volatile
 80058de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e2:	f383 8811 	msr	BASEPRI, r3
 80058e6:	f3bf 8f6f 	isb	sy
 80058ea:	f3bf 8f4f 	dsb	sy
 80058ee:	60bb      	str	r3, [r7, #8]
}
 80058f0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80058f2:	bf00      	nop
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d0fc      	beq.n	80058f4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80058fa:	bf00      	nop
 80058fc:	bf00      	nop
 80058fe:	3714      	adds	r7, #20
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr
 8005908:	2000000c 	.word	0x2000000c
 800590c:	00000000 	.word	0x00000000

08005910 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005910:	4b07      	ldr	r3, [pc, #28]	; (8005930 <pxCurrentTCBConst2>)
 8005912:	6819      	ldr	r1, [r3, #0]
 8005914:	6808      	ldr	r0, [r1, #0]
 8005916:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800591a:	f380 8809 	msr	PSP, r0
 800591e:	f3bf 8f6f 	isb	sy
 8005922:	f04f 0000 	mov.w	r0, #0
 8005926:	f380 8811 	msr	BASEPRI, r0
 800592a:	4770      	bx	lr
 800592c:	f3af 8000 	nop.w

08005930 <pxCurrentTCBConst2>:
 8005930:	20000cb0 	.word	0x20000cb0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005934:	bf00      	nop
 8005936:	bf00      	nop

08005938 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005938:	4808      	ldr	r0, [pc, #32]	; (800595c <prvPortStartFirstTask+0x24>)
 800593a:	6800      	ldr	r0, [r0, #0]
 800593c:	6800      	ldr	r0, [r0, #0]
 800593e:	f380 8808 	msr	MSP, r0
 8005942:	f04f 0000 	mov.w	r0, #0
 8005946:	f380 8814 	msr	CONTROL, r0
 800594a:	b662      	cpsie	i
 800594c:	b661      	cpsie	f
 800594e:	f3bf 8f4f 	dsb	sy
 8005952:	f3bf 8f6f 	isb	sy
 8005956:	df00      	svc	0
 8005958:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800595a:	bf00      	nop
 800595c:	e000ed08 	.word	0xe000ed08

08005960 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b086      	sub	sp, #24
 8005964:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005966:	4b46      	ldr	r3, [pc, #280]	; (8005a80 <xPortStartScheduler+0x120>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a46      	ldr	r2, [pc, #280]	; (8005a84 <xPortStartScheduler+0x124>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d10a      	bne.n	8005986 <xPortStartScheduler+0x26>
	__asm volatile
 8005970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005974:	f383 8811 	msr	BASEPRI, r3
 8005978:	f3bf 8f6f 	isb	sy
 800597c:	f3bf 8f4f 	dsb	sy
 8005980:	613b      	str	r3, [r7, #16]
}
 8005982:	bf00      	nop
 8005984:	e7fe      	b.n	8005984 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005986:	4b3e      	ldr	r3, [pc, #248]	; (8005a80 <xPortStartScheduler+0x120>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a3f      	ldr	r2, [pc, #252]	; (8005a88 <xPortStartScheduler+0x128>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d10a      	bne.n	80059a6 <xPortStartScheduler+0x46>
	__asm volatile
 8005990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005994:	f383 8811 	msr	BASEPRI, r3
 8005998:	f3bf 8f6f 	isb	sy
 800599c:	f3bf 8f4f 	dsb	sy
 80059a0:	60fb      	str	r3, [r7, #12]
}
 80059a2:	bf00      	nop
 80059a4:	e7fe      	b.n	80059a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80059a6:	4b39      	ldr	r3, [pc, #228]	; (8005a8c <xPortStartScheduler+0x12c>)
 80059a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	22ff      	movs	r2, #255	; 0xff
 80059b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80059c0:	78fb      	ldrb	r3, [r7, #3]
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80059c8:	b2da      	uxtb	r2, r3
 80059ca:	4b31      	ldr	r3, [pc, #196]	; (8005a90 <xPortStartScheduler+0x130>)
 80059cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80059ce:	4b31      	ldr	r3, [pc, #196]	; (8005a94 <xPortStartScheduler+0x134>)
 80059d0:	2207      	movs	r2, #7
 80059d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80059d4:	e009      	b.n	80059ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80059d6:	4b2f      	ldr	r3, [pc, #188]	; (8005a94 <xPortStartScheduler+0x134>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	3b01      	subs	r3, #1
 80059dc:	4a2d      	ldr	r2, [pc, #180]	; (8005a94 <xPortStartScheduler+0x134>)
 80059de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80059e0:	78fb      	ldrb	r3, [r7, #3]
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	005b      	lsls	r3, r3, #1
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80059ea:	78fb      	ldrb	r3, [r7, #3]
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059f2:	2b80      	cmp	r3, #128	; 0x80
 80059f4:	d0ef      	beq.n	80059d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80059f6:	4b27      	ldr	r3, [pc, #156]	; (8005a94 <xPortStartScheduler+0x134>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f1c3 0307 	rsb	r3, r3, #7
 80059fe:	2b04      	cmp	r3, #4
 8005a00:	d00a      	beq.n	8005a18 <xPortStartScheduler+0xb8>
	__asm volatile
 8005a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a06:	f383 8811 	msr	BASEPRI, r3
 8005a0a:	f3bf 8f6f 	isb	sy
 8005a0e:	f3bf 8f4f 	dsb	sy
 8005a12:	60bb      	str	r3, [r7, #8]
}
 8005a14:	bf00      	nop
 8005a16:	e7fe      	b.n	8005a16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005a18:	4b1e      	ldr	r3, [pc, #120]	; (8005a94 <xPortStartScheduler+0x134>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	021b      	lsls	r3, r3, #8
 8005a1e:	4a1d      	ldr	r2, [pc, #116]	; (8005a94 <xPortStartScheduler+0x134>)
 8005a20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005a22:	4b1c      	ldr	r3, [pc, #112]	; (8005a94 <xPortStartScheduler+0x134>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a2a:	4a1a      	ldr	r2, [pc, #104]	; (8005a94 <xPortStartScheduler+0x134>)
 8005a2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	b2da      	uxtb	r2, r3
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005a36:	4b18      	ldr	r3, [pc, #96]	; (8005a98 <xPortStartScheduler+0x138>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a17      	ldr	r2, [pc, #92]	; (8005a98 <xPortStartScheduler+0x138>)
 8005a3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005a40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005a42:	4b15      	ldr	r3, [pc, #84]	; (8005a98 <xPortStartScheduler+0x138>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a14      	ldr	r2, [pc, #80]	; (8005a98 <xPortStartScheduler+0x138>)
 8005a48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005a4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005a4e:	f000 f8dd 	bl	8005c0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005a52:	4b12      	ldr	r3, [pc, #72]	; (8005a9c <xPortStartScheduler+0x13c>)
 8005a54:	2200      	movs	r2, #0
 8005a56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005a58:	f000 f8fc 	bl	8005c54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005a5c:	4b10      	ldr	r3, [pc, #64]	; (8005aa0 <xPortStartScheduler+0x140>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a0f      	ldr	r2, [pc, #60]	; (8005aa0 <xPortStartScheduler+0x140>)
 8005a62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005a66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005a68:	f7ff ff66 	bl	8005938 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005a6c:	f7ff fc48 	bl	8005300 <vTaskSwitchContext>
	prvTaskExitError();
 8005a70:	f7ff ff20 	bl	80058b4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3718      	adds	r7, #24
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	e000ed00 	.word	0xe000ed00
 8005a84:	410fc271 	.word	0x410fc271
 8005a88:	410fc270 	.word	0x410fc270
 8005a8c:	e000e400 	.word	0xe000e400
 8005a90:	20000ddc 	.word	0x20000ddc
 8005a94:	20000de0 	.word	0x20000de0
 8005a98:	e000ed20 	.word	0xe000ed20
 8005a9c:	2000000c 	.word	0x2000000c
 8005aa0:	e000ef34 	.word	0xe000ef34

08005aa4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
	__asm volatile
 8005aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aae:	f383 8811 	msr	BASEPRI, r3
 8005ab2:	f3bf 8f6f 	isb	sy
 8005ab6:	f3bf 8f4f 	dsb	sy
 8005aba:	607b      	str	r3, [r7, #4]
}
 8005abc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005abe:	4b0f      	ldr	r3, [pc, #60]	; (8005afc <vPortEnterCritical+0x58>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	4a0d      	ldr	r2, [pc, #52]	; (8005afc <vPortEnterCritical+0x58>)
 8005ac6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005ac8:	4b0c      	ldr	r3, [pc, #48]	; (8005afc <vPortEnterCritical+0x58>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d10f      	bne.n	8005af0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005ad0:	4b0b      	ldr	r3, [pc, #44]	; (8005b00 <vPortEnterCritical+0x5c>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00a      	beq.n	8005af0 <vPortEnterCritical+0x4c>
	__asm volatile
 8005ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ade:	f383 8811 	msr	BASEPRI, r3
 8005ae2:	f3bf 8f6f 	isb	sy
 8005ae6:	f3bf 8f4f 	dsb	sy
 8005aea:	603b      	str	r3, [r7, #0]
}
 8005aec:	bf00      	nop
 8005aee:	e7fe      	b.n	8005aee <vPortEnterCritical+0x4a>
	}
}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr
 8005afc:	2000000c 	.word	0x2000000c
 8005b00:	e000ed04 	.word	0xe000ed04

08005b04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005b0a:	4b12      	ldr	r3, [pc, #72]	; (8005b54 <vPortExitCritical+0x50>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d10a      	bne.n	8005b28 <vPortExitCritical+0x24>
	__asm volatile
 8005b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b16:	f383 8811 	msr	BASEPRI, r3
 8005b1a:	f3bf 8f6f 	isb	sy
 8005b1e:	f3bf 8f4f 	dsb	sy
 8005b22:	607b      	str	r3, [r7, #4]
}
 8005b24:	bf00      	nop
 8005b26:	e7fe      	b.n	8005b26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005b28:	4b0a      	ldr	r3, [pc, #40]	; (8005b54 <vPortExitCritical+0x50>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	3b01      	subs	r3, #1
 8005b2e:	4a09      	ldr	r2, [pc, #36]	; (8005b54 <vPortExitCritical+0x50>)
 8005b30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005b32:	4b08      	ldr	r3, [pc, #32]	; (8005b54 <vPortExitCritical+0x50>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d105      	bne.n	8005b46 <vPortExitCritical+0x42>
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	f383 8811 	msr	BASEPRI, r3
}
 8005b44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005b46:	bf00      	nop
 8005b48:	370c      	adds	r7, #12
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	2000000c 	.word	0x2000000c
	...

08005b60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005b60:	f3ef 8009 	mrs	r0, PSP
 8005b64:	f3bf 8f6f 	isb	sy
 8005b68:	4b15      	ldr	r3, [pc, #84]	; (8005bc0 <pxCurrentTCBConst>)
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	f01e 0f10 	tst.w	lr, #16
 8005b70:	bf08      	it	eq
 8005b72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005b76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b7a:	6010      	str	r0, [r2, #0]
 8005b7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005b80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005b84:	f380 8811 	msr	BASEPRI, r0
 8005b88:	f3bf 8f4f 	dsb	sy
 8005b8c:	f3bf 8f6f 	isb	sy
 8005b90:	f7ff fbb6 	bl	8005300 <vTaskSwitchContext>
 8005b94:	f04f 0000 	mov.w	r0, #0
 8005b98:	f380 8811 	msr	BASEPRI, r0
 8005b9c:	bc09      	pop	{r0, r3}
 8005b9e:	6819      	ldr	r1, [r3, #0]
 8005ba0:	6808      	ldr	r0, [r1, #0]
 8005ba2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ba6:	f01e 0f10 	tst.w	lr, #16
 8005baa:	bf08      	it	eq
 8005bac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005bb0:	f380 8809 	msr	PSP, r0
 8005bb4:	f3bf 8f6f 	isb	sy
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	f3af 8000 	nop.w

08005bc0 <pxCurrentTCBConst>:
 8005bc0:	20000cb0 	.word	0x20000cb0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005bc4:	bf00      	nop
 8005bc6:	bf00      	nop

08005bc8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
	__asm volatile
 8005bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd2:	f383 8811 	msr	BASEPRI, r3
 8005bd6:	f3bf 8f6f 	isb	sy
 8005bda:	f3bf 8f4f 	dsb	sy
 8005bde:	607b      	str	r3, [r7, #4]
}
 8005be0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005be2:	f7ff fad5 	bl	8005190 <xTaskIncrementTick>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d003      	beq.n	8005bf4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005bec:	4b06      	ldr	r3, [pc, #24]	; (8005c08 <SysTick_Handler+0x40>)
 8005bee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bf2:	601a      	str	r2, [r3, #0]
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	f383 8811 	msr	BASEPRI, r3
}
 8005bfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005c00:	bf00      	nop
 8005c02:	3708      	adds	r7, #8
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	e000ed04 	.word	0xe000ed04

08005c0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005c10:	4b0b      	ldr	r3, [pc, #44]	; (8005c40 <vPortSetupTimerInterrupt+0x34>)
 8005c12:	2200      	movs	r2, #0
 8005c14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005c16:	4b0b      	ldr	r3, [pc, #44]	; (8005c44 <vPortSetupTimerInterrupt+0x38>)
 8005c18:	2200      	movs	r2, #0
 8005c1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005c1c:	4b0a      	ldr	r3, [pc, #40]	; (8005c48 <vPortSetupTimerInterrupt+0x3c>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a0a      	ldr	r2, [pc, #40]	; (8005c4c <vPortSetupTimerInterrupt+0x40>)
 8005c22:	fba2 2303 	umull	r2, r3, r2, r3
 8005c26:	099b      	lsrs	r3, r3, #6
 8005c28:	4a09      	ldr	r2, [pc, #36]	; (8005c50 <vPortSetupTimerInterrupt+0x44>)
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005c2e:	4b04      	ldr	r3, [pc, #16]	; (8005c40 <vPortSetupTimerInterrupt+0x34>)
 8005c30:	2207      	movs	r2, #7
 8005c32:	601a      	str	r2, [r3, #0]
}
 8005c34:	bf00      	nop
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	e000e010 	.word	0xe000e010
 8005c44:	e000e018 	.word	0xe000e018
 8005c48:	20000000 	.word	0x20000000
 8005c4c:	10624dd3 	.word	0x10624dd3
 8005c50:	e000e014 	.word	0xe000e014

08005c54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005c54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005c64 <vPortEnableVFP+0x10>
 8005c58:	6801      	ldr	r1, [r0, #0]
 8005c5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005c5e:	6001      	str	r1, [r0, #0]
 8005c60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005c62:	bf00      	nop
 8005c64:	e000ed88 	.word	0xe000ed88

08005c68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005c68:	b480      	push	{r7}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005c6e:	f3ef 8305 	mrs	r3, IPSR
 8005c72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2b0f      	cmp	r3, #15
 8005c78:	d914      	bls.n	8005ca4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005c7a:	4a17      	ldr	r2, [pc, #92]	; (8005cd8 <vPortValidateInterruptPriority+0x70>)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	4413      	add	r3, r2
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005c84:	4b15      	ldr	r3, [pc, #84]	; (8005cdc <vPortValidateInterruptPriority+0x74>)
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	7afa      	ldrb	r2, [r7, #11]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d20a      	bcs.n	8005ca4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c92:	f383 8811 	msr	BASEPRI, r3
 8005c96:	f3bf 8f6f 	isb	sy
 8005c9a:	f3bf 8f4f 	dsb	sy
 8005c9e:	607b      	str	r3, [r7, #4]
}
 8005ca0:	bf00      	nop
 8005ca2:	e7fe      	b.n	8005ca2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005ca4:	4b0e      	ldr	r3, [pc, #56]	; (8005ce0 <vPortValidateInterruptPriority+0x78>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005cac:	4b0d      	ldr	r3, [pc, #52]	; (8005ce4 <vPortValidateInterruptPriority+0x7c>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d90a      	bls.n	8005cca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb8:	f383 8811 	msr	BASEPRI, r3
 8005cbc:	f3bf 8f6f 	isb	sy
 8005cc0:	f3bf 8f4f 	dsb	sy
 8005cc4:	603b      	str	r3, [r7, #0]
}
 8005cc6:	bf00      	nop
 8005cc8:	e7fe      	b.n	8005cc8 <vPortValidateInterruptPriority+0x60>
	}
 8005cca:	bf00      	nop
 8005ccc:	3714      	adds	r7, #20
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	e000e3f0 	.word	0xe000e3f0
 8005cdc:	20000ddc 	.word	0x20000ddc
 8005ce0:	e000ed0c 	.word	0xe000ed0c
 8005ce4:	20000de0 	.word	0x20000de0

08005ce8 <itm_debug2>:
static inline void itm_debug1(uint32_t f, const char *msg, int32_t v)
{
	if (f & debug_flags) _itm_debug3(f & DBG_ERR, msg, v, 0, 0, 1);
}
static inline void itm_debug2(uint32_t f, const char *msg, int32_t v1, int32_t v2)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b086      	sub	sp, #24
 8005cec:	af02      	add	r7, sp, #8
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	607a      	str	r2, [r7, #4]
 8005cf4:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(f & DBG_ERR, msg, v1, v2, 0, 2);
 8005cf6:	4b0b      	ldr	r3, [pc, #44]	; (8005d24 <itm_debug2+0x3c>)
 8005cf8:	681a      	ldr	r2, [r3, #0]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d00b      	beq.n	8005d1a <itm_debug2+0x32>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	f003 4000 	and.w	r0, r3, #2147483648	; 0x80000000
 8005d08:	2302      	movs	r3, #2
 8005d0a:	9301      	str	r3, [sp, #4]
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	9300      	str	r3, [sp, #0]
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	68b9      	ldr	r1, [r7, #8]
 8005d16:	f000 fb6b 	bl	80063f0 <_itm_debug3>
}
 8005d1a:	bf00      	nop
 8005d1c:	3710      	adds	r7, #16
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
 8005d22:	bf00      	nop
 8005d24:	200000b0 	.word	0x200000b0

08005d28 <itm_debug3>:
static inline void itm_debug3(uint32_t f, const char *msg, int32_t v1, int32_t v2, int32_t v3)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b086      	sub	sp, #24
 8005d2c:	af02      	add	r7, sp, #8
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
 8005d34:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(f & DBG_ERR, msg, v1, v2, v3, 3);
 8005d36:	4b0b      	ldr	r3, [pc, #44]	; (8005d64 <itm_debug3+0x3c>)
 8005d38:	681a      	ldr	r2, [r3, #0]
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	4013      	ands	r3, r2
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d00b      	beq.n	8005d5a <itm_debug3+0x32>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f003 4000 	and.w	r0, r3, #2147483648	; 0x80000000
 8005d48:	2303      	movs	r3, #3
 8005d4a:	9301      	str	r3, [sp, #4]
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	9300      	str	r3, [sp, #0]
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	687a      	ldr	r2, [r7, #4]
 8005d54:	68b9      	ldr	r1, [r7, #8]
 8005d56:	f000 fb4b 	bl	80063f0 <_itm_debug3>
}
 8005d5a:	bf00      	nop
 8005d5c:	3710      	adds	r7, #16
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	200000b0 	.word	0x200000b0

08005d68 <minitel_init_all>:
	(_m)->state = (_newstate);                                   \
} while(0)


void minitel_init_all(void)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	af00      	add	r7, sp, #0
	memset(minitels, 0, sizeof(minitels));
 8005d6c:	2214      	movs	r2, #20
 8005d6e:	2100      	movs	r1, #0
 8005d70:	4802      	ldr	r0, [pc, #8]	; (8005d7c <minitel_init_all+0x14>)
 8005d72:	f000 fd0f 	bl	8006794 <memset>
}
 8005d76:	bf00      	nop
 8005d78:	bd80      	pop	{r7, pc}
 8005d7a:	bf00      	nop
 8005d7c:	20000de4 	.word	0x20000de4

08005d80 <minitel_processtxdone>:

void minitel_processtxdone(int mntidx)
{
 8005d80:	b580      	push	{r7, lr}
 8005d82:	b086      	sub	sp, #24
 8005d84:	af02      	add	r7, sp, #8
 8005d86:	6078      	str	r0, [r7, #4]
	minitel_t *m = &minitels[mntidx];
 8005d88:	687a      	ldr	r2, [r7, #4]
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	4413      	add	r3, r2
 8005d90:	4a0c      	ldr	r2, [pc, #48]	; (8005dc4 <minitel_processtxdone+0x44>)
 8005d92:	4413      	add	r3, r2
 8005d94:	60fb      	str	r3, [r7, #12]
	switch (m->state) {
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	791b      	ldrb	r3, [r3, #4]
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d10e      	bne.n	8005dbc <minitel_processtxdone+0x3c>
	case state_q1_tx:
		SET_STATE(mntidx, m, state_q1);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	791b      	ldrb	r3, [r3, #4]
 8005da2:	461a      	mov	r2, r3
 8005da4:	2302      	movs	r3, #2
 8005da6:	9300      	str	r3, [sp, #0]
 8005da8:	4613      	mov	r3, r2
 8005daa:	687a      	ldr	r2, [r7, #4]
 8005dac:	4906      	ldr	r1, [pc, #24]	; (8005dc8 <minitel_processtxdone+0x48>)
 8005dae:	2008      	movs	r0, #8
 8005db0:	f7ff ffba 	bl	8005d28 <itm_debug3>
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2202      	movs	r2, #2
 8005db8:	711a      	strb	r2, [r3, #4]
		break;
 8005dba:	bf00      	nop
	case state_init:
	case state_q1:
	}
}
 8005dbc:	bf00      	nop
 8005dbe:	3710      	adds	r7, #16
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	20000de4 	.word	0x20000de4
 8005dc8:	08006850 	.word	0x08006850

08005dcc <minitel_processrx>:

static void minitel_process_rxchar(int mntidx, minitel_t *m, uint8_t car);

void minitel_processrx(int mntidx)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b086      	sub	sp, #24
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
	minitel_t *m   = &minitels[mntidx];
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	009b      	lsls	r3, r3, #2
 8005dda:	4413      	add	r3, r2
 8005ddc:	4a10      	ldr	r2, [pc, #64]	; (8005e20 <minitel_processrx+0x54>)
 8005dde:	4413      	add	r3, r2
 8005de0:	617b      	str	r3, [r7, #20]
	serial_t  *ser = &serials[mntidx];
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	4613      	mov	r3, r2
 8005de6:	00db      	lsls	r3, r3, #3
 8005de8:	1a9b      	subs	r3, r3, r2
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	4a0d      	ldr	r2, [pc, #52]	; (8005e24 <minitel_processrx+0x58>)
 8005dee:	4413      	add	r3, r2
 8005df0:	613b      	str	r3, [r7, #16]
	for (;;) {
		uint8_t  c;
		int rc = mqf_read(ser->rxqueue, &c);
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	f107 020b 	add.w	r2, r7, #11
 8005dfa:	4611      	mov	r1, r2
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f000 fc0d 	bl	800661c <mqf_read>
 8005e02:	60f8      	str	r0, [r7, #12]
		if (rc) break;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d106      	bne.n	8005e18 <minitel_processrx+0x4c>
		minitel_process_rxchar(mntidx, m, c);
 8005e0a:	7afb      	ldrb	r3, [r7, #11]
 8005e0c:	461a      	mov	r2, r3
 8005e0e:	6979      	ldr	r1, [r7, #20]
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f000 f809 	bl	8005e28 <minitel_process_rxchar>
	for (;;) {
 8005e16:	e7ec      	b.n	8005df2 <minitel_processrx+0x26>
	}
}
 8005e18:	bf00      	nop
 8005e1a:	3718      	adds	r7, #24
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	20000de4 	.word	0x20000de4
 8005e24:	20000040 	.word	0x20000040

08005e28 <minitel_process_rxchar>:

static void minitel_process_rxchar(int mntidx, minitel_t *m, uint8_t car)
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b086      	sub	sp, #24
 8005e2c:	af02      	add	r7, sp, #8
 8005e2e:	60f8      	str	r0, [r7, #12]
 8005e30:	60b9      	str	r1, [r7, #8]
 8005e32:	4613      	mov	r3, r2
 8005e34:	71fb      	strb	r3, [r7, #7]
	switch (m->state) {
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	791b      	ldrb	r3, [r3, #4]
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	dc02      	bgt.n	8005e44 <minitel_process_rxchar+0x1c>
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	da03      	bge.n	8005e4a <minitel_process_rxchar+0x22>
	case state_q1:
		itm_debug2(DBG_MTEL, "id car", mntidx,  car);
		break;

	}
}
 8005e42:	e015      	b.n	8005e70 <minitel_process_rxchar+0x48>
	switch (m->state) {
 8005e44:	2b02      	cmp	r3, #2
 8005e46:	d00c      	beq.n	8005e62 <minitel_process_rxchar+0x3a>
}
 8005e48:	e012      	b.n	8005e70 <minitel_process_rxchar+0x48>
		itm_debug3(DBG_MTEL, "ign car", mntidx, m->state, car);
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	791b      	ldrb	r3, [r3, #4]
 8005e4e:	461a      	mov	r2, r3
 8005e50:	79fb      	ldrb	r3, [r7, #7]
 8005e52:	9300      	str	r3, [sp, #0]
 8005e54:	4613      	mov	r3, r2
 8005e56:	68fa      	ldr	r2, [r7, #12]
 8005e58:	4907      	ldr	r1, [pc, #28]	; (8005e78 <minitel_process_rxchar+0x50>)
 8005e5a:	2008      	movs	r0, #8
 8005e5c:	f7ff ff64 	bl	8005d28 <itm_debug3>
		break;
 8005e60:	e006      	b.n	8005e70 <minitel_process_rxchar+0x48>
		itm_debug2(DBG_MTEL, "id car", mntidx,  car);
 8005e62:	79fb      	ldrb	r3, [r7, #7]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	4905      	ldr	r1, [pc, #20]	; (8005e7c <minitel_process_rxchar+0x54>)
 8005e68:	2008      	movs	r0, #8
 8005e6a:	f7ff ff3d 	bl	8005ce8 <itm_debug2>
		break;
 8005e6e:	bf00      	nop
}
 8005e70:	bf00      	nop
 8005e72:	3710      	adds	r7, #16
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	08006858 	.word	0x08006858
 8005e7c:	08006860 	.word	0x08006860

08005e80 <minitel_tick>:

//static const uint8_t mnt_ping[] = { 0x1B, 0x39, 0x7B };
static const uint8_t mnt_ping[] = "coucou";

void minitel_tick(int mntidx, uint32_t tick)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b086      	sub	sp, #24
 8005e84:	af02      	add	r7, sp, #8
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
	minitel_t *m = &minitels[mntidx];
 8005e8a:	687a      	ldr	r2, [r7, #4]
 8005e8c:	4613      	mov	r3, r2
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	4413      	add	r3, r2
 8005e92:	4a10      	ldr	r2, [pc, #64]	; (8005ed4 <minitel_tick+0x54>)
 8005e94:	4413      	add	r3, r2
 8005e96:	60fb      	str	r3, [r7, #12]

	switch(m->state) {
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	791b      	ldrb	r3, [r3, #4]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d114      	bne.n	8005eca <minitel_tick+0x4a>
	case state_init:
		serial_send_bytes(mntidx, mnt_ping, sizeof(mnt_ping), 0);
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	2207      	movs	r2, #7
 8005ea4:	490c      	ldr	r1, [pc, #48]	; (8005ed8 <minitel_tick+0x58>)
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 f8d8 	bl	800605c <serial_send_bytes>
		SET_STATE(mntidx, m, state_q1_tx);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	791b      	ldrb	r3, [r3, #4]
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	9300      	str	r3, [sp, #0]
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	4908      	ldr	r1, [pc, #32]	; (8005edc <minitel_tick+0x5c>)
 8005ebc:	2008      	movs	r0, #8
 8005ebe:	f7ff ff33 	bl	8005d28 <itm_debug3>
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	711a      	strb	r2, [r3, #4]
		break;
 8005ec8:	e000      	b.n	8005ecc <minitel_tick+0x4c>
	default:
		break;
 8005eca:	bf00      	nop
	}
}
 8005ecc:	bf00      	nop
 8005ece:	3710      	adds	r7, #16
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}
 8005ed4:	20000de4 	.word	0x20000de4
 8005ed8:	08006960 	.word	0x08006960
 8005edc:	08006850 	.word	0x08006850

08005ee0 <itm_debug1>:
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b086      	sub	sp, #24
 8005ee4:	af02      	add	r7, sp, #8
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(f & DBG_ERR, msg, v, 0, 0, 1);
 8005eec:	4b0a      	ldr	r3, [pc, #40]	; (8005f18 <itm_debug1+0x38>)
 8005eee:	681a      	ldr	r2, [r3, #0]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	4013      	ands	r3, r2
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d00b      	beq.n	8005f10 <itm_debug1+0x30>
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	f003 4000 	and.w	r0, r3, #2147483648	; 0x80000000
 8005efe:	2301      	movs	r3, #1
 8005f00:	9301      	str	r3, [sp, #4]
 8005f02:	2300      	movs	r3, #0
 8005f04:	9300      	str	r3, [sp, #0]
 8005f06:	2300      	movs	r3, #0
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	68b9      	ldr	r1, [r7, #8]
 8005f0c:	f000 fa70 	bl	80063f0 <_itm_debug3>
}
 8005f10:	bf00      	nop
 8005f12:	3710      	adds	r7, #16
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	200000b0 	.word	0x200000b0

08005f1c <StartMainTask>:
#define NUM_MINITELS NUM_SERIALS



void StartMainTask(void const * argument)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b086      	sub	sp, #24
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
	minitel_init_all();
 8005f24:	f7ff ff20 	bl	8005d68 <minitel_init_all>

  /* Infinite loop */
	for (;;) {
		itm_debug1(DBG_MTEL, "-wait c", 0);
 8005f28:	2200      	movs	r2, #0
 8005f2a:	491c      	ldr	r1, [pc, #112]	; (8005f9c <StartMainTask+0x80>)
 8005f2c:	2008      	movs	r0, #8
 8005f2e:	f7ff ffd7 	bl	8005ee0 <itm_debug1>
		uint32_t notif = 0;
 8005f32:	2300      	movs	r3, #0
 8005f34:	60fb      	str	r3, [r7, #12]
		xTaskNotifyWait(0, 0xFFFFFFFF, &notif, 1000);
 8005f36:	f107 020c 	add.w	r2, r7, #12
 8005f3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005f3e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005f42:	2000      	movs	r0, #0
 8005f44:	f7ff fae8 	bl	8005518 <xTaskNotifyWait>

		for (int i=0; i<NUM_MINITELS; i++) {
 8005f48:	2300      	movs	r3, #0
 8005f4a:	617b      	str	r3, [r7, #20]
 8005f4c:	e021      	b.n	8005f92 <StartMainTask+0x76>
			if (notif & NOTIFY_UART_TX(i)) {
 8005f4e:	2210      	movs	r2, #16
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	fa02 f303 	lsl.w	r3, r2, r3
 8005f56:	461a      	mov	r2, r3
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	4013      	ands	r3, r2
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d002      	beq.n	8005f66 <StartMainTask+0x4a>
				minitel_processtxdone(i);
 8005f60:	6978      	ldr	r0, [r7, #20]
 8005f62:	f7ff ff0d 	bl	8005d80 <minitel_processtxdone>
			}
			if (notif & NOTIFY_UART_RX(i)) {
 8005f66:	2201      	movs	r2, #1
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6e:	461a      	mov	r2, r3
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	4013      	ands	r3, r2
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d002      	beq.n	8005f7e <StartMainTask+0x62>
				minitel_processrx(i);
 8005f78:	6978      	ldr	r0, [r7, #20]
 8005f7a:	f7ff ff27 	bl	8005dcc <minitel_processrx>
			}

			uint32_t t = HAL_GetTick();
 8005f7e:	f7fb f9b1 	bl	80012e4 <HAL_GetTick>
 8005f82:	6138      	str	r0, [r7, #16]
			minitel_tick(i, t);
 8005f84:	6939      	ldr	r1, [r7, #16]
 8005f86:	6978      	ldr	r0, [r7, #20]
 8005f88:	f7ff ff7a 	bl	8005e80 <minitel_tick>
		for (int i=0; i<NUM_MINITELS; i++) {
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	3301      	adds	r3, #1
 8005f90:	617b      	str	r3, [r7, #20]
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	2b03      	cmp	r3, #3
 8005f96:	ddda      	ble.n	8005f4e <StartMainTask+0x32>
	for (;;) {
 8005f98:	e7c6      	b.n	8005f28 <StartMainTask+0xc>
 8005f9a:	bf00      	nop
 8005f9c:	08006868 	.word	0x08006868

08005fa0 <itm_debug1>:

void _itm_debug3(int err, const char *msg, int32_t v1, int32_t v2, int32_t v3, int n);


static inline void itm_debug1(uint32_t f, const char *msg, int32_t v)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b086      	sub	sp, #24
 8005fa4:	af02      	add	r7, sp, #8
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(f & DBG_ERR, msg, v, 0, 0, 1);
 8005fac:	4b0a      	ldr	r3, [pc, #40]	; (8005fd8 <itm_debug1+0x38>)
 8005fae:	681a      	ldr	r2, [r3, #0]
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d00b      	beq.n	8005fd0 <itm_debug1+0x30>
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f003 4000 	and.w	r0, r3, #2147483648	; 0x80000000
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	9301      	str	r3, [sp, #4]
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	9300      	str	r3, [sp, #0]
 8005fc6:	2300      	movs	r3, #0
 8005fc8:	687a      	ldr	r2, [r7, #4]
 8005fca:	68b9      	ldr	r1, [r7, #8]
 8005fcc:	f000 fa10 	bl	80063f0 <_itm_debug3>
}
 8005fd0:	bf00      	nop
 8005fd2:	3710      	adds	r7, #16
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	200000b0 	.word	0x200000b0

08005fdc <itm_debug2>:
static inline void itm_debug2(uint32_t f, const char *msg, int32_t v1, int32_t v2)
{
 8005fdc:	b580      	push	{r7, lr}
 8005fde:	b086      	sub	sp, #24
 8005fe0:	af02      	add	r7, sp, #8
 8005fe2:	60f8      	str	r0, [r7, #12]
 8005fe4:	60b9      	str	r1, [r7, #8]
 8005fe6:	607a      	str	r2, [r7, #4]
 8005fe8:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(f & DBG_ERR, msg, v1, v2, 0, 2);
 8005fea:	4b0b      	ldr	r3, [pc, #44]	; (8006018 <itm_debug2+0x3c>)
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	4013      	ands	r3, r2
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00b      	beq.n	800600e <itm_debug2+0x32>
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f003 4000 	and.w	r0, r3, #2147483648	; 0x80000000
 8005ffc:	2302      	movs	r3, #2
 8005ffe:	9301      	str	r3, [sp, #4]
 8006000:	2300      	movs	r3, #0
 8006002:	9300      	str	r3, [sp, #0]
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	68b9      	ldr	r1, [r7, #8]
 800600a:	f000 f9f1 	bl	80063f0 <_itm_debug3>
}
 800600e:	bf00      	nop
 8006010:	3710      	adds	r7, #16
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}
 8006016:	bf00      	nop
 8006018:	200000b0 	.word	0x200000b0

0800601c <itm_debug3>:
static inline void itm_debug3(uint32_t f, const char *msg, int32_t v1, int32_t v2, int32_t v3)
{
 800601c:	b580      	push	{r7, lr}
 800601e:	b086      	sub	sp, #24
 8006020:	af02      	add	r7, sp, #8
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	607a      	str	r2, [r7, #4]
 8006028:	603b      	str	r3, [r7, #0]
	if (f & debug_flags) _itm_debug3(f & DBG_ERR, msg, v1, v2, v3, 3);
 800602a:	4b0b      	ldr	r3, [pc, #44]	; (8006058 <itm_debug3+0x3c>)
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	4013      	ands	r3, r2
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00b      	beq.n	800604e <itm_debug3+0x32>
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f003 4000 	and.w	r0, r3, #2147483648	; 0x80000000
 800603c:	2303      	movs	r3, #3
 800603e:	9301      	str	r3, [sp, #4]
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	9300      	str	r3, [sp, #0]
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	68b9      	ldr	r1, [r7, #8]
 800604a:	f000 f9d1 	bl	80063f0 <_itm_debug3>
}
 800604e:	bf00      	nop
 8006050:	3710      	adds	r7, #16
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}
 8006056:	bf00      	nop
 8006058:	200000b0 	.word	0x200000b0

0800605c <serial_send_bytes>:
	}
	return rc;
}

 int serial_send_bytes(int port, const uint8_t *b, int len, int needcopy)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b08a      	sub	sp, #40	; 0x28
 8006060:	af02      	add	r7, sp, #8
 8006062:	60f8      	str	r0, [r7, #12]
 8006064:	60b9      	str	r1, [r7, #8]
 8006066:	607a      	str	r2, [r7, #4]
 8006068:	603b      	str	r3, [r7, #0]
	serial_t *s = &serials[port];
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	4613      	mov	r3, r2
 800606e:	00db      	lsls	r3, r3, #3
 8006070:	1a9b      	subs	r3, r3, r2
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	4a32      	ldr	r2, [pc, #200]	; (8006140 <serial_send_bytes+0xe4>)
 8006076:	4413      	add	r3, r2
 8006078:	61bb      	str	r3, [r7, #24]

	while (s->txonprogress) {
 800607a:	e013      	b.n	80060a4 <serial_send_bytes+0x48>
		itm_debug2(DBG_SERIAL, "Tx BLK", port, len);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	68fa      	ldr	r2, [r7, #12]
 8006080:	4930      	ldr	r1, [pc, #192]	; (8006144 <serial_send_bytes+0xe8>)
 8006082:	2002      	movs	r0, #2
 8006084:	f7ff ffaa 	bl	8005fdc <itm_debug2>
		uint32_t notif = 0;
 8006088:	2300      	movs	r3, #0
 800608a:	617b      	str	r3, [r7, #20]
		xTaskNotifyWait(0, NOTIFY_UART_TX(port), &notif, portMAX_DELAY);
 800608c:	2210      	movs	r2, #16
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	fa02 f303 	lsl.w	r3, r2, r3
 8006094:	4619      	mov	r1, r3
 8006096:	f107 0214 	add.w	r2, r7, #20
 800609a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800609e:	2000      	movs	r0, #0
 80060a0:	f7ff fa3a 	bl	8005518 <xTaskNotifyWait>
	while (s->txonprogress) {
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	7d1b      	ldrb	r3, [r3, #20]
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d1e6      	bne.n	800607c <serial_send_bytes+0x20>
	}

 	s->txonprogress = 1;
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	2201      	movs	r2, #1
 80060b2:	751a      	strb	r2, [r3, #20]
 	HAL_StatusTypeDef rc;
 	if (needcopy) {
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d024      	beq.n	8006104 <serial_send_bytes+0xa8>
 		if (len > s->txbuflen) {
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	899b      	ldrh	r3, [r3, #12]
 80060be:	461a      	mov	r2, r3
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	4293      	cmp	r3, r2
 80060c4:	dd0b      	ble.n	80060de <serial_send_bytes+0x82>
 			itm_debug3(DBG_ERR|DBG_SERIAL, "tx big", port, len, s->txbuflen);
 80060c6:	69bb      	ldr	r3, [r7, #24]
 80060c8:	899b      	ldrh	r3, [r3, #12]
 80060ca:	9300      	str	r3, [sp, #0]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	491d      	ldr	r1, [pc, #116]	; (8006148 <serial_send_bytes+0xec>)
 80060d2:	481e      	ldr	r0, [pc, #120]	; (800614c <serial_send_bytes+0xf0>)
 80060d4:	f7ff ffa2 	bl	800601c <itm_debug3>
 			return -1;
 80060d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80060dc:	e02c      	b.n	8006138 <serial_send_bytes+0xdc>
 		}
 	 	memcpy(s->txbuf, b, len);
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	68b9      	ldr	r1, [r7, #8]
 80060e6:	4618      	mov	r0, r3
 80060e8:	f000 fb80 	bl	80067ec <memcpy>
 		rc = HAL_UART_Transmit_DMA(s->uart, s->txbuf, len);
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	6858      	ldr	r0, [r3, #4]
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	691b      	ldr	r3, [r3, #16]
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	b292      	uxth	r2, r2
 80060f8:	4619      	mov	r1, r3
 80060fa:	f7fd faa9 	bl	8003650 <HAL_UART_Transmit_DMA>
 80060fe:	4603      	mov	r3, r0
 8006100:	77fb      	strb	r3, [r7, #31]
 8006102:	e009      	b.n	8006118 <serial_send_bytes+0xbc>
 	} else {
 		rc = HAL_UART_Transmit_DMA(s->uart, b, len);
 8006104:	69bb      	ldr	r3, [r7, #24]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	687a      	ldr	r2, [r7, #4]
 800610a:	b292      	uxth	r2, r2
 800610c:	68b9      	ldr	r1, [r7, #8]
 800610e:	4618      	mov	r0, r3
 8006110:	f7fd fa9e 	bl	8003650 <HAL_UART_Transmit_DMA>
 8006114:	4603      	mov	r3, r0
 8006116:	77fb      	strb	r3, [r7, #31]
 	}
	if (rc != HAL_OK) {
 8006118:	7ffb      	ldrb	r3, [r7, #31]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00b      	beq.n	8006136 <serial_send_bytes+0xda>
		itm_debug1(DBG_SERIAL|DBG_ERR, "TxErr", rc);
 800611e:	7ffb      	ldrb	r3, [r7, #31]
 8006120:	461a      	mov	r2, r3
 8006122:	490b      	ldr	r1, [pc, #44]	; (8006150 <serial_send_bytes+0xf4>)
 8006124:	4809      	ldr	r0, [pc, #36]	; (800614c <serial_send_bytes+0xf0>)
 8006126:	f7ff ff3b 	bl	8005fa0 <itm_debug1>
	 	s->txonprogress = 0;
 800612a:	69bb      	ldr	r3, [r7, #24]
 800612c:	2200      	movs	r2, #0
 800612e:	751a      	strb	r2, [r3, #20]
		return -1;
 8006130:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006134:	e000      	b.n	8006138 <serial_send_bytes+0xdc>
	}
	return 0;
 8006136:	2300      	movs	r3, #0
}
 8006138:	4618      	mov	r0, r3
 800613a:	3720      	adds	r7, #32
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	20000040 	.word	0x20000040
 8006144:	08006878 	.word	0x08006878
 8006148:	08006880 	.word	0x08006880
 800614c:	80000002 	.word	0x80000002
 8006150:	08006888 	.word	0x08006888

08006154 <HAL_UART_TxCpltCallback>:
		return (s->txonprogress) ? 1 : 0;
 }

//void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart);
void HAL_UART_TxCpltCallback(_UNUSED_ UART_HandleTypeDef *huart)
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b088      	sub	sp, #32
 8006158:	af02      	add	r7, sp, #8
 800615a:	6078      	str	r0, [r7, #4]
	int port = -1;
 800615c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006160:	617b      	str	r3, [r7, #20]
	for (int p=0; p<NUM_SERIALS; p++) {
 8006162:	2300      	movs	r3, #0
 8006164:	613b      	str	r3, [r7, #16]
 8006166:	e011      	b.n	800618c <HAL_UART_TxCpltCallback+0x38>
		if (serials[p].uart == huart) {
 8006168:	4929      	ldr	r1, [pc, #164]	; (8006210 <HAL_UART_TxCpltCallback+0xbc>)
 800616a:	693a      	ldr	r2, [r7, #16]
 800616c:	4613      	mov	r3, r2
 800616e:	00db      	lsls	r3, r3, #3
 8006170:	1a9b      	subs	r3, r3, r2
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	440b      	add	r3, r1
 8006176:	3304      	adds	r3, #4
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	429a      	cmp	r2, r3
 800617e:	d102      	bne.n	8006186 <HAL_UART_TxCpltCallback+0x32>
			port = p;
 8006180:	693b      	ldr	r3, [r7, #16]
 8006182:	617b      	str	r3, [r7, #20]
			break;
 8006184:	e005      	b.n	8006192 <HAL_UART_TxCpltCallback+0x3e>
	for (int p=0; p<NUM_SERIALS; p++) {
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	3301      	adds	r3, #1
 800618a:	613b      	str	r3, [r7, #16]
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	2b03      	cmp	r3, #3
 8006190:	ddea      	ble.n	8006168 <HAL_UART_TxCpltCallback+0x14>
		}
	}
	if (port < 0) {
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	2b00      	cmp	r3, #0
 8006196:	da06      	bge.n	80061a6 <HAL_UART_TxCpltCallback+0x52>
		itm_debug1(DBG_ERR|DBG_SERIAL, "bad uart", (int)huart);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	461a      	mov	r2, r3
 800619c:	491d      	ldr	r1, [pc, #116]	; (8006214 <HAL_UART_TxCpltCallback+0xc0>)
 800619e:	481e      	ldr	r0, [pc, #120]	; (8006218 <HAL_UART_TxCpltCallback+0xc4>)
 80061a0:	f7ff fefe 	bl	8005fa0 <itm_debug1>
		return;
 80061a4:	e030      	b.n	8006208 <HAL_UART_TxCpltCallback+0xb4>
	}

	serial_t *s = &serials[port];
 80061a6:	697a      	ldr	r2, [r7, #20]
 80061a8:	4613      	mov	r3, r2
 80061aa:	00db      	lsls	r3, r3, #3
 80061ac:	1a9b      	subs	r3, r3, r2
 80061ae:	009b      	lsls	r3, r3, #2
 80061b0:	4a17      	ldr	r2, [pc, #92]	; (8006210 <HAL_UART_TxCpltCallback+0xbc>)
 80061b2:	4413      	add	r3, r2
 80061b4:	60fb      	str	r3, [r7, #12]
	s->txonprogress = 0;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	2200      	movs	r2, #0
 80061ba:	751a      	strb	r2, [r3, #20]

	BaseType_t higher=0;
 80061bc:	2300      	movs	r3, #0
 80061be:	60bb      	str	r3, [r7, #8]
	if (!s->taskHandle) {
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d106      	bne.n	80061d6 <HAL_UART_TxCpltCallback+0x82>
		itm_debug1(DBG_ERR, "notask", port);
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	4914      	ldr	r1, [pc, #80]	; (800621c <HAL_UART_TxCpltCallback+0xc8>)
 80061cc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80061d0:	f7ff fee6 	bl	8005fa0 <itm_debug1>
		return;
 80061d4:	e018      	b.n	8006208 <HAL_UART_TxCpltCallback+0xb4>
	}
	xTaskNotifyFromISR(s->taskHandle, NOTIFY_UART_TX(port), eSetBits, &higher);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6818      	ldr	r0, [r3, #0]
 80061da:	2210      	movs	r2, #16
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	fa02 f303 	lsl.w	r3, r2, r3
 80061e2:	4619      	mov	r1, r3
 80061e4:	f107 0308 	add.w	r3, r7, #8
 80061e8:	9300      	str	r3, [sp, #0]
 80061ea:	2300      	movs	r3, #0
 80061ec:	2201      	movs	r2, #1
 80061ee:	f7ff f9ed 	bl	80055cc <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(higher);
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d007      	beq.n	8006208 <HAL_UART_TxCpltCallback+0xb4>
 80061f8:	4b09      	ldr	r3, [pc, #36]	; (8006220 <HAL_UART_TxCpltCallback+0xcc>)
 80061fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061fe:	601a      	str	r2, [r3, #0]
 8006200:	f3bf 8f4f 	dsb	sy
 8006204:	f3bf 8f6f 	isb	sy
}
 8006208:	3718      	adds	r7, #24
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
 800620e:	bf00      	nop
 8006210:	20000040 	.word	0x20000040
 8006214:	08006890 	.word	0x08006890
 8006218:	80000002 	.word	0x80000002
 800621c:	0800689c 	.word	0x0800689c
 8006220:	e000ed04 	.word	0xe000ed04

08006224 <bh>:


static void bh(void)
{
 8006224:	b480      	push	{r7}
 8006226:	af00      	add	r7, sp, #0
}
 8006228:	bf00      	nop
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
	...

08006234 <HAL_UARTEx_RxFifoFullCallback>:


void HAL_UARTEx_RxFifoFullCallback(_UNUSED_  UART_HandleTypeDef *huart)
{
 8006234:	b580      	push	{r7, lr}
 8006236:	b082      	sub	sp, #8
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
	itm_debug1(DBG_SERIAL, "RxFifoFull", 0);
 800623c:	2200      	movs	r2, #0
 800623e:	4905      	ldr	r1, [pc, #20]	; (8006254 <HAL_UARTEx_RxFifoFullCallback+0x20>)
 8006240:	2002      	movs	r0, #2
 8006242:	f7ff fead 	bl	8005fa0 <itm_debug1>
	bh();
 8006246:	f7ff ffed 	bl	8006224 <bh>
}
 800624a:	bf00      	nop
 800624c:	3708      	adds	r7, #8
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
 8006252:	bf00      	nop
 8006254:	080068a4 	.word	0x080068a4

08006258 <HAL_UARTEx_RxEventCallback>:
}



void HAL_UARTEx_RxEventCallback(_UNUSED_ UART_HandleTypeDef *huart, _UNUSED_ uint16_t Size)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	460b      	mov	r3, r1
 8006262:	807b      	strh	r3, [r7, #2]
	itm_debug1(DBG_SERIAL, "RxEvent", Size);
 8006264:	887b      	ldrh	r3, [r7, #2]
 8006266:	461a      	mov	r2, r3
 8006268:	4904      	ldr	r1, [pc, #16]	; (800627c <HAL_UARTEx_RxEventCallback+0x24>)
 800626a:	2002      	movs	r0, #2
 800626c:	f7ff fe98 	bl	8005fa0 <itm_debug1>
	bh();
 8006270:	f7ff ffd8 	bl	8006224 <bh>
}
 8006274:	bf00      	nop
 8006276:	3708      	adds	r7, #8
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}
 800627c:	080068c4 	.word	0x080068c4

08006280 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(_UNUSED_ UART_HandleTypeDef *huart)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
	itm_debug1(DBG_ERR|DBG_SERIAL, "RxErr", huart->ErrorCode);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800628e:	461a      	mov	r2, r3
 8006290:	491c      	ldr	r1, [pc, #112]	; (8006304 <HAL_UART_ErrorCallback+0x84>)
 8006292:	481d      	ldr	r0, [pc, #116]	; (8006308 <HAL_UART_ErrorCallback+0x88>)
 8006294:	f7ff fe84 	bl	8005fa0 <itm_debug1>
	bh();
 8006298:	f7ff ffc4 	bl	8006224 <bh>
	if (__HAL_UART_GET_FLAG(huart, UART_FLAG_PE) != RESET) {
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	69db      	ldr	r3, [r3, #28]
 80062a2:	f003 0301 	and.w	r3, r3, #1
 80062a6:	2b01      	cmp	r3, #1
 80062a8:	d104      	bne.n	80062b4 <HAL_UART_ErrorCallback+0x34>
		__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF); /* Clear PE flag */
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	2201      	movs	r2, #1
 80062b0:	621a      	str	r2, [r3, #32]
		__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF); /* Clear NE flag */
	} else if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) != RESET) {
		__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF); /* Clear ORE flag */
	}
	//_start_rx(0);
}
 80062b2:	e022      	b.n	80062fa <HAL_UART_ErrorCallback+0x7a>
	} else if (__HAL_UART_GET_FLAG(huart, UART_FLAG_FE) != RESET) {
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	69db      	ldr	r3, [r3, #28]
 80062ba:	f003 0302 	and.w	r3, r3, #2
 80062be:	2b02      	cmp	r3, #2
 80062c0:	d104      	bne.n	80062cc <HAL_UART_ErrorCallback+0x4c>
		__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF); /* Clear FE flag */
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	2202      	movs	r2, #2
 80062c8:	621a      	str	r2, [r3, #32]
}
 80062ca:	e016      	b.n	80062fa <HAL_UART_ErrorCallback+0x7a>
	} else if (__HAL_UART_GET_FLAG(huart, UART_FLAG_NE) != RESET) {
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	69db      	ldr	r3, [r3, #28]
 80062d2:	f003 0304 	and.w	r3, r3, #4
 80062d6:	2b04      	cmp	r3, #4
 80062d8:	d104      	bne.n	80062e4 <HAL_UART_ErrorCallback+0x64>
		__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF); /* Clear NE flag */
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2204      	movs	r2, #4
 80062e0:	621a      	str	r2, [r3, #32]
}
 80062e2:	e00a      	b.n	80062fa <HAL_UART_ErrorCallback+0x7a>
	} else if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) != RESET) {
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	69db      	ldr	r3, [r3, #28]
 80062ea:	f003 0308 	and.w	r3, r3, #8
 80062ee:	2b08      	cmp	r3, #8
 80062f0:	d103      	bne.n	80062fa <HAL_UART_ErrorCallback+0x7a>
		__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF); /* Clear ORE flag */
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2208      	movs	r2, #8
 80062f8:	621a      	str	r2, [r3, #32]
}
 80062fa:	bf00      	nop
 80062fc:	3708      	adds	r7, #8
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	080068cc 	.word	0x080068cc
 8006308:	80000002 	.word	0x80000002

0800630c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8006314:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8006318:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800631c:	f003 0301 	and.w	r3, r3, #1
 8006320:	2b00      	cmp	r3, #0
 8006322:	d013      	beq.n	800634c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8006324:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8006328:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800632c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00b      	beq.n	800634c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8006334:	e000      	b.n	8006338 <ITM_SendChar+0x2c>
    {
      __NOP();
 8006336:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8006338:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d0f9      	beq.n	8006336 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8006342:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	b2d2      	uxtb	r2, r2
 800634a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800634c:	687b      	ldr	r3, [r7, #4]
}
 800634e:	4618      	mov	r0, r3
 8006350:	370c      	adds	r7, #12
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr
	...

0800635c <write_num>:




static void write_num(char *buf, uint32_t v, int ndigit)
{
 800635c:	b480      	push	{r7}
 800635e:	b085      	sub	sp, #20
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	607a      	str	r2, [r7, #4]
	for (;ndigit>0; ndigit--) {
 8006368:	e01a      	b.n	80063a0 <write_num+0x44>
		buf[ndigit-1] = '0'+ (v % 10);
 800636a:	68b9      	ldr	r1, [r7, #8]
 800636c:	4b11      	ldr	r3, [pc, #68]	; (80063b4 <write_num+0x58>)
 800636e:	fba3 2301 	umull	r2, r3, r3, r1
 8006372:	08da      	lsrs	r2, r3, #3
 8006374:	4613      	mov	r3, r2
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	4413      	add	r3, r2
 800637a:	005b      	lsls	r3, r3, #1
 800637c:	1aca      	subs	r2, r1, r3
 800637e:	b2d2      	uxtb	r2, r2
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	3b01      	subs	r3, #1
 8006384:	68f9      	ldr	r1, [r7, #12]
 8006386:	440b      	add	r3, r1
 8006388:	3230      	adds	r2, #48	; 0x30
 800638a:	b2d2      	uxtb	r2, r2
 800638c:	701a      	strb	r2, [r3, #0]
		v = v/10;
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	4a08      	ldr	r2, [pc, #32]	; (80063b4 <write_num+0x58>)
 8006392:	fba2 2303 	umull	r2, r3, r2, r3
 8006396:	08db      	lsrs	r3, r3, #3
 8006398:	60bb      	str	r3, [r7, #8]
	for (;ndigit>0; ndigit--) {
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	3b01      	subs	r3, #1
 800639e:	607b      	str	r3, [r7, #4]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	dce1      	bgt.n	800636a <write_num+0xe>
	}
}
 80063a6:	bf00      	nop
 80063a8:	bf00      	nop
 80063aa:	3714      	adds	r7, #20
 80063ac:	46bd      	mov	sp, r7
 80063ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b2:	4770      	bx	lr
 80063b4:	cccccccd 	.word	0xcccccccd

080063b8 <mywrite>:
}
#endif
#endif

static inline void mywrite(const char *ptr, int32_t len)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b084      	sub	sp, #16
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
#ifndef TRAIN_SIMU
	for (int i = 0; i < len; i++)
 80063c2:	2300      	movs	r3, #0
 80063c4:	60fb      	str	r3, [r7, #12]
 80063c6:	e009      	b.n	80063dc <mywrite+0x24>
	{
		ITM_SendChar(*ptr++);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	1c5a      	adds	r2, r3, #1
 80063cc:	607a      	str	r2, [r7, #4]
 80063ce:	781b      	ldrb	r3, [r3, #0]
 80063d0:	4618      	mov	r0, r3
 80063d2:	f7ff ff9b 	bl	800630c <ITM_SendChar>
	for (int i = 0; i < len; i++)
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	3301      	adds	r3, #1
 80063da:	60fb      	str	r3, [r7, #12]
 80063dc:	68fa      	ldr	r2, [r7, #12]
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	429a      	cmp	r2, r3
 80063e2:	dbf1      	blt.n	80063c8 <mywrite+0x10>
	}
#else
    ssize_t  write(int fildes, const void *buf, size_t nbyte);
    write(1, ptr, len);
#endif
}
 80063e4:	bf00      	nop
 80063e6:	bf00      	nop
 80063e8:	3710      	adds	r7, #16
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
	...

080063f0 <_itm_debug3>:
/*
 * before: StartCtrlTask max 858
 */

void _itm_debug3(int err, const char *msg, int32_t v1, int32_t v2, int32_t v3, int n)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b08a      	sub	sp, #40	; 0x28
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	607a      	str	r2, [r7, #4]
 80063fc:	603b      	str	r3, [r7, #0]
	char buf[12];
	memset(buf, 0, sizeof(buf));
 80063fe:	f107 0314 	add.w	r3, r7, #20
 8006402:	220c      	movs	r2, #12
 8006404:	2100      	movs	r1, #0
 8006406:	4618      	mov	r0, r3
 8006408:	f000 f9c4 	bl	8006794 <memset>
    uint32_t tck = HAL_GetTick();
 800640c:	f7fa ff6a 	bl	80012e4 <HAL_GetTick>
 8006410:	6278      	str	r0, [r7, #36]	; 0x24
	write_num(buf, tck, 7);
 8006412:	f107 0314 	add.w	r3, r7, #20
 8006416:	2207      	movs	r2, #7
 8006418:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800641a:	4618      	mov	r0, r3
 800641c:	f7ff ff9e 	bl	800635c <write_num>
	buf[7] = err ? '@' : ':';
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d001      	beq.n	800642a <_itm_debug3+0x3a>
 8006426:	2340      	movs	r3, #64	; 0x40
 8006428:	e000      	b.n	800642c <_itm_debug3+0x3c>
 800642a:	233a      	movs	r3, #58	; 0x3a
 800642c:	76fb      	strb	r3, [r7, #27]
	mywrite(buf, 8);
 800642e:	f107 0314 	add.w	r3, r7, #20
 8006432:	2108      	movs	r1, #8
 8006434:	4618      	mov	r0, r3
 8006436:	f7ff ffbf 	bl	80063b8 <mywrite>
	int l = MIN(12, (int)strlen(msg));
 800643a:	68b8      	ldr	r0, [r7, #8]
 800643c:	f7f9 fef0 	bl	8000220 <strlen>
 8006440:	4603      	mov	r3, r0
 8006442:	2b0c      	cmp	r3, #12
 8006444:	dc04      	bgt.n	8006450 <_itm_debug3+0x60>
 8006446:	68b8      	ldr	r0, [r7, #8]
 8006448:	f7f9 feea 	bl	8000220 <strlen>
 800644c:	4603      	mov	r3, r0
 800644e:	e000      	b.n	8006452 <_itm_debug3+0x62>
 8006450:	230c      	movs	r3, #12
 8006452:	623b      	str	r3, [r7, #32]
	mywrite(msg, l);
 8006454:	6a39      	ldr	r1, [r7, #32]
 8006456:	68b8      	ldr	r0, [r7, #8]
 8006458:	f7ff ffae 	bl	80063b8 <mywrite>
	if (!n--) goto done;
 800645c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800645e:	1e5a      	subs	r2, r3, #1
 8006460:	637a      	str	r2, [r7, #52]	; 0x34
 8006462:	2b00      	cmp	r3, #0
 8006464:	d071      	beq.n	800654a <_itm_debug3+0x15a>

	buf[0] = '/';
 8006466:	232f      	movs	r3, #47	; 0x2f
 8006468:	753b      	strb	r3, [r7, #20]
	itoa(v1, buf+1, 10);
 800646a:	f107 0314 	add.w	r3, r7, #20
 800646e:	3301      	adds	r3, #1
 8006470:	220a      	movs	r2, #10
 8006472:	4619      	mov	r1, r3
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 f949 	bl	800670c <itoa>
    l = MIN(12, (int)strlen(buf));
 800647a:	f107 0314 	add.w	r3, r7, #20
 800647e:	4618      	mov	r0, r3
 8006480:	f7f9 fece 	bl	8000220 <strlen>
 8006484:	4603      	mov	r3, r0
 8006486:	2b0c      	cmp	r3, #12
 8006488:	dc06      	bgt.n	8006498 <_itm_debug3+0xa8>
 800648a:	f107 0314 	add.w	r3, r7, #20
 800648e:	4618      	mov	r0, r3
 8006490:	f7f9 fec6 	bl	8000220 <strlen>
 8006494:	4603      	mov	r3, r0
 8006496:	e000      	b.n	800649a <_itm_debug3+0xaa>
 8006498:	230c      	movs	r3, #12
 800649a:	623b      	str	r3, [r7, #32]
    mywrite(buf, l);
 800649c:	f107 0314 	add.w	r3, r7, #20
 80064a0:	6a39      	ldr	r1, [r7, #32]
 80064a2:	4618      	mov	r0, r3
 80064a4:	f7ff ff88 	bl	80063b8 <mywrite>
	if (!n--) goto done;
 80064a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064aa:	1e5a      	subs	r2, r3, #1
 80064ac:	637a      	str	r2, [r7, #52]	; 0x34
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d04d      	beq.n	800654e <_itm_debug3+0x15e>

	buf[0] = '/';
 80064b2:	232f      	movs	r3, #47	; 0x2f
 80064b4:	753b      	strb	r3, [r7, #20]
	itoa(v2, buf+1, 10);
 80064b6:	f107 0314 	add.w	r3, r7, #20
 80064ba:	3301      	adds	r3, #1
 80064bc:	220a      	movs	r2, #10
 80064be:	4619      	mov	r1, r3
 80064c0:	6838      	ldr	r0, [r7, #0]
 80064c2:	f000 f923 	bl	800670c <itoa>
    l = MIN(12, (int)strlen(buf));
 80064c6:	f107 0314 	add.w	r3, r7, #20
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7f9 fea8 	bl	8000220 <strlen>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b0c      	cmp	r3, #12
 80064d4:	dc06      	bgt.n	80064e4 <_itm_debug3+0xf4>
 80064d6:	f107 0314 	add.w	r3, r7, #20
 80064da:	4618      	mov	r0, r3
 80064dc:	f7f9 fea0 	bl	8000220 <strlen>
 80064e0:	4603      	mov	r3, r0
 80064e2:	e000      	b.n	80064e6 <_itm_debug3+0xf6>
 80064e4:	230c      	movs	r3, #12
 80064e6:	623b      	str	r3, [r7, #32]
    mywrite(buf, l);
 80064e8:	f107 0314 	add.w	r3, r7, #20
 80064ec:	6a39      	ldr	r1, [r7, #32]
 80064ee:	4618      	mov	r0, r3
 80064f0:	f7ff ff62 	bl	80063b8 <mywrite>
	if (!n--) goto done;
 80064f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064f6:	1e5a      	subs	r2, r3, #1
 80064f8:	637a      	str	r2, [r7, #52]	; 0x34
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d029      	beq.n	8006552 <_itm_debug3+0x162>

	buf[0] = '/';
 80064fe:	232f      	movs	r3, #47	; 0x2f
 8006500:	753b      	strb	r3, [r7, #20]
	itoa(v3, buf+1, 10);
 8006502:	f107 0314 	add.w	r3, r7, #20
 8006506:	3301      	adds	r3, #1
 8006508:	220a      	movs	r2, #10
 800650a:	4619      	mov	r1, r3
 800650c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800650e:	f000 f8fd 	bl	800670c <itoa>
    l = MIN(12, (int)strlen(buf));
 8006512:	f107 0314 	add.w	r3, r7, #20
 8006516:	4618      	mov	r0, r3
 8006518:	f7f9 fe82 	bl	8000220 <strlen>
 800651c:	4603      	mov	r3, r0
 800651e:	2b0c      	cmp	r3, #12
 8006520:	dc06      	bgt.n	8006530 <_itm_debug3+0x140>
 8006522:	f107 0314 	add.w	r3, r7, #20
 8006526:	4618      	mov	r0, r3
 8006528:	f7f9 fe7a 	bl	8000220 <strlen>
 800652c:	4603      	mov	r3, r0
 800652e:	e000      	b.n	8006532 <_itm_debug3+0x142>
 8006530:	230c      	movs	r3, #12
 8006532:	623b      	str	r3, [r7, #32]
    mywrite(buf, l);
 8006534:	f107 0314 	add.w	r3, r7, #20
 8006538:	6a39      	ldr	r1, [r7, #32]
 800653a:	4618      	mov	r0, r3
 800653c:	f7ff ff3c 	bl	80063b8 <mywrite>
	if (!n--) goto done;
 8006540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006542:	1e5a      	subs	r2, r3, #1
 8006544:	637a      	str	r2, [r7, #52]	; 0x34
 8006546:	2b00      	cmp	r3, #0

done:
 8006548:	e004      	b.n	8006554 <_itm_debug3+0x164>
	if (!n--) goto done;
 800654a:	bf00      	nop
 800654c:	e002      	b.n	8006554 <_itm_debug3+0x164>
	if (!n--) goto done;
 800654e:	bf00      	nop
 8006550:	e000      	b.n	8006554 <_itm_debug3+0x164>
	if (!n--) goto done;
 8006552:	bf00      	nop
	mywrite("\n", 1);
 8006554:	2101      	movs	r1, #1
 8006556:	4803      	ldr	r0, [pc, #12]	; (8006564 <_itm_debug3+0x174>)
 8006558:	f7ff ff2e 	bl	80063b8 <mywrite>
}
 800655c:	bf00      	nop
 800655e:	3728      	adds	r7, #40	; 0x28
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	080068d4 	.word	0x080068d4

08006568 <itm_debug1>:

void _itm_debug3(int err, const char *msg, int32_t v1, int32_t v2, int32_t v3, int n);


static inline void itm_debug1(uint32_t f, const char *msg, int32_t v)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b086      	sub	sp, #24
 800656c:	af02      	add	r7, sp, #8
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	60b9      	str	r1, [r7, #8]
 8006572:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(f & DBG_ERR, msg, v, 0, 0, 1);
 8006574:	4b0a      	ldr	r3, [pc, #40]	; (80065a0 <itm_debug1+0x38>)
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	4013      	ands	r3, r2
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00b      	beq.n	8006598 <itm_debug1+0x30>
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f003 4000 	and.w	r0, r3, #2147483648	; 0x80000000
 8006586:	2301      	movs	r3, #1
 8006588:	9301      	str	r3, [sp, #4]
 800658a:	2300      	movs	r3, #0
 800658c:	9300      	str	r3, [sp, #0]
 800658e:	2300      	movs	r3, #0
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	68b9      	ldr	r1, [r7, #8]
 8006594:	f7ff ff2c 	bl	80063f0 <_itm_debug3>
}
 8006598:	bf00      	nop
 800659a:	3710      	adds	r7, #16
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}
 80065a0:	200000b0 	.word	0x200000b0

080065a4 <_mqf_len>:
	m->maxuse = 0;
}


static inline int _mqf_len(const mqf_t *m)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
	int l;
	if (m->head >= m->tail) {
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	881b      	ldrh	r3, [r3, #0]
 80065b0:	b29a      	uxth	r2, r3
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	885b      	ldrh	r3, [r3, #2]
 80065b6:	b29b      	uxth	r3, r3
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d309      	bcc.n	80065d0 <_mqf_len+0x2c>
		l = (m->head - m->tail);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	881b      	ldrh	r3, [r3, #0]
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	461a      	mov	r2, r3
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	885b      	ldrh	r3, [r3, #2]
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	1ad3      	subs	r3, r2, r3
 80065cc:	60fb      	str	r3, [r7, #12]
 80065ce:	e00b      	b.n	80065e8 <_mqf_len+0x44>
	} else   {
		l = m->num + m->head - m->tail;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	795b      	ldrb	r3, [r3, #5]
 80065d4:	461a      	mov	r2, r3
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	881b      	ldrh	r3, [r3, #0]
 80065da:	b29b      	uxth	r3, r3
 80065dc:	4413      	add	r3, r2
 80065de:	687a      	ldr	r2, [r7, #4]
 80065e0:	8852      	ldrh	r2, [r2, #2]
 80065e2:	b292      	uxth	r2, r2
 80065e4:	1a9b      	subs	r3, r3, r2
 80065e6:	60fb      	str	r3, [r7, #12]
	}
	if (l<0) {
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	da08      	bge.n	8006600 <_mqf_len+0x5c>
		itm_debug1(DBG_ERR|DBG_MSG, "big pb", 1);
 80065ee:	2201      	movs	r2, #1
 80065f0:	4906      	ldr	r1, [pc, #24]	; (800660c <_mqf_len+0x68>)
 80065f2:	4807      	ldr	r0, [pc, #28]	; (8006610 <_mqf_len+0x6c>)
 80065f4:	f7ff ffb8 	bl	8006568 <itm_debug1>
		FatalError("Qpb", "msgq big problem");
 80065f8:	4906      	ldr	r1, [pc, #24]	; (8006614 <_mqf_len+0x70>)
 80065fa:	4807      	ldr	r0, [pc, #28]	; (8006618 <_mqf_len+0x74>)
 80065fc:	f000 f856 	bl	80066ac <FatalError>
	}
	return l;
 8006600:	68fb      	ldr	r3, [r7, #12]
}
 8006602:	4618      	mov	r0, r3
 8006604:	3710      	adds	r7, #16
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
 800660a:	bf00      	nop
 800660c:	080068d8 	.word	0x080068d8
 8006610:	80000004 	.word	0x80000004
 8006614:	080068e0 	.word	0x080068e0
 8006618:	080068f4 	.word	0x080068f4

0800661c <mqf_read>:
	//AtomicInc(p->head);
	return 0;
}

int mqf_read(mqf_t *m, void *ptr)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
	if (!m) return -1;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d102      	bne.n	8006632 <mqf_read+0x16>
 800662c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006630:	e037      	b.n	80066a2 <mqf_read+0x86>
	if (!_mqf_len(m)) return -1;
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f7ff ffb6 	bl	80065a4 <_mqf_len>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d102      	bne.n	8006644 <mqf_read+0x28>
 800663e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006642:	e02e      	b.n	80066a2 <mqf_read+0x86>
    void *p = &(m->msgbuf[m->tail*m->msgsiz]);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	689b      	ldr	r3, [r3, #8]
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	8852      	ldrh	r2, [r2, #2]
 800664c:	b292      	uxth	r2, r2
 800664e:	4611      	mov	r1, r2
 8006650:	687a      	ldr	r2, [r7, #4]
 8006652:	7912      	ldrb	r2, [r2, #4]
 8006654:	fb01 f202 	mul.w	r2, r1, r2
 8006658:	4413      	add	r3, r2
 800665a:	60fb      	str	r3, [r7, #12]
    memcpy(ptr, p, m->msgsiz);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	791b      	ldrb	r3, [r3, #4]
 8006660:	461a      	mov	r2, r3
 8006662:	68f9      	ldr	r1, [r7, #12]
 8006664:	6838      	ldr	r0, [r7, #0]
 8006666:	f000 f8c1 	bl	80067ec <memcpy>
    //__barrier();
    if (m->tail == m->num-1) {
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	885b      	ldrh	r3, [r3, #2]
 800666e:	b29b      	uxth	r3, r3
 8006670:	461a      	mov	r2, r3
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	795b      	ldrb	r3, [r3, #5]
 8006676:	3b01      	subs	r3, #1
 8006678:	429a      	cmp	r2, r3
 800667a:	d103      	bne.n	8006684 <mqf_read+0x68>
        m->tail = 0;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	805a      	strh	r2, [r3, #2]
 8006682:	e00d      	b.n	80066a0 <mqf_read+0x84>
    } else {
        __sync_fetch_and_add(&(m->tail), 1);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	3302      	adds	r3, #2
 8006688:	f3bf 8f5b 	dmb	ish
 800668c:	e8d3 1f5f 	ldrexh	r1, [r3]
 8006690:	f101 0101 	add.w	r1, r1, #1
 8006694:	e8c3 1f52 	strexh	r2, r1, [r3]
 8006698:	2a00      	cmp	r2, #0
 800669a:	d1f7      	bne.n	800668c <mqf_read+0x70>
 800669c:	f3bf 8f5b 	dmb	ish
    }
    return 0;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	3710      	adds	r7, #16
 80066a6:	46bd      	mov	sp, r7
 80066a8:	bd80      	pop	{r7, pc}
	...

080066ac <FatalError>:
#endif /* TRAIN_SIMU */
}

static const char *_fatal = NULL;
void FatalError(const char *short4lettersmsg, _UNUSED_ const char *longmsg)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	6039      	str	r1, [r7, #0]
	if (!_fatal) {
 80066b6:	4b08      	ldr	r3, [pc, #32]	; (80066d8 <FatalError+0x2c>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d105      	bne.n	80066ca <FatalError+0x1e>
		_fatal = short4lettersmsg;
 80066be:	4a06      	ldr	r2, [pc, #24]	; (80066d8 <FatalError+0x2c>)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80066c4:	b672      	cpsid	i
}
 80066c6:	bf00      	nop
		//_fatal_code = errcode;
		__disable_irq();
		for (;;) {
 80066c8:	e7fe      	b.n	80066c8 <FatalError+0x1c>
			// stop
		}
	}
}
 80066ca:	bf00      	nop
 80066cc:	370c      	adds	r7, #12
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr
 80066d6:	bf00      	nop
 80066d8:	20000df8 	.word	0x20000df8

080066dc <__itoa>:
 80066dc:	1e93      	subs	r3, r2, #2
 80066de:	2b22      	cmp	r3, #34	; 0x22
 80066e0:	b510      	push	{r4, lr}
 80066e2:	460c      	mov	r4, r1
 80066e4:	d904      	bls.n	80066f0 <__itoa+0x14>
 80066e6:	2300      	movs	r3, #0
 80066e8:	700b      	strb	r3, [r1, #0]
 80066ea:	461c      	mov	r4, r3
 80066ec:	4620      	mov	r0, r4
 80066ee:	bd10      	pop	{r4, pc}
 80066f0:	2a0a      	cmp	r2, #10
 80066f2:	d109      	bne.n	8006708 <__itoa+0x2c>
 80066f4:	2800      	cmp	r0, #0
 80066f6:	da07      	bge.n	8006708 <__itoa+0x2c>
 80066f8:	232d      	movs	r3, #45	; 0x2d
 80066fa:	700b      	strb	r3, [r1, #0]
 80066fc:	4240      	negs	r0, r0
 80066fe:	2101      	movs	r1, #1
 8006700:	4421      	add	r1, r4
 8006702:	f000 f805 	bl	8006710 <__utoa>
 8006706:	e7f1      	b.n	80066ec <__itoa+0x10>
 8006708:	2100      	movs	r1, #0
 800670a:	e7f9      	b.n	8006700 <__itoa+0x24>

0800670c <itoa>:
 800670c:	f7ff bfe6 	b.w	80066dc <__itoa>

08006710 <__utoa>:
 8006710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006712:	4c1f      	ldr	r4, [pc, #124]	; (8006790 <__utoa+0x80>)
 8006714:	b08b      	sub	sp, #44	; 0x2c
 8006716:	4605      	mov	r5, r0
 8006718:	460b      	mov	r3, r1
 800671a:	466e      	mov	r6, sp
 800671c:	f104 0c20 	add.w	ip, r4, #32
 8006720:	6820      	ldr	r0, [r4, #0]
 8006722:	6861      	ldr	r1, [r4, #4]
 8006724:	4637      	mov	r7, r6
 8006726:	c703      	stmia	r7!, {r0, r1}
 8006728:	3408      	adds	r4, #8
 800672a:	4564      	cmp	r4, ip
 800672c:	463e      	mov	r6, r7
 800672e:	d1f7      	bne.n	8006720 <__utoa+0x10>
 8006730:	7921      	ldrb	r1, [r4, #4]
 8006732:	7139      	strb	r1, [r7, #4]
 8006734:	1e91      	subs	r1, r2, #2
 8006736:	6820      	ldr	r0, [r4, #0]
 8006738:	6038      	str	r0, [r7, #0]
 800673a:	2922      	cmp	r1, #34	; 0x22
 800673c:	f04f 0100 	mov.w	r1, #0
 8006740:	d904      	bls.n	800674c <__utoa+0x3c>
 8006742:	7019      	strb	r1, [r3, #0]
 8006744:	460b      	mov	r3, r1
 8006746:	4618      	mov	r0, r3
 8006748:	b00b      	add	sp, #44	; 0x2c
 800674a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800674c:	1e58      	subs	r0, r3, #1
 800674e:	4684      	mov	ip, r0
 8006750:	fbb5 f7f2 	udiv	r7, r5, r2
 8006754:	fb02 5617 	mls	r6, r2, r7, r5
 8006758:	3628      	adds	r6, #40	; 0x28
 800675a:	446e      	add	r6, sp
 800675c:	460c      	mov	r4, r1
 800675e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8006762:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8006766:	462e      	mov	r6, r5
 8006768:	42b2      	cmp	r2, r6
 800676a:	f101 0101 	add.w	r1, r1, #1
 800676e:	463d      	mov	r5, r7
 8006770:	d9ee      	bls.n	8006750 <__utoa+0x40>
 8006772:	2200      	movs	r2, #0
 8006774:	545a      	strb	r2, [r3, r1]
 8006776:	1919      	adds	r1, r3, r4
 8006778:	1aa5      	subs	r5, r4, r2
 800677a:	42aa      	cmp	r2, r5
 800677c:	dae3      	bge.n	8006746 <__utoa+0x36>
 800677e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8006782:	780e      	ldrb	r6, [r1, #0]
 8006784:	7006      	strb	r6, [r0, #0]
 8006786:	3201      	adds	r2, #1
 8006788:	f801 5901 	strb.w	r5, [r1], #-1
 800678c:	e7f4      	b.n	8006778 <__utoa+0x68>
 800678e:	bf00      	nop
 8006790:	08006967 	.word	0x08006967

08006794 <memset>:
 8006794:	4402      	add	r2, r0
 8006796:	4603      	mov	r3, r0
 8006798:	4293      	cmp	r3, r2
 800679a:	d100      	bne.n	800679e <memset+0xa>
 800679c:	4770      	bx	lr
 800679e:	f803 1b01 	strb.w	r1, [r3], #1
 80067a2:	e7f9      	b.n	8006798 <memset+0x4>

080067a4 <__libc_init_array>:
 80067a4:	b570      	push	{r4, r5, r6, lr}
 80067a6:	4d0d      	ldr	r5, [pc, #52]	; (80067dc <__libc_init_array+0x38>)
 80067a8:	4c0d      	ldr	r4, [pc, #52]	; (80067e0 <__libc_init_array+0x3c>)
 80067aa:	1b64      	subs	r4, r4, r5
 80067ac:	10a4      	asrs	r4, r4, #2
 80067ae:	2600      	movs	r6, #0
 80067b0:	42a6      	cmp	r6, r4
 80067b2:	d109      	bne.n	80067c8 <__libc_init_array+0x24>
 80067b4:	4d0b      	ldr	r5, [pc, #44]	; (80067e4 <__libc_init_array+0x40>)
 80067b6:	4c0c      	ldr	r4, [pc, #48]	; (80067e8 <__libc_init_array+0x44>)
 80067b8:	f000 f826 	bl	8006808 <_init>
 80067bc:	1b64      	subs	r4, r4, r5
 80067be:	10a4      	asrs	r4, r4, #2
 80067c0:	2600      	movs	r6, #0
 80067c2:	42a6      	cmp	r6, r4
 80067c4:	d105      	bne.n	80067d2 <__libc_init_array+0x2e>
 80067c6:	bd70      	pop	{r4, r5, r6, pc}
 80067c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80067cc:	4798      	blx	r3
 80067ce:	3601      	adds	r6, #1
 80067d0:	e7ee      	b.n	80067b0 <__libc_init_array+0xc>
 80067d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80067d6:	4798      	blx	r3
 80067d8:	3601      	adds	r6, #1
 80067da:	e7f2      	b.n	80067c2 <__libc_init_array+0x1e>
 80067dc:	08006994 	.word	0x08006994
 80067e0:	08006994 	.word	0x08006994
 80067e4:	08006994 	.word	0x08006994
 80067e8:	08006998 	.word	0x08006998

080067ec <memcpy>:
 80067ec:	440a      	add	r2, r1
 80067ee:	4291      	cmp	r1, r2
 80067f0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80067f4:	d100      	bne.n	80067f8 <memcpy+0xc>
 80067f6:	4770      	bx	lr
 80067f8:	b510      	push	{r4, lr}
 80067fa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006802:	4291      	cmp	r1, r2
 8006804:	d1f9      	bne.n	80067fa <memcpy+0xe>
 8006806:	bd10      	pop	{r4, pc}

08006808 <_init>:
 8006808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800680a:	bf00      	nop
 800680c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800680e:	bc08      	pop	{r3}
 8006810:	469e      	mov	lr, r3
 8006812:	4770      	bx	lr

08006814 <_fini>:
 8006814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006816:	bf00      	nop
 8006818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800681a:	bc08      	pop	{r3}
 800681c:	469e      	mov	lr, r3
 800681e:	4770      	bx	lr
