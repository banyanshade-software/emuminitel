
stm32minitel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d80  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08005f60  08005f60  00015f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006060  08006060  00020134  2**0
                  CONTENTS
  4 .ARM          00000008  08006060  08006060  00016060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006068  08006068  00020134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006068  08006068  00016068  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800606c  0800606c  0001606c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08006070  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000080  200000b4  08006124  000200b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000cb0  20000134  080061a4  00020134  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000de4  080061a4  00020de4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020164  2**0
                  CONTENTS, READONLY
 14 .debug_info   00018aa1  00000000  00000000  000201a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000360f  00000000  00000000  00038c48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000015c8  00000000  00000000  0003c258  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000010eb  00000000  00000000  0003d820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002084a  00000000  00000000  0003e90b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00018c6d  00000000  00000000  0005f155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d5860  00000000  00000000  00077dc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005b7c  00000000  00000000  0014d624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  001531a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000134 	.word	0x20000134
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005f48 	.word	0x08005f48

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000138 	.word	0x20000138
 800021c:	08005f48 	.word	0x08005f48

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <__aeabi_uldivmod>:
 8000230:	b953      	cbnz	r3, 8000248 <__aeabi_uldivmod+0x18>
 8000232:	b94a      	cbnz	r2, 8000248 <__aeabi_uldivmod+0x18>
 8000234:	2900      	cmp	r1, #0
 8000236:	bf08      	it	eq
 8000238:	2800      	cmpeq	r0, #0
 800023a:	bf1c      	itt	ne
 800023c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000240:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000244:	f000 b970 	b.w	8000528 <__aeabi_idiv0>
 8000248:	f1ad 0c08 	sub.w	ip, sp, #8
 800024c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000258:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800025c:	b004      	add	sp, #16
 800025e:	4770      	bx	lr

08000260 <__udivmoddi4>:
 8000260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000264:	9e08      	ldr	r6, [sp, #32]
 8000266:	460d      	mov	r5, r1
 8000268:	4604      	mov	r4, r0
 800026a:	460f      	mov	r7, r1
 800026c:	2b00      	cmp	r3, #0
 800026e:	d14a      	bne.n	8000306 <__udivmoddi4+0xa6>
 8000270:	428a      	cmp	r2, r1
 8000272:	4694      	mov	ip, r2
 8000274:	d965      	bls.n	8000342 <__udivmoddi4+0xe2>
 8000276:	fab2 f382 	clz	r3, r2
 800027a:	b143      	cbz	r3, 800028e <__udivmoddi4+0x2e>
 800027c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000280:	f1c3 0220 	rsb	r2, r3, #32
 8000284:	409f      	lsls	r7, r3
 8000286:	fa20 f202 	lsr.w	r2, r0, r2
 800028a:	4317      	orrs	r7, r2
 800028c:	409c      	lsls	r4, r3
 800028e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000292:	fa1f f58c 	uxth.w	r5, ip
 8000296:	fbb7 f1fe 	udiv	r1, r7, lr
 800029a:	0c22      	lsrs	r2, r4, #16
 800029c:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002a4:	fb01 f005 	mul.w	r0, r1, r5
 80002a8:	4290      	cmp	r0, r2
 80002aa:	d90a      	bls.n	80002c2 <__udivmoddi4+0x62>
 80002ac:	eb1c 0202 	adds.w	r2, ip, r2
 80002b0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002b4:	f080 811c 	bcs.w	80004f0 <__udivmoddi4+0x290>
 80002b8:	4290      	cmp	r0, r2
 80002ba:	f240 8119 	bls.w	80004f0 <__udivmoddi4+0x290>
 80002be:	3902      	subs	r1, #2
 80002c0:	4462      	add	r2, ip
 80002c2:	1a12      	subs	r2, r2, r0
 80002c4:	b2a4      	uxth	r4, r4
 80002c6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002ca:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ce:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002d2:	fb00 f505 	mul.w	r5, r0, r5
 80002d6:	42a5      	cmp	r5, r4
 80002d8:	d90a      	bls.n	80002f0 <__udivmoddi4+0x90>
 80002da:	eb1c 0404 	adds.w	r4, ip, r4
 80002de:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80002e2:	f080 8107 	bcs.w	80004f4 <__udivmoddi4+0x294>
 80002e6:	42a5      	cmp	r5, r4
 80002e8:	f240 8104 	bls.w	80004f4 <__udivmoddi4+0x294>
 80002ec:	4464      	add	r4, ip
 80002ee:	3802      	subs	r0, #2
 80002f0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f4:	1b64      	subs	r4, r4, r5
 80002f6:	2100      	movs	r1, #0
 80002f8:	b11e      	cbz	r6, 8000302 <__udivmoddi4+0xa2>
 80002fa:	40dc      	lsrs	r4, r3
 80002fc:	2300      	movs	r3, #0
 80002fe:	e9c6 4300 	strd	r4, r3, [r6]
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	428b      	cmp	r3, r1
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0xbc>
 800030a:	2e00      	cmp	r6, #0
 800030c:	f000 80ed 	beq.w	80004ea <__udivmoddi4+0x28a>
 8000310:	2100      	movs	r1, #0
 8000312:	e9c6 0500 	strd	r0, r5, [r6]
 8000316:	4608      	mov	r0, r1
 8000318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031c:	fab3 f183 	clz	r1, r3
 8000320:	2900      	cmp	r1, #0
 8000322:	d149      	bne.n	80003b8 <__udivmoddi4+0x158>
 8000324:	42ab      	cmp	r3, r5
 8000326:	d302      	bcc.n	800032e <__udivmoddi4+0xce>
 8000328:	4282      	cmp	r2, r0
 800032a:	f200 80f8 	bhi.w	800051e <__udivmoddi4+0x2be>
 800032e:	1a84      	subs	r4, r0, r2
 8000330:	eb65 0203 	sbc.w	r2, r5, r3
 8000334:	2001      	movs	r0, #1
 8000336:	4617      	mov	r7, r2
 8000338:	2e00      	cmp	r6, #0
 800033a:	d0e2      	beq.n	8000302 <__udivmoddi4+0xa2>
 800033c:	e9c6 4700 	strd	r4, r7, [r6]
 8000340:	e7df      	b.n	8000302 <__udivmoddi4+0xa2>
 8000342:	b902      	cbnz	r2, 8000346 <__udivmoddi4+0xe6>
 8000344:	deff      	udf	#255	; 0xff
 8000346:	fab2 f382 	clz	r3, r2
 800034a:	2b00      	cmp	r3, #0
 800034c:	f040 8090 	bne.w	8000470 <__udivmoddi4+0x210>
 8000350:	1a8a      	subs	r2, r1, r2
 8000352:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000356:	fa1f fe8c 	uxth.w	lr, ip
 800035a:	2101      	movs	r1, #1
 800035c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000360:	fb07 2015 	mls	r0, r7, r5, r2
 8000364:	0c22      	lsrs	r2, r4, #16
 8000366:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800036a:	fb0e f005 	mul.w	r0, lr, r5
 800036e:	4290      	cmp	r0, r2
 8000370:	d908      	bls.n	8000384 <__udivmoddi4+0x124>
 8000372:	eb1c 0202 	adds.w	r2, ip, r2
 8000376:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x122>
 800037c:	4290      	cmp	r0, r2
 800037e:	f200 80cb 	bhi.w	8000518 <__udivmoddi4+0x2b8>
 8000382:	4645      	mov	r5, r8
 8000384:	1a12      	subs	r2, r2, r0
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb2 f0f7 	udiv	r0, r2, r7
 800038c:	fb07 2210 	mls	r2, r7, r0, r2
 8000390:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000394:	fb0e fe00 	mul.w	lr, lr, r0
 8000398:	45a6      	cmp	lr, r4
 800039a:	d908      	bls.n	80003ae <__udivmoddi4+0x14e>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003a4:	d202      	bcs.n	80003ac <__udivmoddi4+0x14c>
 80003a6:	45a6      	cmp	lr, r4
 80003a8:	f200 80bb 	bhi.w	8000522 <__udivmoddi4+0x2c2>
 80003ac:	4610      	mov	r0, r2
 80003ae:	eba4 040e 	sub.w	r4, r4, lr
 80003b2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003b6:	e79f      	b.n	80002f8 <__udivmoddi4+0x98>
 80003b8:	f1c1 0720 	rsb	r7, r1, #32
 80003bc:	408b      	lsls	r3, r1
 80003be:	fa22 fc07 	lsr.w	ip, r2, r7
 80003c2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003c6:	fa05 f401 	lsl.w	r4, r5, r1
 80003ca:	fa20 f307 	lsr.w	r3, r0, r7
 80003ce:	40fd      	lsrs	r5, r7
 80003d0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003d4:	4323      	orrs	r3, r4
 80003d6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003da:	fa1f fe8c 	uxth.w	lr, ip
 80003de:	fb09 5518 	mls	r5, r9, r8, r5
 80003e2:	0c1c      	lsrs	r4, r3, #16
 80003e4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003e8:	fb08 f50e 	mul.w	r5, r8, lr
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	fa02 f201 	lsl.w	r2, r2, r1
 80003f2:	fa00 f001 	lsl.w	r0, r0, r1
 80003f6:	d90b      	bls.n	8000410 <__udivmoddi4+0x1b0>
 80003f8:	eb1c 0404 	adds.w	r4, ip, r4
 80003fc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000400:	f080 8088 	bcs.w	8000514 <__udivmoddi4+0x2b4>
 8000404:	42a5      	cmp	r5, r4
 8000406:	f240 8085 	bls.w	8000514 <__udivmoddi4+0x2b4>
 800040a:	f1a8 0802 	sub.w	r8, r8, #2
 800040e:	4464      	add	r4, ip
 8000410:	1b64      	subs	r4, r4, r5
 8000412:	b29d      	uxth	r5, r3
 8000414:	fbb4 f3f9 	udiv	r3, r4, r9
 8000418:	fb09 4413 	mls	r4, r9, r3, r4
 800041c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000420:	fb03 fe0e 	mul.w	lr, r3, lr
 8000424:	45a6      	cmp	lr, r4
 8000426:	d908      	bls.n	800043a <__udivmoddi4+0x1da>
 8000428:	eb1c 0404 	adds.w	r4, ip, r4
 800042c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000430:	d26c      	bcs.n	800050c <__udivmoddi4+0x2ac>
 8000432:	45a6      	cmp	lr, r4
 8000434:	d96a      	bls.n	800050c <__udivmoddi4+0x2ac>
 8000436:	3b02      	subs	r3, #2
 8000438:	4464      	add	r4, ip
 800043a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800043e:	fba3 9502 	umull	r9, r5, r3, r2
 8000442:	eba4 040e 	sub.w	r4, r4, lr
 8000446:	42ac      	cmp	r4, r5
 8000448:	46c8      	mov	r8, r9
 800044a:	46ae      	mov	lr, r5
 800044c:	d356      	bcc.n	80004fc <__udivmoddi4+0x29c>
 800044e:	d053      	beq.n	80004f8 <__udivmoddi4+0x298>
 8000450:	b156      	cbz	r6, 8000468 <__udivmoddi4+0x208>
 8000452:	ebb0 0208 	subs.w	r2, r0, r8
 8000456:	eb64 040e 	sbc.w	r4, r4, lr
 800045a:	fa04 f707 	lsl.w	r7, r4, r7
 800045e:	40ca      	lsrs	r2, r1
 8000460:	40cc      	lsrs	r4, r1
 8000462:	4317      	orrs	r7, r2
 8000464:	e9c6 7400 	strd	r7, r4, [r6]
 8000468:	4618      	mov	r0, r3
 800046a:	2100      	movs	r1, #0
 800046c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000470:	f1c3 0120 	rsb	r1, r3, #32
 8000474:	fa02 fc03 	lsl.w	ip, r2, r3
 8000478:	fa20 f201 	lsr.w	r2, r0, r1
 800047c:	fa25 f101 	lsr.w	r1, r5, r1
 8000480:	409d      	lsls	r5, r3
 8000482:	432a      	orrs	r2, r5
 8000484:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000488:	fa1f fe8c 	uxth.w	lr, ip
 800048c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000490:	fb07 1510 	mls	r5, r7, r0, r1
 8000494:	0c11      	lsrs	r1, r2, #16
 8000496:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800049a:	fb00 f50e 	mul.w	r5, r0, lr
 800049e:	428d      	cmp	r5, r1
 80004a0:	fa04 f403 	lsl.w	r4, r4, r3
 80004a4:	d908      	bls.n	80004b8 <__udivmoddi4+0x258>
 80004a6:	eb1c 0101 	adds.w	r1, ip, r1
 80004aa:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ae:	d22f      	bcs.n	8000510 <__udivmoddi4+0x2b0>
 80004b0:	428d      	cmp	r5, r1
 80004b2:	d92d      	bls.n	8000510 <__udivmoddi4+0x2b0>
 80004b4:	3802      	subs	r0, #2
 80004b6:	4461      	add	r1, ip
 80004b8:	1b49      	subs	r1, r1, r5
 80004ba:	b292      	uxth	r2, r2
 80004bc:	fbb1 f5f7 	udiv	r5, r1, r7
 80004c0:	fb07 1115 	mls	r1, r7, r5, r1
 80004c4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c8:	fb05 f10e 	mul.w	r1, r5, lr
 80004cc:	4291      	cmp	r1, r2
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x282>
 80004d0:	eb1c 0202 	adds.w	r2, ip, r2
 80004d4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004d8:	d216      	bcs.n	8000508 <__udivmoddi4+0x2a8>
 80004da:	4291      	cmp	r1, r2
 80004dc:	d914      	bls.n	8000508 <__udivmoddi4+0x2a8>
 80004de:	3d02      	subs	r5, #2
 80004e0:	4462      	add	r2, ip
 80004e2:	1a52      	subs	r2, r2, r1
 80004e4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004e8:	e738      	b.n	800035c <__udivmoddi4+0xfc>
 80004ea:	4631      	mov	r1, r6
 80004ec:	4630      	mov	r0, r6
 80004ee:	e708      	b.n	8000302 <__udivmoddi4+0xa2>
 80004f0:	4639      	mov	r1, r7
 80004f2:	e6e6      	b.n	80002c2 <__udivmoddi4+0x62>
 80004f4:	4610      	mov	r0, r2
 80004f6:	e6fb      	b.n	80002f0 <__udivmoddi4+0x90>
 80004f8:	4548      	cmp	r0, r9
 80004fa:	d2a9      	bcs.n	8000450 <__udivmoddi4+0x1f0>
 80004fc:	ebb9 0802 	subs.w	r8, r9, r2
 8000500:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000504:	3b01      	subs	r3, #1
 8000506:	e7a3      	b.n	8000450 <__udivmoddi4+0x1f0>
 8000508:	4645      	mov	r5, r8
 800050a:	e7ea      	b.n	80004e2 <__udivmoddi4+0x282>
 800050c:	462b      	mov	r3, r5
 800050e:	e794      	b.n	800043a <__udivmoddi4+0x1da>
 8000510:	4640      	mov	r0, r8
 8000512:	e7d1      	b.n	80004b8 <__udivmoddi4+0x258>
 8000514:	46d0      	mov	r8, sl
 8000516:	e77b      	b.n	8000410 <__udivmoddi4+0x1b0>
 8000518:	3d02      	subs	r5, #2
 800051a:	4462      	add	r2, ip
 800051c:	e732      	b.n	8000384 <__udivmoddi4+0x124>
 800051e:	4608      	mov	r0, r1
 8000520:	e70a      	b.n	8000338 <__udivmoddi4+0xd8>
 8000522:	4464      	add	r4, ip
 8000524:	3802      	subs	r0, #2
 8000526:	e742      	b.n	80003ae <__udivmoddi4+0x14e>

08000528 <__aeabi_idiv0>:
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop

0800052c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800052c:	b480      	push	{r7}
 800052e:	b085      	sub	sp, #20
 8000530:	af00      	add	r7, sp, #0
 8000532:	60f8      	str	r0, [r7, #12]
 8000534:	60b9      	str	r1, [r7, #8]
 8000536:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	4a07      	ldr	r2, [pc, #28]	; (8000558 <vApplicationGetIdleTaskMemory+0x2c>)
 800053c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800053e:	68bb      	ldr	r3, [r7, #8]
 8000540:	4a06      	ldr	r2, [pc, #24]	; (800055c <vApplicationGetIdleTaskMemory+0x30>)
 8000542:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	2280      	movs	r2, #128	; 0x80
 8000548:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800054a:	bf00      	nop
 800054c:	3714      	adds	r7, #20
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	20000150 	.word	0x20000150
 800055c:	200001a4 	.word	0x200001a4

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b5b0      	push	{r4, r5, r7, lr}
 8000562:	b088      	sub	sp, #32
 8000564:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000566:	f000 fe9a 	bl	800129e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056a:	f000 f827 	bl	80005bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056e:	f000 fa35 	bl	80009dc <MX_GPIO_Init>
  MX_DMA_Init();
 8000572:	f000 f9f1 	bl	8000958 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000576:	f000 f86d 	bl	8000654 <MX_LPUART1_UART_Init>
  MX_UART4_Init();
 800057a:	f000 f8b5 	bl	80006e8 <MX_UART4_Init>
  MX_UART5_Init();
 800057e:	f000 f901 	bl	8000784 <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000582:	f000 f94d 	bl	8000820 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000586:	f000 f999 	bl	80008bc <MX_USART3_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of mainTask */
  osThreadStaticDef(mainTask, StartMainTask, osPriorityNormal, 0, 256, mainTaskBuffer, &mainTaskControlBlock);
 800058a:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <main+0x54>)
 800058c:	1d3c      	adds	r4, r7, #4
 800058e:	461d      	mov	r5, r3
 8000590:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000592:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000594:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000598:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mainTaskHandle = osThreadCreate(osThread(mainTask), NULL);
 800059c:	1d3b      	adds	r3, r7, #4
 800059e:	2100      	movs	r1, #0
 80005a0:	4618      	mov	r0, r3
 80005a2:	f004 f95c 	bl	800485e <osThreadCreate>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4a03      	ldr	r2, [pc, #12]	; (80005b8 <main+0x58>)
 80005aa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005ac:	f004 f950 	bl	8004850 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b0:	e7fe      	b.n	80005b0 <main+0x50>
 80005b2:	bf00      	nop
 80005b4:	08005f6c 	.word	0x08005f6c
 80005b8:	20000808 	.word	0x20000808

080005bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b094      	sub	sp, #80	; 0x50
 80005c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c2:	f107 0318 	add.w	r3, r7, #24
 80005c6:	2238      	movs	r2, #56	; 0x38
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f005 fc90 	bl	8005ef0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
 80005da:	60da      	str	r2, [r3, #12]
 80005dc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005de:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005e2:	f001 fbab 	bl	8001d3c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e6:	2302      	movs	r3, #2
 80005e8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005ee:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f0:	2340      	movs	r3, #64	; 0x40
 80005f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f4:	2302      	movs	r3, #2
 80005f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005f8:	2302      	movs	r3, #2
 80005fa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005fc:	2304      	movs	r3, #4
 80005fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000600:	2340      	movs	r3, #64	; 0x40
 8000602:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000604:	2302      	movs	r3, #2
 8000606:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000608:	2302      	movs	r3, #2
 800060a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 800060c:	2304      	movs	r3, #4
 800060e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000610:	f107 0318 	add.w	r3, r7, #24
 8000614:	4618      	mov	r0, r3
 8000616:	f001 fc45 	bl	8001ea4 <HAL_RCC_OscConfig>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000620:	f000 fa70 	bl	8000b04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000624:	230f      	movs	r3, #15
 8000626:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000628:	2303      	movs	r3, #3
 800062a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 800062c:	2390      	movs	r3, #144	; 0x90
 800062e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000638:	1d3b      	adds	r3, r7, #4
 800063a:	2100      	movs	r1, #0
 800063c:	4618      	mov	r0, r3
 800063e:	f001 ff43 	bl	80024c8 <HAL_RCC_ClockConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000648:	f000 fa5c 	bl	8000b04 <Error_Handler>
  }
}
 800064c:	bf00      	nop
 800064e:	3750      	adds	r7, #80	; 0x50
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}

08000654 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 800065a:	4a22      	ldr	r2, [pc, #136]	; (80006e4 <MX_LPUART1_UART_Init+0x90>)
 800065c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 8000660:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000664:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000666:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 8000668:	2200      	movs	r2, #0
 800066a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800066c:	4b1c      	ldr	r3, [pc, #112]	; (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 800066e:	2200      	movs	r2, #0
 8000670:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000672:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 8000674:	2200      	movs	r2, #0
 8000676:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000678:	4b19      	ldr	r3, [pc, #100]	; (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 800067a:	220c      	movs	r2, #12
 800067c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800067e:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 8000680:	2200      	movs	r2, #0
 8000682:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000684:	4b16      	ldr	r3, [pc, #88]	; (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 8000686:	2200      	movs	r2, #0
 8000688:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800068a:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 800068c:	2200      	movs	r2, #0
 800068e:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000690:	4b13      	ldr	r3, [pc, #76]	; (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 8000692:	2200      	movs	r2, #0
 8000694:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000696:	4812      	ldr	r0, [pc, #72]	; (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 8000698:	f002 feda 	bl	8003450 <HAL_UART_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80006a2:	f000 fa2f 	bl	8000b04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006a6:	2100      	movs	r1, #0
 80006a8:	480d      	ldr	r0, [pc, #52]	; (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 80006aa:	f003 ffee 	bl	800468a <HAL_UARTEx_SetTxFifoThreshold>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80006b4:	f000 fa26 	bl	8000b04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006b8:	2100      	movs	r1, #0
 80006ba:	4809      	ldr	r0, [pc, #36]	; (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 80006bc:	f004 f823 	bl	8004706 <HAL_UARTEx_SetRxFifoThreshold>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80006c6:	f000 fa1d 	bl	8000b04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80006ca:	4805      	ldr	r0, [pc, #20]	; (80006e0 <MX_LPUART1_UART_Init+0x8c>)
 80006cc:	f003 ffa4 	bl	8004618 <HAL_UARTEx_DisableFifoMode>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80006d6:	f000 fa15 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	200003a4 	.word	0x200003a4
 80006e4:	40008000 	.word	0x40008000

080006e8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80006ec:	4b23      	ldr	r3, [pc, #140]	; (800077c <MX_UART4_Init+0x94>)
 80006ee:	4a24      	ldr	r2, [pc, #144]	; (8000780 <MX_UART4_Init+0x98>)
 80006f0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 1200;
 80006f2:	4b22      	ldr	r3, [pc, #136]	; (800077c <MX_UART4_Init+0x94>)
 80006f4:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80006f8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80006fa:	4b20      	ldr	r3, [pc, #128]	; (800077c <MX_UART4_Init+0x94>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000700:	4b1e      	ldr	r3, [pc, #120]	; (800077c <MX_UART4_Init+0x94>)
 8000702:	2200      	movs	r2, #0
 8000704:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_EVEN;
 8000706:	4b1d      	ldr	r3, [pc, #116]	; (800077c <MX_UART4_Init+0x94>)
 8000708:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800070c:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800070e:	4b1b      	ldr	r3, [pc, #108]	; (800077c <MX_UART4_Init+0x94>)
 8000710:	220c      	movs	r2, #12
 8000712:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000714:	4b19      	ldr	r3, [pc, #100]	; (800077c <MX_UART4_Init+0x94>)
 8000716:	2200      	movs	r2, #0
 8000718:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800071a:	4b18      	ldr	r3, [pc, #96]	; (800077c <MX_UART4_Init+0x94>)
 800071c:	2200      	movs	r2, #0
 800071e:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000720:	4b16      	ldr	r3, [pc, #88]	; (800077c <MX_UART4_Init+0x94>)
 8000722:	2200      	movs	r2, #0
 8000724:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000726:	4b15      	ldr	r3, [pc, #84]	; (800077c <MX_UART4_Init+0x94>)
 8000728:	2200      	movs	r2, #0
 800072a:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800072c:	4b13      	ldr	r3, [pc, #76]	; (800077c <MX_UART4_Init+0x94>)
 800072e:	2200      	movs	r2, #0
 8000730:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000732:	4812      	ldr	r0, [pc, #72]	; (800077c <MX_UART4_Init+0x94>)
 8000734:	f002 fe8c 	bl	8003450 <HAL_UART_Init>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <MX_UART4_Init+0x5a>
  {
    Error_Handler();
 800073e:	f000 f9e1 	bl	8000b04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000742:	2100      	movs	r1, #0
 8000744:	480d      	ldr	r0, [pc, #52]	; (800077c <MX_UART4_Init+0x94>)
 8000746:	f003 ffa0 	bl	800468a <HAL_UARTEx_SetTxFifoThreshold>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <MX_UART4_Init+0x6c>
  {
    Error_Handler();
 8000750:	f000 f9d8 	bl	8000b04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000754:	2100      	movs	r1, #0
 8000756:	4809      	ldr	r0, [pc, #36]	; (800077c <MX_UART4_Init+0x94>)
 8000758:	f003 ffd5 	bl	8004706 <HAL_UARTEx_SetRxFifoThreshold>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_UART4_Init+0x7e>
  {
    Error_Handler();
 8000762:	f000 f9cf 	bl	8000b04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000766:	4805      	ldr	r0, [pc, #20]	; (800077c <MX_UART4_Init+0x94>)
 8000768:	f003 ff56 	bl	8004618 <HAL_UARTEx_DisableFifoMode>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <MX_UART4_Init+0x8e>
  {
    Error_Handler();
 8000772:	f000 f9c7 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	20000438 	.word	0x20000438
 8000780:	40004c00 	.word	0x40004c00

08000784 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8000788:	4b23      	ldr	r3, [pc, #140]	; (8000818 <MX_UART5_Init+0x94>)
 800078a:	4a24      	ldr	r2, [pc, #144]	; (800081c <MX_UART5_Init+0x98>)
 800078c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 1200;
 800078e:	4b22      	ldr	r3, [pc, #136]	; (8000818 <MX_UART5_Init+0x94>)
 8000790:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8000794:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8000796:	4b20      	ldr	r3, [pc, #128]	; (8000818 <MX_UART5_Init+0x94>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800079c:	4b1e      	ldr	r3, [pc, #120]	; (8000818 <MX_UART5_Init+0x94>)
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_EVEN;
 80007a2:	4b1d      	ldr	r3, [pc, #116]	; (8000818 <MX_UART5_Init+0x94>)
 80007a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80007a8:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80007aa:	4b1b      	ldr	r3, [pc, #108]	; (8000818 <MX_UART5_Init+0x94>)
 80007ac:	220c      	movs	r2, #12
 80007ae:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007b0:	4b19      	ldr	r3, [pc, #100]	; (8000818 <MX_UART5_Init+0x94>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b6:	4b18      	ldr	r3, [pc, #96]	; (8000818 <MX_UART5_Init+0x94>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007bc:	4b16      	ldr	r3, [pc, #88]	; (8000818 <MX_UART5_Init+0x94>)
 80007be:	2200      	movs	r2, #0
 80007c0:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007c2:	4b15      	ldr	r3, [pc, #84]	; (8000818 <MX_UART5_Init+0x94>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	625a      	str	r2, [r3, #36]	; 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007c8:	4b13      	ldr	r3, [pc, #76]	; (8000818 <MX_UART5_Init+0x94>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80007ce:	4812      	ldr	r0, [pc, #72]	; (8000818 <MX_UART5_Init+0x94>)
 80007d0:	f002 fe3e 	bl	8003450 <HAL_UART_Init>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <MX_UART5_Init+0x5a>
  {
    Error_Handler();
 80007da:	f000 f993 	bl	8000b04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007de:	2100      	movs	r1, #0
 80007e0:	480d      	ldr	r0, [pc, #52]	; (8000818 <MX_UART5_Init+0x94>)
 80007e2:	f003 ff52 	bl	800468a <HAL_UARTEx_SetTxFifoThreshold>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_UART5_Init+0x6c>
  {
    Error_Handler();
 80007ec:	f000 f98a 	bl	8000b04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007f0:	2100      	movs	r1, #0
 80007f2:	4809      	ldr	r0, [pc, #36]	; (8000818 <MX_UART5_Init+0x94>)
 80007f4:	f003 ff87 	bl	8004706 <HAL_UARTEx_SetRxFifoThreshold>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_UART5_Init+0x7e>
  {
    Error_Handler();
 80007fe:	f000 f981 	bl	8000b04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8000802:	4805      	ldr	r0, [pc, #20]	; (8000818 <MX_UART5_Init+0x94>)
 8000804:	f003 ff08 	bl	8004618 <HAL_UARTEx_DisableFifoMode>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_UART5_Init+0x8e>
  {
    Error_Handler();
 800080e:	f000 f979 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	200004cc 	.word	0x200004cc
 800081c:	40005000 	.word	0x40005000

08000820 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000824:	4b23      	ldr	r3, [pc, #140]	; (80008b4 <MX_USART1_UART_Init+0x94>)
 8000826:	4a24      	ldr	r2, [pc, #144]	; (80008b8 <MX_USART1_UART_Init+0x98>)
 8000828:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 1200;
 800082a:	4b22      	ldr	r3, [pc, #136]	; (80008b4 <MX_USART1_UART_Init+0x94>)
 800082c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8000830:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000832:	4b20      	ldr	r3, [pc, #128]	; (80008b4 <MX_USART1_UART_Init+0x94>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000838:	4b1e      	ldr	r3, [pc, #120]	; (80008b4 <MX_USART1_UART_Init+0x94>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_EVEN;
 800083e:	4b1d      	ldr	r3, [pc, #116]	; (80008b4 <MX_USART1_UART_Init+0x94>)
 8000840:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000844:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000846:	4b1b      	ldr	r3, [pc, #108]	; (80008b4 <MX_USART1_UART_Init+0x94>)
 8000848:	220c      	movs	r2, #12
 800084a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084c:	4b19      	ldr	r3, [pc, #100]	; (80008b4 <MX_USART1_UART_Init+0x94>)
 800084e:	2200      	movs	r2, #0
 8000850:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000852:	4b18      	ldr	r3, [pc, #96]	; (80008b4 <MX_USART1_UART_Init+0x94>)
 8000854:	2200      	movs	r2, #0
 8000856:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000858:	4b16      	ldr	r3, [pc, #88]	; (80008b4 <MX_USART1_UART_Init+0x94>)
 800085a:	2200      	movs	r2, #0
 800085c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800085e:	4b15      	ldr	r3, [pc, #84]	; (80008b4 <MX_USART1_UART_Init+0x94>)
 8000860:	2200      	movs	r2, #0
 8000862:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000864:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <MX_USART1_UART_Init+0x94>)
 8000866:	2200      	movs	r2, #0
 8000868:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800086a:	4812      	ldr	r0, [pc, #72]	; (80008b4 <MX_USART1_UART_Init+0x94>)
 800086c:	f002 fdf0 	bl	8003450 <HAL_UART_Init>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8000876:	f000 f945 	bl	8000b04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800087a:	2100      	movs	r1, #0
 800087c:	480d      	ldr	r0, [pc, #52]	; (80008b4 <MX_USART1_UART_Init+0x94>)
 800087e:	f003 ff04 	bl	800468a <HAL_UARTEx_SetTxFifoThreshold>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 8000888:	f000 f93c 	bl	8000b04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800088c:	2100      	movs	r1, #0
 800088e:	4809      	ldr	r0, [pc, #36]	; (80008b4 <MX_USART1_UART_Init+0x94>)
 8000890:	f003 ff39 	bl	8004706 <HAL_UARTEx_SetRxFifoThreshold>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 800089a:	f000 f933 	bl	8000b04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800089e:	4805      	ldr	r0, [pc, #20]	; (80008b4 <MX_USART1_UART_Init+0x94>)
 80008a0:	f003 feba 	bl	8004618 <HAL_UARTEx_DisableFifoMode>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 80008aa:	f000 f92b 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000560 	.word	0x20000560
 80008b8:	40013800 	.word	0x40013800

080008bc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80008c0:	4b23      	ldr	r3, [pc, #140]	; (8000950 <MX_USART3_UART_Init+0x94>)
 80008c2:	4a24      	ldr	r2, [pc, #144]	; (8000954 <MX_USART3_UART_Init+0x98>)
 80008c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1200;
 80008c6:	4b22      	ldr	r3, [pc, #136]	; (8000950 <MX_USART3_UART_Init+0x94>)
 80008c8:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80008cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80008ce:	4b20      	ldr	r3, [pc, #128]	; (8000950 <MX_USART3_UART_Init+0x94>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80008d4:	4b1e      	ldr	r3, [pc, #120]	; (8000950 <MX_USART3_UART_Init+0x94>)
 80008d6:	2200      	movs	r2, #0
 80008d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 80008da:	4b1d      	ldr	r3, [pc, #116]	; (8000950 <MX_USART3_UART_Init+0x94>)
 80008dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80008e0:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80008e2:	4b1b      	ldr	r3, [pc, #108]	; (8000950 <MX_USART3_UART_Init+0x94>)
 80008e4:	220c      	movs	r2, #12
 80008e6:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e8:	4b19      	ldr	r3, [pc, #100]	; (8000950 <MX_USART3_UART_Init+0x94>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ee:	4b18      	ldr	r3, [pc, #96]	; (8000950 <MX_USART3_UART_Init+0x94>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008f4:	4b16      	ldr	r3, [pc, #88]	; (8000950 <MX_USART3_UART_Init+0x94>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008fa:	4b15      	ldr	r3, [pc, #84]	; (8000950 <MX_USART3_UART_Init+0x94>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000900:	4b13      	ldr	r3, [pc, #76]	; (8000950 <MX_USART3_UART_Init+0x94>)
 8000902:	2200      	movs	r2, #0
 8000904:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000906:	4812      	ldr	r0, [pc, #72]	; (8000950 <MX_USART3_UART_Init+0x94>)
 8000908:	f002 fda2 	bl	8003450 <HAL_UART_Init>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	d001      	beq.n	8000916 <MX_USART3_UART_Init+0x5a>
  {
    Error_Handler();
 8000912:	f000 f8f7 	bl	8000b04 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000916:	2100      	movs	r1, #0
 8000918:	480d      	ldr	r0, [pc, #52]	; (8000950 <MX_USART3_UART_Init+0x94>)
 800091a:	f003 feb6 	bl	800468a <HAL_UARTEx_SetTxFifoThreshold>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_USART3_UART_Init+0x6c>
  {
    Error_Handler();
 8000924:	f000 f8ee 	bl	8000b04 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000928:	2100      	movs	r1, #0
 800092a:	4809      	ldr	r0, [pc, #36]	; (8000950 <MX_USART3_UART_Init+0x94>)
 800092c:	f003 feeb 	bl	8004706 <HAL_UARTEx_SetRxFifoThreshold>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_USART3_UART_Init+0x7e>
  {
    Error_Handler();
 8000936:	f000 f8e5 	bl	8000b04 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800093a:	4805      	ldr	r0, [pc, #20]	; (8000950 <MX_USART3_UART_Init+0x94>)
 800093c:	f003 fe6c 	bl	8004618 <HAL_UARTEx_DisableFifoMode>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <MX_USART3_UART_Init+0x8e>
  {
    Error_Handler();
 8000946:	f000 f8dd 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	200005f4 	.word	0x200005f4
 8000954:	40004800 	.word	0x40004800

08000958 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800095e:	4b1e      	ldr	r3, [pc, #120]	; (80009d8 <MX_DMA_Init+0x80>)
 8000960:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000962:	4a1d      	ldr	r2, [pc, #116]	; (80009d8 <MX_DMA_Init+0x80>)
 8000964:	f043 0304 	orr.w	r3, r3, #4
 8000968:	6493      	str	r3, [r2, #72]	; 0x48
 800096a:	4b1b      	ldr	r3, [pc, #108]	; (80009d8 <MX_DMA_Init+0x80>)
 800096c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800096e:	f003 0304 	and.w	r3, r3, #4
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000976:	4b18      	ldr	r3, [pc, #96]	; (80009d8 <MX_DMA_Init+0x80>)
 8000978:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800097a:	4a17      	ldr	r2, [pc, #92]	; (80009d8 <MX_DMA_Init+0x80>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6493      	str	r3, [r2, #72]	; 0x48
 8000982:	4b15      	ldr	r3, [pc, #84]	; (80009d8 <MX_DMA_Init+0x80>)
 8000984:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	2105      	movs	r1, #5
 8000992:	200b      	movs	r0, #11
 8000994:	f000 fd72 	bl	800147c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000998:	200b      	movs	r0, #11
 800099a:	f000 fd89 	bl	80014b0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	2105      	movs	r1, #5
 80009a2:	200c      	movs	r0, #12
 80009a4:	f000 fd6a 	bl	800147c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80009a8:	200c      	movs	r0, #12
 80009aa:	f000 fd81 	bl	80014b0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 80009ae:	2200      	movs	r2, #0
 80009b0:	2105      	movs	r1, #5
 80009b2:	200d      	movs	r0, #13
 80009b4:	f000 fd62 	bl	800147c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80009b8:	200d      	movs	r0, #13
 80009ba:	f000 fd79 	bl	80014b0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80009be:	2200      	movs	r2, #0
 80009c0:	2105      	movs	r1, #5
 80009c2:	200e      	movs	r0, #14
 80009c4:	f000 fd5a 	bl	800147c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80009c8:	200e      	movs	r0, #14
 80009ca:	f000 fd71 	bl	80014b0 <HAL_NVIC_EnableIRQ>

}
 80009ce:	bf00      	nop
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40021000 	.word	0x40021000

080009dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08a      	sub	sp, #40	; 0x28
 80009e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e2:	f107 0314 	add.w	r3, r7, #20
 80009e6:	2200      	movs	r2, #0
 80009e8:	601a      	str	r2, [r3, #0]
 80009ea:	605a      	str	r2, [r3, #4]
 80009ec:	609a      	str	r2, [r3, #8]
 80009ee:	60da      	str	r2, [r3, #12]
 80009f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009f2:	4b35      	ldr	r3, [pc, #212]	; (8000ac8 <MX_GPIO_Init+0xec>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f6:	4a34      	ldr	r2, [pc, #208]	; (8000ac8 <MX_GPIO_Init+0xec>)
 80009f8:	f043 0304 	orr.w	r3, r3, #4
 80009fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009fe:	4b32      	ldr	r3, [pc, #200]	; (8000ac8 <MX_GPIO_Init+0xec>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a02:	f003 0304 	and.w	r3, r3, #4
 8000a06:	613b      	str	r3, [r7, #16]
 8000a08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a0a:	4b2f      	ldr	r3, [pc, #188]	; (8000ac8 <MX_GPIO_Init+0xec>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0e:	4a2e      	ldr	r2, [pc, #184]	; (8000ac8 <MX_GPIO_Init+0xec>)
 8000a10:	f043 0320 	orr.w	r3, r3, #32
 8000a14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a16:	4b2c      	ldr	r3, [pc, #176]	; (8000ac8 <MX_GPIO_Init+0xec>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1a:	f003 0320 	and.w	r3, r3, #32
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a22:	4b29      	ldr	r3, [pc, #164]	; (8000ac8 <MX_GPIO_Init+0xec>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a26:	4a28      	ldr	r2, [pc, #160]	; (8000ac8 <MX_GPIO_Init+0xec>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a2e:	4b26      	ldr	r3, [pc, #152]	; (8000ac8 <MX_GPIO_Init+0xec>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	60bb      	str	r3, [r7, #8]
 8000a38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3a:	4b23      	ldr	r3, [pc, #140]	; (8000ac8 <MX_GPIO_Init+0xec>)
 8000a3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a3e:	4a22      	ldr	r2, [pc, #136]	; (8000ac8 <MX_GPIO_Init+0xec>)
 8000a40:	f043 0302 	orr.w	r3, r3, #2
 8000a44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a46:	4b20      	ldr	r3, [pc, #128]	; (8000ac8 <MX_GPIO_Init+0xec>)
 8000a48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a4a:	f003 0302 	and.w	r3, r3, #2
 8000a4e:	607b      	str	r3, [r7, #4]
 8000a50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a52:	4b1d      	ldr	r3, [pc, #116]	; (8000ac8 <MX_GPIO_Init+0xec>)
 8000a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a56:	4a1c      	ldr	r2, [pc, #112]	; (8000ac8 <MX_GPIO_Init+0xec>)
 8000a58:	f043 0308 	orr.w	r3, r3, #8
 8000a5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a5e:	4b1a      	ldr	r3, [pc, #104]	; (8000ac8 <MX_GPIO_Init+0xec>)
 8000a60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a62:	f003 0308 	and.w	r3, r3, #8
 8000a66:	603b      	str	r3, [r7, #0]
 8000a68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	2120      	movs	r1, #32
 8000a6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a72:	f001 f927 	bl	8001cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a7c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	480f      	ldr	r0, [pc, #60]	; (8000acc <MX_GPIO_Init+0xf0>)
 8000a8e:	f000 ff97 	bl	80019c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a92:	2320      	movs	r3, #32
 8000a94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a96:	2301      	movs	r3, #1
 8000a98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	f107 0314 	add.w	r3, r7, #20
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aac:	f000 ff88 	bl	80019c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	2105      	movs	r1, #5
 8000ab4:	2028      	movs	r0, #40	; 0x28
 8000ab6:	f000 fce1 	bl	800147c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000aba:	2028      	movs	r0, #40	; 0x28
 8000abc:	f000 fcf8 	bl	80014b0 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ac0:	bf00      	nop
 8000ac2:	3728      	adds	r7, #40	; 0x28
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	40021000 	.word	0x40021000
 8000acc:	48000800 	.word	0x48000800

08000ad0 <StartMainTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartMainTask */
__weak void StartMainTask(void const * argument)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b082      	sub	sp, #8
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ad8:	2001      	movs	r0, #1
 8000ada:	f003 fee5 	bl	80048a8 <osDelay>
 8000ade:	e7fb      	b.n	8000ad8 <StartMainTask+0x8>

08000ae0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a04      	ldr	r2, [pc, #16]	; (8000b00 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d101      	bne.n	8000af6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000af2:	f000 fbed 	bl	80012d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40001400 	.word	0x40001400

08000b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b08:	b672      	cpsid	i
}
 8000b0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <Error_Handler+0x8>
	...

08000b10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b16:	4b12      	ldr	r3, [pc, #72]	; (8000b60 <HAL_MspInit+0x50>)
 8000b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b1a:	4a11      	ldr	r2, [pc, #68]	; (8000b60 <HAL_MspInit+0x50>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	6613      	str	r3, [r2, #96]	; 0x60
 8000b22:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <HAL_MspInit+0x50>)
 8000b24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b2e:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <HAL_MspInit+0x50>)
 8000b30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b32:	4a0b      	ldr	r2, [pc, #44]	; (8000b60 <HAL_MspInit+0x50>)
 8000b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b38:	6593      	str	r3, [r2, #88]	; 0x58
 8000b3a:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <HAL_MspInit+0x50>)
 8000b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b46:	2200      	movs	r2, #0
 8000b48:	210f      	movs	r1, #15
 8000b4a:	f06f 0001 	mvn.w	r0, #1
 8000b4e:	f000 fc95 	bl	800147c <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000b52:	f001 f997 	bl	8001e84 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	40021000 	.word	0x40021000

08000b64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b0a6      	sub	sp, #152	; 0x98
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]
 8000b7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b7c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b80:	2250      	movs	r2, #80	; 0x50
 8000b82:	2100      	movs	r1, #0
 8000b84:	4618      	mov	r0, r3
 8000b86:	f005 f9b3 	bl	8005ef0 <memset>
  if(huart->Instance==LPUART1)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	4aa8      	ldr	r2, [pc, #672]	; (8000e30 <HAL_UART_MspInit+0x2cc>)
 8000b90:	4293      	cmp	r3, r2
 8000b92:	d144      	bne.n	8000c1e <HAL_UART_MspInit+0xba>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000b94:	2320      	movs	r3, #32
 8000b96:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b9c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	f001 fedf 	bl	8002964 <HAL_RCCEx_PeriphCLKConfig>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000bac:	f7ff ffaa 	bl	8000b04 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bb0:	4ba0      	ldr	r3, [pc, #640]	; (8000e34 <HAL_UART_MspInit+0x2d0>)
 8000bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bb4:	4a9f      	ldr	r2, [pc, #636]	; (8000e34 <HAL_UART_MspInit+0x2d0>)
 8000bb6:	f043 0301 	orr.w	r3, r3, #1
 8000bba:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000bbc:	4b9d      	ldr	r3, [pc, #628]	; (8000e34 <HAL_UART_MspInit+0x2d0>)
 8000bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000bc0:	f003 0301 	and.w	r3, r3, #1
 8000bc4:	633b      	str	r3, [r7, #48]	; 0x30
 8000bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc8:	4b9a      	ldr	r3, [pc, #616]	; (8000e34 <HAL_UART_MspInit+0x2d0>)
 8000bca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bcc:	4a99      	ldr	r2, [pc, #612]	; (8000e34 <HAL_UART_MspInit+0x2d0>)
 8000bce:	f043 0301 	orr.w	r3, r3, #1
 8000bd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bd4:	4b97      	ldr	r3, [pc, #604]	; (8000e34 <HAL_UART_MspInit+0x2d0>)
 8000bd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd8:	f003 0301 	and.w	r3, r3, #1
 8000bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000be0:	230c      	movs	r3, #12
 8000be2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be6:	2302      	movs	r3, #2
 8000be8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bec:	2300      	movs	r3, #0
 8000bee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000bf8:	230c      	movs	r3, #12
 8000bfa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfe:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000c02:	4619      	mov	r1, r3
 8000c04:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c08:	f000 feda 	bl	80019c0 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	2105      	movs	r1, #5
 8000c10:	205b      	movs	r0, #91	; 0x5b
 8000c12:	f000 fc33 	bl	800147c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000c16:	205b      	movs	r0, #91	; 0x5b
 8000c18:	f000 fc4a 	bl	80014b0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c1c:	e200      	b.n	8001020 <HAL_UART_MspInit+0x4bc>
  else if(huart->Instance==UART4)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a85      	ldr	r2, [pc, #532]	; (8000e38 <HAL_UART_MspInit+0x2d4>)
 8000c24:	4293      	cmp	r3, r2
 8000c26:	d16d      	bne.n	8000d04 <HAL_UART_MspInit+0x1a0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8000c28:	2308      	movs	r3, #8
 8000c2a:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c30:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c34:	4618      	mov	r0, r3
 8000c36:	f001 fe95 	bl	8002964 <HAL_RCCEx_PeriphCLKConfig>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d001      	beq.n	8000c44 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 8000c40:	f7ff ff60 	bl	8000b04 <Error_Handler>
    __HAL_RCC_UART4_CLK_ENABLE();
 8000c44:	4b7b      	ldr	r3, [pc, #492]	; (8000e34 <HAL_UART_MspInit+0x2d0>)
 8000c46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c48:	4a7a      	ldr	r2, [pc, #488]	; (8000e34 <HAL_UART_MspInit+0x2d0>)
 8000c4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000c4e:	6593      	str	r3, [r2, #88]	; 0x58
 8000c50:	4b78      	ldr	r3, [pc, #480]	; (8000e34 <HAL_UART_MspInit+0x2d0>)
 8000c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8000c58:	62bb      	str	r3, [r7, #40]	; 0x28
 8000c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5c:	4b75      	ldr	r3, [pc, #468]	; (8000e34 <HAL_UART_MspInit+0x2d0>)
 8000c5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c60:	4a74      	ldr	r2, [pc, #464]	; (8000e34 <HAL_UART_MspInit+0x2d0>)
 8000c62:	f043 0304 	orr.w	r3, r3, #4
 8000c66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c68:	4b72      	ldr	r3, [pc, #456]	; (8000e34 <HAL_UART_MspInit+0x2d0>)
 8000c6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c6c:	f003 0304 	and.w	r3, r3, #4
 8000c70:	627b      	str	r3, [r7, #36]	; 0x24
 8000c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c74:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c82:	2300      	movs	r3, #0
 8000c84:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF5_UART4;
 8000c8e:	2305      	movs	r3, #5
 8000c90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c94:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4868      	ldr	r0, [pc, #416]	; (8000e3c <HAL_UART_MspInit+0x2d8>)
 8000c9c:	f000 fe90 	bl	80019c0 <HAL_GPIO_Init>
    hdma_uart4_tx.Instance = DMA1_Channel1;
 8000ca0:	4b67      	ldr	r3, [pc, #412]	; (8000e40 <HAL_UART_MspInit+0x2dc>)
 8000ca2:	4a68      	ldr	r2, [pc, #416]	; (8000e44 <HAL_UART_MspInit+0x2e0>)
 8000ca4:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Request = DMA_REQUEST_UART4_TX;
 8000ca6:	4b66      	ldr	r3, [pc, #408]	; (8000e40 <HAL_UART_MspInit+0x2dc>)
 8000ca8:	221f      	movs	r2, #31
 8000caa:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cac:	4b64      	ldr	r3, [pc, #400]	; (8000e40 <HAL_UART_MspInit+0x2dc>)
 8000cae:	2210      	movs	r2, #16
 8000cb0:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cb2:	4b63      	ldr	r3, [pc, #396]	; (8000e40 <HAL_UART_MspInit+0x2dc>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000cb8:	4b61      	ldr	r3, [pc, #388]	; (8000e40 <HAL_UART_MspInit+0x2dc>)
 8000cba:	2280      	movs	r2, #128	; 0x80
 8000cbc:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cbe:	4b60      	ldr	r3, [pc, #384]	; (8000e40 <HAL_UART_MspInit+0x2dc>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cc4:	4b5e      	ldr	r3, [pc, #376]	; (8000e40 <HAL_UART_MspInit+0x2dc>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8000cca:	4b5d      	ldr	r3, [pc, #372]	; (8000e40 <HAL_UART_MspInit+0x2dc>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000cd0:	4b5b      	ldr	r3, [pc, #364]	; (8000e40 <HAL_UART_MspInit+0x2dc>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8000cd6:	485a      	ldr	r0, [pc, #360]	; (8000e40 <HAL_UART_MspInit+0x2dc>)
 8000cd8:	f000 fbf8 	bl	80014cc <HAL_DMA_Init>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <HAL_UART_MspInit+0x182>
      Error_Handler();
 8000ce2:	f7ff ff0f 	bl	8000b04 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	4a55      	ldr	r2, [pc, #340]	; (8000e40 <HAL_UART_MspInit+0x2dc>)
 8000cea:	67da      	str	r2, [r3, #124]	; 0x7c
 8000cec:	4a54      	ldr	r2, [pc, #336]	; (8000e40 <HAL_UART_MspInit+0x2dc>)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2105      	movs	r1, #5
 8000cf6:	2034      	movs	r0, #52	; 0x34
 8000cf8:	f000 fbc0 	bl	800147c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000cfc:	2034      	movs	r0, #52	; 0x34
 8000cfe:	f000 fbd7 	bl	80014b0 <HAL_NVIC_EnableIRQ>
}
 8000d02:	e18d      	b.n	8001020 <HAL_UART_MspInit+0x4bc>
  else if(huart->Instance==UART5)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	4a4f      	ldr	r2, [pc, #316]	; (8000e48 <HAL_UART_MspInit+0x2e4>)
 8000d0a:	4293      	cmp	r3, r2
 8000d0c:	f040 80a4 	bne.w	8000e58 <HAL_UART_MspInit+0x2f4>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8000d10:	2310      	movs	r3, #16
 8000d12:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8000d14:	2300      	movs	r3, #0
 8000d16:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d18:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f001 fe21 	bl	8002964 <HAL_RCCEx_PeriphCLKConfig>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d001      	beq.n	8000d2c <HAL_UART_MspInit+0x1c8>
      Error_Handler();
 8000d28:	f7ff feec 	bl	8000b04 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8000d2c:	4b41      	ldr	r3, [pc, #260]	; (8000e34 <HAL_UART_MspInit+0x2d0>)
 8000d2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d30:	4a40      	ldr	r2, [pc, #256]	; (8000e34 <HAL_UART_MspInit+0x2d0>)
 8000d32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000d36:	6593      	str	r3, [r2, #88]	; 0x58
 8000d38:	4b3e      	ldr	r3, [pc, #248]	; (8000e34 <HAL_UART_MspInit+0x2d0>)
 8000d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d40:	623b      	str	r3, [r7, #32]
 8000d42:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d44:	4b3b      	ldr	r3, [pc, #236]	; (8000e34 <HAL_UART_MspInit+0x2d0>)
 8000d46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d48:	4a3a      	ldr	r2, [pc, #232]	; (8000e34 <HAL_UART_MspInit+0x2d0>)
 8000d4a:	f043 0304 	orr.w	r3, r3, #4
 8000d4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d50:	4b38      	ldr	r3, [pc, #224]	; (8000e34 <HAL_UART_MspInit+0x2d0>)
 8000d52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d54:	f003 0304 	and.w	r3, r3, #4
 8000d58:	61fb      	str	r3, [r7, #28]
 8000d5a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d5c:	4b35      	ldr	r3, [pc, #212]	; (8000e34 <HAL_UART_MspInit+0x2d0>)
 8000d5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d60:	4a34      	ldr	r2, [pc, #208]	; (8000e34 <HAL_UART_MspInit+0x2d0>)
 8000d62:	f043 0308 	orr.w	r3, r3, #8
 8000d66:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d68:	4b32      	ldr	r3, [pc, #200]	; (8000e34 <HAL_UART_MspInit+0x2d0>)
 8000d6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d6c:	f003 0308 	and.w	r3, r3, #8
 8000d70:	61bb      	str	r3, [r7, #24]
 8000d72:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000d74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d82:	2300      	movs	r3, #0
 8000d84:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8000d8e:	2305      	movs	r3, #5
 8000d90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d94:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4828      	ldr	r0, [pc, #160]	; (8000e3c <HAL_UART_MspInit+0x2d8>)
 8000d9c:	f000 fe10 	bl	80019c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000da0:	2304      	movs	r3, #4
 8000da2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da6:	2302      	movs	r3, #2
 8000da8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db2:	2300      	movs	r3, #0
 8000db4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 8000db8:	2305      	movs	r3, #5
 8000dba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dbe:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4821      	ldr	r0, [pc, #132]	; (8000e4c <HAL_UART_MspInit+0x2e8>)
 8000dc6:	f000 fdfb 	bl	80019c0 <HAL_GPIO_Init>
    hdma_uart5_tx.Instance = DMA1_Channel2;
 8000dca:	4b21      	ldr	r3, [pc, #132]	; (8000e50 <HAL_UART_MspInit+0x2ec>)
 8000dcc:	4a21      	ldr	r2, [pc, #132]	; (8000e54 <HAL_UART_MspInit+0x2f0>)
 8000dce:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Request = DMA_REQUEST_UART5_TX;
 8000dd0:	4b1f      	ldr	r3, [pc, #124]	; (8000e50 <HAL_UART_MspInit+0x2ec>)
 8000dd2:	2221      	movs	r2, #33	; 0x21
 8000dd4:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000dd6:	4b1e      	ldr	r3, [pc, #120]	; (8000e50 <HAL_UART_MspInit+0x2ec>)
 8000dd8:	2210      	movs	r2, #16
 8000dda:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ddc:	4b1c      	ldr	r3, [pc, #112]	; (8000e50 <HAL_UART_MspInit+0x2ec>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000de2:	4b1b      	ldr	r3, [pc, #108]	; (8000e50 <HAL_UART_MspInit+0x2ec>)
 8000de4:	2280      	movs	r2, #128	; 0x80
 8000de6:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000de8:	4b19      	ldr	r3, [pc, #100]	; (8000e50 <HAL_UART_MspInit+0x2ec>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dee:	4b18      	ldr	r3, [pc, #96]	; (8000e50 <HAL_UART_MspInit+0x2ec>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8000df4:	4b16      	ldr	r3, [pc, #88]	; (8000e50 <HAL_UART_MspInit+0x2ec>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000dfa:	4b15      	ldr	r3, [pc, #84]	; (8000e50 <HAL_UART_MspInit+0x2ec>)
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8000e00:	4813      	ldr	r0, [pc, #76]	; (8000e50 <HAL_UART_MspInit+0x2ec>)
 8000e02:	f000 fb63 	bl	80014cc <HAL_DMA_Init>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <HAL_UART_MspInit+0x2ac>
      Error_Handler();
 8000e0c:	f7ff fe7a 	bl	8000b04 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	4a0f      	ldr	r2, [pc, #60]	; (8000e50 <HAL_UART_MspInit+0x2ec>)
 8000e14:	67da      	str	r2, [r3, #124]	; 0x7c
 8000e16:	4a0e      	ldr	r2, [pc, #56]	; (8000e50 <HAL_UART_MspInit+0x2ec>)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	2105      	movs	r1, #5
 8000e20:	2035      	movs	r0, #53	; 0x35
 8000e22:	f000 fb2b 	bl	800147c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8000e26:	2035      	movs	r0, #53	; 0x35
 8000e28:	f000 fb42 	bl	80014b0 <HAL_NVIC_EnableIRQ>
}
 8000e2c:	e0f8      	b.n	8001020 <HAL_UART_MspInit+0x4bc>
 8000e2e:	bf00      	nop
 8000e30:	40008000 	.word	0x40008000
 8000e34:	40021000 	.word	0x40021000
 8000e38:	40004c00 	.word	0x40004c00
 8000e3c:	48000800 	.word	0x48000800
 8000e40:	20000688 	.word	0x20000688
 8000e44:	40020008 	.word	0x40020008
 8000e48:	40005000 	.word	0x40005000
 8000e4c:	48000c00 	.word	0x48000c00
 8000e50:	200006e8 	.word	0x200006e8
 8000e54:	4002001c 	.word	0x4002001c
  else if(huart->Instance==USART1)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a72      	ldr	r2, [pc, #456]	; (8001028 <HAL_UART_MspInit+0x4c4>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d16c      	bne.n	8000f3c <HAL_UART_MspInit+0x3d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e62:	2301      	movs	r3, #1
 8000e64:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e66:	2300      	movs	r3, #0
 8000e68:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e6a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f001 fd78 	bl	8002964 <HAL_RCCEx_PeriphCLKConfig>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <HAL_UART_MspInit+0x31a>
      Error_Handler();
 8000e7a:	f7ff fe43 	bl	8000b04 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e7e:	4b6b      	ldr	r3, [pc, #428]	; (800102c <HAL_UART_MspInit+0x4c8>)
 8000e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e82:	4a6a      	ldr	r2, [pc, #424]	; (800102c <HAL_UART_MspInit+0x4c8>)
 8000e84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e88:	6613      	str	r3, [r2, #96]	; 0x60
 8000e8a:	4b68      	ldr	r3, [pc, #416]	; (800102c <HAL_UART_MspInit+0x4c8>)
 8000e8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e92:	617b      	str	r3, [r7, #20]
 8000e94:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e96:	4b65      	ldr	r3, [pc, #404]	; (800102c <HAL_UART_MspInit+0x4c8>)
 8000e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e9a:	4a64      	ldr	r2, [pc, #400]	; (800102c <HAL_UART_MspInit+0x4c8>)
 8000e9c:	f043 0304 	orr.w	r3, r3, #4
 8000ea0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ea2:	4b62      	ldr	r3, [pc, #392]	; (800102c <HAL_UART_MspInit+0x4c8>)
 8000ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea6:	f003 0304 	and.w	r3, r3, #4
 8000eaa:	613b      	str	r3, [r7, #16]
 8000eac:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000eae:	2330      	movs	r3, #48	; 0x30
 8000eb0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ec6:	2307      	movs	r3, #7
 8000ec8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ecc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4857      	ldr	r0, [pc, #348]	; (8001030 <HAL_UART_MspInit+0x4cc>)
 8000ed4:	f000 fd74 	bl	80019c0 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel3;
 8000ed8:	4b56      	ldr	r3, [pc, #344]	; (8001034 <HAL_UART_MspInit+0x4d0>)
 8000eda:	4a57      	ldr	r2, [pc, #348]	; (8001038 <HAL_UART_MspInit+0x4d4>)
 8000edc:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8000ede:	4b55      	ldr	r3, [pc, #340]	; (8001034 <HAL_UART_MspInit+0x4d0>)
 8000ee0:	2219      	movs	r2, #25
 8000ee2:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ee4:	4b53      	ldr	r3, [pc, #332]	; (8001034 <HAL_UART_MspInit+0x4d0>)
 8000ee6:	2210      	movs	r2, #16
 8000ee8:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eea:	4b52      	ldr	r3, [pc, #328]	; (8001034 <HAL_UART_MspInit+0x4d0>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ef0:	4b50      	ldr	r3, [pc, #320]	; (8001034 <HAL_UART_MspInit+0x4d0>)
 8000ef2:	2280      	movs	r2, #128	; 0x80
 8000ef4:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ef6:	4b4f      	ldr	r3, [pc, #316]	; (8001034 <HAL_UART_MspInit+0x4d0>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000efc:	4b4d      	ldr	r3, [pc, #308]	; (8001034 <HAL_UART_MspInit+0x4d0>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000f02:	4b4c      	ldr	r3, [pc, #304]	; (8001034 <HAL_UART_MspInit+0x4d0>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f08:	4b4a      	ldr	r3, [pc, #296]	; (8001034 <HAL_UART_MspInit+0x4d0>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000f0e:	4849      	ldr	r0, [pc, #292]	; (8001034 <HAL_UART_MspInit+0x4d0>)
 8000f10:	f000 fadc 	bl	80014cc <HAL_DMA_Init>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <HAL_UART_MspInit+0x3ba>
      Error_Handler();
 8000f1a:	f7ff fdf3 	bl	8000b04 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a44      	ldr	r2, [pc, #272]	; (8001034 <HAL_UART_MspInit+0x4d0>)
 8000f22:	67da      	str	r2, [r3, #124]	; 0x7c
 8000f24:	4a43      	ldr	r2, [pc, #268]	; (8001034 <HAL_UART_MspInit+0x4d0>)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2105      	movs	r1, #5
 8000f2e:	2025      	movs	r0, #37	; 0x25
 8000f30:	f000 faa4 	bl	800147c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f34:	2025      	movs	r0, #37	; 0x25
 8000f36:	f000 fabb 	bl	80014b0 <HAL_NVIC_EnableIRQ>
}
 8000f3a:	e071      	b.n	8001020 <HAL_UART_MspInit+0x4bc>
  else if(huart->Instance==USART3)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a3e      	ldr	r2, [pc, #248]	; (800103c <HAL_UART_MspInit+0x4d8>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d16c      	bne.n	8001020 <HAL_UART_MspInit+0x4bc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f46:	2304      	movs	r3, #4
 8000f48:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f4e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000f52:	4618      	mov	r0, r3
 8000f54:	f001 fd06 	bl	8002964 <HAL_RCCEx_PeriphCLKConfig>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <HAL_UART_MspInit+0x3fe>
      Error_Handler();
 8000f5e:	f7ff fdd1 	bl	8000b04 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f62:	4b32      	ldr	r3, [pc, #200]	; (800102c <HAL_UART_MspInit+0x4c8>)
 8000f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f66:	4a31      	ldr	r2, [pc, #196]	; (800102c <HAL_UART_MspInit+0x4c8>)
 8000f68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f6c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f6e:	4b2f      	ldr	r3, [pc, #188]	; (800102c <HAL_UART_MspInit+0x4c8>)
 8000f70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f7a:	4b2c      	ldr	r3, [pc, #176]	; (800102c <HAL_UART_MspInit+0x4c8>)
 8000f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f7e:	4a2b      	ldr	r2, [pc, #172]	; (800102c <HAL_UART_MspInit+0x4c8>)
 8000f80:	f043 0302 	orr.w	r3, r3, #2
 8000f84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f86:	4b29      	ldr	r3, [pc, #164]	; (800102c <HAL_UART_MspInit+0x4c8>)
 8000f88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8a:	f003 0302 	and.w	r3, r3, #2
 8000f8e:	60bb      	str	r3, [r7, #8]
 8000f90:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f92:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fac:	2307      	movs	r3, #7
 8000fae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb2:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4821      	ldr	r0, [pc, #132]	; (8001040 <HAL_UART_MspInit+0x4dc>)
 8000fba:	f000 fd01 	bl	80019c0 <HAL_GPIO_Init>
    hdma_usart3_tx.Instance = DMA1_Channel4;
 8000fbe:	4b21      	ldr	r3, [pc, #132]	; (8001044 <HAL_UART_MspInit+0x4e0>)
 8000fc0:	4a21      	ldr	r2, [pc, #132]	; (8001048 <HAL_UART_MspInit+0x4e4>)
 8000fc2:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8000fc4:	4b1f      	ldr	r3, [pc, #124]	; (8001044 <HAL_UART_MspInit+0x4e0>)
 8000fc6:	221d      	movs	r2, #29
 8000fc8:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fca:	4b1e      	ldr	r3, [pc, #120]	; (8001044 <HAL_UART_MspInit+0x4e0>)
 8000fcc:	2210      	movs	r2, #16
 8000fce:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fd0:	4b1c      	ldr	r3, [pc, #112]	; (8001044 <HAL_UART_MspInit+0x4e0>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000fd6:	4b1b      	ldr	r3, [pc, #108]	; (8001044 <HAL_UART_MspInit+0x4e0>)
 8000fd8:	2280      	movs	r2, #128	; 0x80
 8000fda:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fdc:	4b19      	ldr	r3, [pc, #100]	; (8001044 <HAL_UART_MspInit+0x4e0>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fe2:	4b18      	ldr	r3, [pc, #96]	; (8001044 <HAL_UART_MspInit+0x4e0>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8000fe8:	4b16      	ldr	r3, [pc, #88]	; (8001044 <HAL_UART_MspInit+0x4e0>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000fee:	4b15      	ldr	r3, [pc, #84]	; (8001044 <HAL_UART_MspInit+0x4e0>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8000ff4:	4813      	ldr	r0, [pc, #76]	; (8001044 <HAL_UART_MspInit+0x4e0>)
 8000ff6:	f000 fa69 	bl	80014cc <HAL_DMA_Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <HAL_UART_MspInit+0x4a0>
      Error_Handler();
 8001000:	f7ff fd80 	bl	8000b04 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a0f      	ldr	r2, [pc, #60]	; (8001044 <HAL_UART_MspInit+0x4e0>)
 8001008:	67da      	str	r2, [r3, #124]	; 0x7c
 800100a:	4a0e      	ldr	r2, [pc, #56]	; (8001044 <HAL_UART_MspInit+0x4e0>)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8001010:	2200      	movs	r2, #0
 8001012:	2105      	movs	r1, #5
 8001014:	2027      	movs	r0, #39	; 0x27
 8001016:	f000 fa31 	bl	800147c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800101a:	2027      	movs	r0, #39	; 0x27
 800101c:	f000 fa48 	bl	80014b0 <HAL_NVIC_EnableIRQ>
}
 8001020:	bf00      	nop
 8001022:	3798      	adds	r7, #152	; 0x98
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40013800 	.word	0x40013800
 800102c:	40021000 	.word	0x40021000
 8001030:	48000800 	.word	0x48000800
 8001034:	20000748 	.word	0x20000748
 8001038:	40020030 	.word	0x40020030
 800103c:	40004800 	.word	0x40004800
 8001040:	48000400 	.word	0x48000400
 8001044:	200007a8 	.word	0x200007a8
 8001048:	40020044 	.word	0x40020044

0800104c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08c      	sub	sp, #48	; 0x30
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001054:	2300      	movs	r3, #0
 8001056:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8001058:	2300      	movs	r3, #0
 800105a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 800105c:	4b2c      	ldr	r3, [pc, #176]	; (8001110 <HAL_InitTick+0xc4>)
 800105e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001060:	4a2b      	ldr	r2, [pc, #172]	; (8001110 <HAL_InitTick+0xc4>)
 8001062:	f043 0320 	orr.w	r3, r3, #32
 8001066:	6593      	str	r3, [r2, #88]	; 0x58
 8001068:	4b29      	ldr	r3, [pc, #164]	; (8001110 <HAL_InitTick+0xc4>)
 800106a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800106c:	f003 0320 	and.w	r3, r3, #32
 8001070:	60bb      	str	r3, [r7, #8]
 8001072:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001074:	f107 020c 	add.w	r2, r7, #12
 8001078:	f107 0310 	add.w	r3, r7, #16
 800107c:	4611      	mov	r1, r2
 800107e:	4618      	mov	r0, r3
 8001080:	f001 fbf8 	bl	8002874 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001084:	f001 fbca 	bl	800281c <HAL_RCC_GetPCLK1Freq>
 8001088:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800108a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800108c:	4a21      	ldr	r2, [pc, #132]	; (8001114 <HAL_InitTick+0xc8>)
 800108e:	fba2 2303 	umull	r2, r3, r2, r3
 8001092:	0c9b      	lsrs	r3, r3, #18
 8001094:	3b01      	subs	r3, #1
 8001096:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001098:	4b1f      	ldr	r3, [pc, #124]	; (8001118 <HAL_InitTick+0xcc>)
 800109a:	4a20      	ldr	r2, [pc, #128]	; (800111c <HAL_InitTick+0xd0>)
 800109c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800109e:	4b1e      	ldr	r3, [pc, #120]	; (8001118 <HAL_InitTick+0xcc>)
 80010a0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010a4:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80010a6:	4a1c      	ldr	r2, [pc, #112]	; (8001118 <HAL_InitTick+0xcc>)
 80010a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010aa:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 80010ac:	4b1a      	ldr	r3, [pc, #104]	; (8001118 <HAL_InitTick+0xcc>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b2:	4b19      	ldr	r3, [pc, #100]	; (8001118 <HAL_InitTick+0xcc>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim7);
 80010b8:	4817      	ldr	r0, [pc, #92]	; (8001118 <HAL_InitTick+0xcc>)
 80010ba:	f001 fe8f 	bl	8002ddc <HAL_TIM_Base_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80010c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d11b      	bne.n	8001104 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 80010cc:	4812      	ldr	r0, [pc, #72]	; (8001118 <HAL_InitTick+0xcc>)
 80010ce:	f001 fee7 	bl	8002ea0 <HAL_TIM_Base_Start_IT>
 80010d2:	4603      	mov	r3, r0
 80010d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80010d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d111      	bne.n	8001104 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80010e0:	2037      	movs	r0, #55	; 0x37
 80010e2:	f000 f9e5 	bl	80014b0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2b0f      	cmp	r3, #15
 80010ea:	d808      	bhi.n	80010fe <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 80010ec:	2200      	movs	r2, #0
 80010ee:	6879      	ldr	r1, [r7, #4]
 80010f0:	2037      	movs	r0, #55	; 0x37
 80010f2:	f000 f9c3 	bl	800147c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010f6:	4a0a      	ldr	r2, [pc, #40]	; (8001120 <HAL_InitTick+0xd4>)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6013      	str	r3, [r2, #0]
 80010fc:	e002      	b.n	8001104 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80010fe:	2301      	movs	r3, #1
 8001100:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001104:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001108:	4618      	mov	r0, r3
 800110a:	3730      	adds	r7, #48	; 0x30
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	40021000 	.word	0x40021000
 8001114:	431bde83 	.word	0x431bde83
 8001118:	20000c60 	.word	0x20000c60
 800111c:	40001400 	.word	0x40001400
 8001120:	20000004 	.word	0x20000004

08001124 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001128:	e7fe      	b.n	8001128 <NMI_Handler+0x4>

0800112a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800112a:	b480      	push	{r7}
 800112c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800112e:	e7fe      	b.n	800112e <HardFault_Handler+0x4>

08001130 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001134:	e7fe      	b.n	8001134 <MemManage_Handler+0x4>

08001136 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800113a:	e7fe      	b.n	800113a <BusFault_Handler+0x4>

0800113c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001140:	e7fe      	b.n	8001140 <UsageFault_Handler+0x4>

08001142 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001142:	b480      	push	{r7}
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001154:	4802      	ldr	r0, [pc, #8]	; (8001160 <DMA1_Channel1_IRQHandler+0x10>)
 8001156:	f000 fb21 	bl	800179c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000688 	.word	0x20000688

08001164 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8001168:	4802      	ldr	r0, [pc, #8]	; (8001174 <DMA1_Channel2_IRQHandler+0x10>)
 800116a:	f000 fb17 	bl	800179c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	200006e8 	.word	0x200006e8

08001178 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800117c:	4802      	ldr	r0, [pc, #8]	; (8001188 <DMA1_Channel3_IRQHandler+0x10>)
 800117e:	f000 fb0d 	bl	800179c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000748 	.word	0x20000748

0800118c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001190:	4802      	ldr	r0, [pc, #8]	; (800119c <DMA1_Channel4_IRQHandler+0x10>)
 8001192:	f000 fb03 	bl	800179c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	200007a8 	.word	0x200007a8

080011a0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011a4:	4802      	ldr	r0, [pc, #8]	; (80011b0 <USART1_IRQHandler+0x10>)
 80011a6:	f002 f9a3 	bl	80034f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000560 	.word	0x20000560

080011b4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80011b8:	4802      	ldr	r0, [pc, #8]	; (80011c4 <USART3_IRQHandler+0x10>)
 80011ba:	f002 f999 	bl	80034f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	200005f4 	.word	0x200005f4

080011c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80011cc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80011d0:	f000 fd90 	bl	8001cf4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt / UART4 wake-up interrupt through EXTI line 34.
  */
void UART4_IRQHandler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80011dc:	4802      	ldr	r0, [pc, #8]	; (80011e8 <UART4_IRQHandler+0x10>)
 80011de:	f002 f987 	bl	80034f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000438 	.word	0x20000438

080011ec <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt / UART5 wake-up interrupt through EXTI line 35.
  */
void UART5_IRQHandler(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80011f0:	4802      	ldr	r0, [pc, #8]	; (80011fc <UART5_IRQHandler+0x10>)
 80011f2:	f002 f97d 	bl	80034f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	200004cc 	.word	0x200004cc

08001200 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001204:	4802      	ldr	r0, [pc, #8]	; (8001210 <TIM7_IRQHandler+0x10>)
 8001206:	f001 febb 	bl	8002f80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000c60 	.word	0x20000c60

08001214 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001218:	4802      	ldr	r0, [pc, #8]	; (8001224 <LPUART1_IRQHandler+0x10>)
 800121a:	f002 f969 	bl	80034f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	200003a4 	.word	0x200003a4

08001228 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800122c:	4b06      	ldr	r3, [pc, #24]	; (8001248 <SystemInit+0x20>)
 800122e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001232:	4a05      	ldr	r2, [pc, #20]	; (8001248 <SystemInit+0x20>)
 8001234:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001238:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800123c:	bf00      	nop
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	e000ed00 	.word	0xe000ed00

0800124c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800124c:	480d      	ldr	r0, [pc, #52]	; (8001284 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800124e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001250:	f7ff ffea 	bl	8001228 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001254:	480c      	ldr	r0, [pc, #48]	; (8001288 <LoopForever+0x6>)
  ldr r1, =_edata
 8001256:	490d      	ldr	r1, [pc, #52]	; (800128c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001258:	4a0d      	ldr	r2, [pc, #52]	; (8001290 <LoopForever+0xe>)
  movs r3, #0
 800125a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800125c:	e002      	b.n	8001264 <LoopCopyDataInit>

0800125e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800125e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001260:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001262:	3304      	adds	r3, #4

08001264 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001264:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001266:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001268:	d3f9      	bcc.n	800125e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800126a:	4a0a      	ldr	r2, [pc, #40]	; (8001294 <LoopForever+0x12>)
  ldr r4, =_ebss
 800126c:	4c0a      	ldr	r4, [pc, #40]	; (8001298 <LoopForever+0x16>)
  movs r3, #0
 800126e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001270:	e001      	b.n	8001276 <LoopFillZerobss>

08001272 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001272:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001274:	3204      	adds	r2, #4

08001276 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001276:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001278:	d3fb      	bcc.n	8001272 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800127a:	f004 fe41 	bl	8005f00 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800127e:	f7ff f96f 	bl	8000560 <main>

08001282 <LoopForever>:

LoopForever:
    b LoopForever
 8001282:	e7fe      	b.n	8001282 <LoopForever>
  ldr   r0, =_estack
 8001284:	2001c000 	.word	0x2001c000
  ldr r0, =_sdata
 8001288:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800128c:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8001290:	08006070 	.word	0x08006070
  ldr r2, =_sbss
 8001294:	20000134 	.word	0x20000134
  ldr r4, =_ebss
 8001298:	20000de4 	.word	0x20000de4

0800129c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800129c:	e7fe      	b.n	800129c <ADC1_2_IRQHandler>

0800129e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800129e:	b580      	push	{r7, lr}
 80012a0:	b082      	sub	sp, #8
 80012a2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012a4:	2300      	movs	r3, #0
 80012a6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012a8:	2003      	movs	r0, #3
 80012aa:	f000 f8dc 	bl	8001466 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012ae:	200f      	movs	r0, #15
 80012b0:	f7ff fecc 	bl	800104c <HAL_InitTick>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d002      	beq.n	80012c0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	71fb      	strb	r3, [r7, #7]
 80012be:	e001      	b.n	80012c4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012c0:	f7ff fc26 	bl	8000b10 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012c4:	79fb      	ldrb	r3, [r7, #7]

}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
	...

080012d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012d4:	4b05      	ldr	r3, [pc, #20]	; (80012ec <HAL_IncTick+0x1c>)
 80012d6:	681a      	ldr	r2, [r3, #0]
 80012d8:	4b05      	ldr	r3, [pc, #20]	; (80012f0 <HAL_IncTick+0x20>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	4413      	add	r3, r2
 80012de:	4a03      	ldr	r2, [pc, #12]	; (80012ec <HAL_IncTick+0x1c>)
 80012e0:	6013      	str	r3, [r2, #0]
}
 80012e2:	bf00      	nop
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	20000cac 	.word	0x20000cac
 80012f0:	20000008 	.word	0x20000008

080012f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  return uwTick;
 80012f8:	4b03      	ldr	r3, [pc, #12]	; (8001308 <HAL_GetTick+0x14>)
 80012fa:	681b      	ldr	r3, [r3, #0]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	20000cac 	.word	0x20000cac

0800130c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800131c:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <__NVIC_SetPriorityGrouping+0x44>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001322:	68ba      	ldr	r2, [r7, #8]
 8001324:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001328:	4013      	ands	r3, r2
 800132a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001334:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800133c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800133e:	4a04      	ldr	r2, [pc, #16]	; (8001350 <__NVIC_SetPriorityGrouping+0x44>)
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	60d3      	str	r3, [r2, #12]
}
 8001344:	bf00      	nop
 8001346:	3714      	adds	r7, #20
 8001348:	46bd      	mov	sp, r7
 800134a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134e:	4770      	bx	lr
 8001350:	e000ed00 	.word	0xe000ed00

08001354 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001358:	4b04      	ldr	r3, [pc, #16]	; (800136c <__NVIC_GetPriorityGrouping+0x18>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	0a1b      	lsrs	r3, r3, #8
 800135e:	f003 0307 	and.w	r3, r3, #7
}
 8001362:	4618      	mov	r0, r3
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800137a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137e:	2b00      	cmp	r3, #0
 8001380:	db0b      	blt.n	800139a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	f003 021f 	and.w	r2, r3, #31
 8001388:	4907      	ldr	r1, [pc, #28]	; (80013a8 <__NVIC_EnableIRQ+0x38>)
 800138a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800138e:	095b      	lsrs	r3, r3, #5
 8001390:	2001      	movs	r0, #1
 8001392:	fa00 f202 	lsl.w	r2, r0, r2
 8001396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	e000e100 	.word	0xe000e100

080013ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	6039      	str	r1, [r7, #0]
 80013b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	db0a      	blt.n	80013d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	490c      	ldr	r1, [pc, #48]	; (80013f8 <__NVIC_SetPriority+0x4c>)
 80013c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ca:	0112      	lsls	r2, r2, #4
 80013cc:	b2d2      	uxtb	r2, r2
 80013ce:	440b      	add	r3, r1
 80013d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013d4:	e00a      	b.n	80013ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	4908      	ldr	r1, [pc, #32]	; (80013fc <__NVIC_SetPriority+0x50>)
 80013dc:	79fb      	ldrb	r3, [r7, #7]
 80013de:	f003 030f 	and.w	r3, r3, #15
 80013e2:	3b04      	subs	r3, #4
 80013e4:	0112      	lsls	r2, r2, #4
 80013e6:	b2d2      	uxtb	r2, r2
 80013e8:	440b      	add	r3, r1
 80013ea:	761a      	strb	r2, [r3, #24]
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	e000e100 	.word	0xe000e100
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001400:	b480      	push	{r7}
 8001402:	b089      	sub	sp, #36	; 0x24
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	f1c3 0307 	rsb	r3, r3, #7
 800141a:	2b04      	cmp	r3, #4
 800141c:	bf28      	it	cs
 800141e:	2304      	movcs	r3, #4
 8001420:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	3304      	adds	r3, #4
 8001426:	2b06      	cmp	r3, #6
 8001428:	d902      	bls.n	8001430 <NVIC_EncodePriority+0x30>
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3b03      	subs	r3, #3
 800142e:	e000      	b.n	8001432 <NVIC_EncodePriority+0x32>
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001434:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43da      	mvns	r2, r3
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	401a      	ands	r2, r3
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001448:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	fa01 f303 	lsl.w	r3, r1, r3
 8001452:	43d9      	mvns	r1, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001458:	4313      	orrs	r3, r2
         );
}
 800145a:	4618      	mov	r0, r3
 800145c:	3724      	adds	r7, #36	; 0x24
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001466:	b580      	push	{r7, lr}
 8001468:	b082      	sub	sp, #8
 800146a:	af00      	add	r7, sp, #0
 800146c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff ff4c 	bl	800130c <__NVIC_SetPriorityGrouping>
}
 8001474:	bf00      	nop
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}

0800147c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b086      	sub	sp, #24
 8001480:	af00      	add	r7, sp, #0
 8001482:	4603      	mov	r3, r0
 8001484:	60b9      	str	r1, [r7, #8]
 8001486:	607a      	str	r2, [r7, #4]
 8001488:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800148a:	f7ff ff63 	bl	8001354 <__NVIC_GetPriorityGrouping>
 800148e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	68b9      	ldr	r1, [r7, #8]
 8001494:	6978      	ldr	r0, [r7, #20]
 8001496:	f7ff ffb3 	bl	8001400 <NVIC_EncodePriority>
 800149a:	4602      	mov	r2, r0
 800149c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014a0:	4611      	mov	r1, r2
 80014a2:	4618      	mov	r0, r3
 80014a4:	f7ff ff82 	bl	80013ac <__NVIC_SetPriority>
}
 80014a8:	bf00      	nop
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	4603      	mov	r3, r0
 80014b8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff ff56 	bl	8001370 <__NVIC_EnableIRQ>
}
 80014c4:	bf00      	nop
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d101      	bne.n	80014de <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
 80014dc:	e08d      	b.n	80015fa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	461a      	mov	r2, r3
 80014e4:	4b47      	ldr	r3, [pc, #284]	; (8001604 <HAL_DMA_Init+0x138>)
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d80f      	bhi.n	800150a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	461a      	mov	r2, r3
 80014f0:	4b45      	ldr	r3, [pc, #276]	; (8001608 <HAL_DMA_Init+0x13c>)
 80014f2:	4413      	add	r3, r2
 80014f4:	4a45      	ldr	r2, [pc, #276]	; (800160c <HAL_DMA_Init+0x140>)
 80014f6:	fba2 2303 	umull	r2, r3, r2, r3
 80014fa:	091b      	lsrs	r3, r3, #4
 80014fc:	009a      	lsls	r2, r3, #2
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a42      	ldr	r2, [pc, #264]	; (8001610 <HAL_DMA_Init+0x144>)
 8001506:	641a      	str	r2, [r3, #64]	; 0x40
 8001508:	e00e      	b.n	8001528 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	461a      	mov	r2, r3
 8001510:	4b40      	ldr	r3, [pc, #256]	; (8001614 <HAL_DMA_Init+0x148>)
 8001512:	4413      	add	r3, r2
 8001514:	4a3d      	ldr	r2, [pc, #244]	; (800160c <HAL_DMA_Init+0x140>)
 8001516:	fba2 2303 	umull	r2, r3, r2, r3
 800151a:	091b      	lsrs	r3, r3, #4
 800151c:	009a      	lsls	r2, r3, #2
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	4a3c      	ldr	r2, [pc, #240]	; (8001618 <HAL_DMA_Init+0x14c>)
 8001526:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2202      	movs	r2, #2
 800152c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800153e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001542:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800154c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	691b      	ldr	r3, [r3, #16]
 8001552:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001558:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	699b      	ldr	r3, [r3, #24]
 800155e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001564:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a1b      	ldr	r3, [r3, #32]
 800156a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800156c:	68fa      	ldr	r2, [r7, #12]
 800156e:	4313      	orrs	r3, r2
 8001570:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	68fa      	ldr	r2, [r7, #12]
 8001578:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800157a:	6878      	ldr	r0, [r7, #4]
 800157c:	f000 f9be 	bl	80018fc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001588:	d102      	bne.n	8001590 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685a      	ldr	r2, [r3, #4]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001598:	b2d2      	uxtb	r2, r2
 800159a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80015a4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d010      	beq.n	80015d0 <HAL_DMA_Init+0x104>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	2b04      	cmp	r3, #4
 80015b4:	d80c      	bhi.n	80015d0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f000 f9de 	bl	8001978 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80015cc:	605a      	str	r2, [r3, #4]
 80015ce:	e008      	b.n	80015e2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	2200      	movs	r2, #0
 80015da:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2200      	movs	r2, #0
 80015e0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2200      	movs	r2, #0
 80015e6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2201      	movs	r2, #1
 80015ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3710      	adds	r7, #16
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40020407 	.word	0x40020407
 8001608:	bffdfff8 	.word	0xbffdfff8
 800160c:	cccccccd 	.word	0xcccccccd
 8001610:	40020000 	.word	0x40020000
 8001614:	bffdfbf8 	.word	0xbffdfbf8
 8001618:	40020400 	.word	0x40020400

0800161c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800161c:	b480      	push	{r7}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001624:	2300      	movs	r3, #0
 8001626:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800162e:	b2db      	uxtb	r3, r3
 8001630:	2b02      	cmp	r3, #2
 8001632:	d005      	beq.n	8001640 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2204      	movs	r2, #4
 8001638:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	73fb      	strb	r3, [r7, #15]
 800163e:	e037      	b.n	80016b0 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f022 020e 	bic.w	r2, r2, #14
 800164e:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800165a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800165e:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f022 0201 	bic.w	r2, r2, #1
 800166e:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001674:	f003 021f 	and.w	r2, r3, #31
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167c:	2101      	movs	r1, #1
 800167e:	fa01 f202 	lsl.w	r2, r1, r2
 8001682:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800168c:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001692:	2b00      	cmp	r3, #0
 8001694:	d00c      	beq.n	80016b0 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016a4:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80016ae:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2201      	movs	r2, #1
 80016b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2200      	movs	r2, #0
 80016bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80016c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3714      	adds	r7, #20
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr

080016ce <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016ce:	b580      	push	{r7, lr}
 80016d0:	b084      	sub	sp, #16
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016d6:	2300      	movs	r3, #0
 80016d8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d00d      	beq.n	8001702 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2204      	movs	r2, #4
 80016ea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2201      	movs	r2, #1
 80016f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	73fb      	strb	r3, [r7, #15]
 8001700:	e047      	b.n	8001792 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f022 020e 	bic.w	r2, r2, #14
 8001710:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f022 0201 	bic.w	r2, r2, #1
 8001720:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800172c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001730:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001736:	f003 021f 	and.w	r2, r3, #31
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	2101      	movs	r1, #1
 8001740:	fa01 f202 	lsl.w	r2, r1, r2
 8001744:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800174e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001754:	2b00      	cmp	r3, #0
 8001756:	d00c      	beq.n	8001772 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001762:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001766:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001770:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2201      	movs	r2, #1
 8001776:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2200      	movs	r2, #0
 800177e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	4798      	blx	r3
    }
  }
  return status;
 8001792:	7bfb      	ldrb	r3, [r7, #15]
}
 8001794:	4618      	mov	r0, r3
 8001796:	3710      	adds	r7, #16
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}

0800179c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b084      	sub	sp, #16
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b8:	f003 031f 	and.w	r3, r3, #31
 80017bc:	2204      	movs	r2, #4
 80017be:	409a      	lsls	r2, r3
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	4013      	ands	r3, r2
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d026      	beq.n	8001816 <HAL_DMA_IRQHandler+0x7a>
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	f003 0304 	and.w	r3, r3, #4
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d021      	beq.n	8001816 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0320 	and.w	r3, r3, #32
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d107      	bne.n	80017f0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f022 0204 	bic.w	r2, r2, #4
 80017ee:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f4:	f003 021f 	and.w	r2, r3, #31
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fc:	2104      	movs	r1, #4
 80017fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001802:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001808:	2b00      	cmp	r3, #0
 800180a:	d071      	beq.n	80018f0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001814:	e06c      	b.n	80018f0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181a:	f003 031f 	and.w	r3, r3, #31
 800181e:	2202      	movs	r2, #2
 8001820:	409a      	lsls	r2, r3
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	4013      	ands	r3, r2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d02e      	beq.n	8001888 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800182a:	68bb      	ldr	r3, [r7, #8]
 800182c:	f003 0302 	and.w	r3, r3, #2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d029      	beq.n	8001888 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0320 	and.w	r3, r3, #32
 800183e:	2b00      	cmp	r3, #0
 8001840:	d10b      	bne.n	800185a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f022 020a 	bic.w	r2, r2, #10
 8001850:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2201      	movs	r2, #1
 8001856:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185e:	f003 021f 	and.w	r2, r3, #31
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	2102      	movs	r1, #2
 8001868:	fa01 f202 	lsl.w	r2, r1, r2
 800186c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2200      	movs	r2, #0
 8001872:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187a:	2b00      	cmp	r3, #0
 800187c:	d038      	beq.n	80018f0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001886:	e033      	b.n	80018f0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800188c:	f003 031f 	and.w	r3, r3, #31
 8001890:	2208      	movs	r2, #8
 8001892:	409a      	lsls	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	4013      	ands	r3, r2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d02a      	beq.n	80018f2 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800189c:	68bb      	ldr	r3, [r7, #8]
 800189e:	f003 0308 	and.w	r3, r3, #8
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d025      	beq.n	80018f2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f022 020e 	bic.w	r2, r2, #14
 80018b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ba:	f003 021f 	and.w	r2, r3, #31
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	2101      	movs	r1, #1
 80018c4:	fa01 f202 	lsl.w	r2, r1, r2
 80018c8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2201      	movs	r2, #1
 80018ce:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2201      	movs	r2, #1
 80018d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2200      	movs	r2, #0
 80018dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d004      	beq.n	80018f2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80018f0:	bf00      	nop
 80018f2:	bf00      	nop
}
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
	...

080018fc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b087      	sub	sp, #28
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	461a      	mov	r2, r3
 800190a:	4b16      	ldr	r3, [pc, #88]	; (8001964 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800190c:	429a      	cmp	r2, r3
 800190e:	d802      	bhi.n	8001916 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001910:	4b15      	ldr	r3, [pc, #84]	; (8001968 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001912:	617b      	str	r3, [r7, #20]
 8001914:	e001      	b.n	800191a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001916:	4b15      	ldr	r3, [pc, #84]	; (800196c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001918:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	b2db      	uxtb	r3, r3
 8001924:	3b08      	subs	r3, #8
 8001926:	4a12      	ldr	r2, [pc, #72]	; (8001970 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001928:	fba2 2303 	umull	r2, r3, r2, r3
 800192c:	091b      	lsrs	r3, r3, #4
 800192e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001934:	089b      	lsrs	r3, r3, #2
 8001936:	009a      	lsls	r2, r3, #2
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	4413      	add	r3, r2
 800193c:	461a      	mov	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a0b      	ldr	r2, [pc, #44]	; (8001974 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001946:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f003 031f 	and.w	r3, r3, #31
 800194e:	2201      	movs	r2, #1
 8001950:	409a      	lsls	r2, r3
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001956:	bf00      	nop
 8001958:	371c      	adds	r7, #28
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	40020407 	.word	0x40020407
 8001968:	40020800 	.word	0x40020800
 800196c:	40020820 	.word	0x40020820
 8001970:	cccccccd 	.word	0xcccccccd
 8001974:	40020880 	.word	0x40020880

08001978 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	b2db      	uxtb	r3, r3
 8001986:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001988:	68fa      	ldr	r2, [r7, #12]
 800198a:	4b0b      	ldr	r3, [pc, #44]	; (80019b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800198c:	4413      	add	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	461a      	mov	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a08      	ldr	r2, [pc, #32]	; (80019bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800199a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	3b01      	subs	r3, #1
 80019a0:	f003 031f 	and.w	r3, r3, #31
 80019a4:	2201      	movs	r2, #1
 80019a6:	409a      	lsls	r2, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80019ac:	bf00      	nop
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	1000823f 	.word	0x1000823f
 80019bc:	40020940 	.word	0x40020940

080019c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b087      	sub	sp, #28
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80019ca:	2300      	movs	r3, #0
 80019cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80019ce:	e15a      	b.n	8001c86 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	2101      	movs	r1, #1
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	fa01 f303 	lsl.w	r3, r1, r3
 80019dc:	4013      	ands	r3, r2
 80019de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f000 814c 	beq.w	8001c80 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f003 0303 	and.w	r3, r3, #3
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d005      	beq.n	8001a00 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d130      	bne.n	8001a62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	005b      	lsls	r3, r3, #1
 8001a0a:	2203      	movs	r2, #3
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	43db      	mvns	r3, r3
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	4013      	ands	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	68da      	ldr	r2, [r3, #12]
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a36:	2201      	movs	r2, #1
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	4013      	ands	r3, r2
 8001a44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	091b      	lsrs	r3, r3, #4
 8001a4c:	f003 0201 	and.w	r2, r3, #1
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	fa02 f303 	lsl.w	r3, r2, r3
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f003 0303 	and.w	r3, r3, #3
 8001a6a:	2b03      	cmp	r3, #3
 8001a6c:	d017      	beq.n	8001a9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	2203      	movs	r2, #3
 8001a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	4013      	ands	r3, r2
 8001a84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	689a      	ldr	r2, [r3, #8]
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	4313      	orrs	r3, r2
 8001a96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a9e:	683b      	ldr	r3, [r7, #0]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f003 0303 	and.w	r3, r3, #3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d123      	bne.n	8001af2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	08da      	lsrs	r2, r3, #3
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	3208      	adds	r2, #8
 8001ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	220f      	movs	r2, #15
 8001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac6:	43db      	mvns	r3, r3
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	4013      	ands	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	691a      	ldr	r2, [r3, #16]
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	fa02 f303 	lsl.w	r3, r2, r3
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	08da      	lsrs	r2, r3, #3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3208      	adds	r2, #8
 8001aec:	6939      	ldr	r1, [r7, #16]
 8001aee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	2203      	movs	r2, #3
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43db      	mvns	r3, r3
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	4013      	ands	r3, r2
 8001b08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	f003 0203 	and.w	r2, r3, #3
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	f000 80a6 	beq.w	8001c80 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b34:	4b5b      	ldr	r3, [pc, #364]	; (8001ca4 <HAL_GPIO_Init+0x2e4>)
 8001b36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b38:	4a5a      	ldr	r2, [pc, #360]	; (8001ca4 <HAL_GPIO_Init+0x2e4>)
 8001b3a:	f043 0301 	orr.w	r3, r3, #1
 8001b3e:	6613      	str	r3, [r2, #96]	; 0x60
 8001b40:	4b58      	ldr	r3, [pc, #352]	; (8001ca4 <HAL_GPIO_Init+0x2e4>)
 8001b42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b44:	f003 0301 	and.w	r3, r3, #1
 8001b48:	60bb      	str	r3, [r7, #8]
 8001b4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b4c:	4a56      	ldr	r2, [pc, #344]	; (8001ca8 <HAL_GPIO_Init+0x2e8>)
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	089b      	lsrs	r3, r3, #2
 8001b52:	3302      	adds	r3, #2
 8001b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	f003 0303 	and.w	r3, r3, #3
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	220f      	movs	r2, #15
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	43db      	mvns	r3, r3
 8001b6a:	693a      	ldr	r2, [r7, #16]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b76:	d01f      	beq.n	8001bb8 <HAL_GPIO_Init+0x1f8>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	4a4c      	ldr	r2, [pc, #304]	; (8001cac <HAL_GPIO_Init+0x2ec>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	d019      	beq.n	8001bb4 <HAL_GPIO_Init+0x1f4>
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	4a4b      	ldr	r2, [pc, #300]	; (8001cb0 <HAL_GPIO_Init+0x2f0>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d013      	beq.n	8001bb0 <HAL_GPIO_Init+0x1f0>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	4a4a      	ldr	r2, [pc, #296]	; (8001cb4 <HAL_GPIO_Init+0x2f4>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d00d      	beq.n	8001bac <HAL_GPIO_Init+0x1ec>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	4a49      	ldr	r2, [pc, #292]	; (8001cb8 <HAL_GPIO_Init+0x2f8>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d007      	beq.n	8001ba8 <HAL_GPIO_Init+0x1e8>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4a48      	ldr	r2, [pc, #288]	; (8001cbc <HAL_GPIO_Init+0x2fc>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d101      	bne.n	8001ba4 <HAL_GPIO_Init+0x1e4>
 8001ba0:	2305      	movs	r3, #5
 8001ba2:	e00a      	b.n	8001bba <HAL_GPIO_Init+0x1fa>
 8001ba4:	2306      	movs	r3, #6
 8001ba6:	e008      	b.n	8001bba <HAL_GPIO_Init+0x1fa>
 8001ba8:	2304      	movs	r3, #4
 8001baa:	e006      	b.n	8001bba <HAL_GPIO_Init+0x1fa>
 8001bac:	2303      	movs	r3, #3
 8001bae:	e004      	b.n	8001bba <HAL_GPIO_Init+0x1fa>
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	e002      	b.n	8001bba <HAL_GPIO_Init+0x1fa>
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e000      	b.n	8001bba <HAL_GPIO_Init+0x1fa>
 8001bb8:	2300      	movs	r3, #0
 8001bba:	697a      	ldr	r2, [r7, #20]
 8001bbc:	f002 0203 	and.w	r2, r2, #3
 8001bc0:	0092      	lsls	r2, r2, #2
 8001bc2:	4093      	lsls	r3, r2
 8001bc4:	693a      	ldr	r2, [r7, #16]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bca:	4937      	ldr	r1, [pc, #220]	; (8001ca8 <HAL_GPIO_Init+0x2e8>)
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	089b      	lsrs	r3, r3, #2
 8001bd0:	3302      	adds	r3, #2
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001bd8:	4b39      	ldr	r3, [pc, #228]	; (8001cc0 <HAL_GPIO_Init+0x300>)
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	43db      	mvns	r3, r3
 8001be2:	693a      	ldr	r2, [r7, #16]
 8001be4:	4013      	ands	r3, r2
 8001be6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d003      	beq.n	8001bfc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001bfc:	4a30      	ldr	r2, [pc, #192]	; (8001cc0 <HAL_GPIO_Init+0x300>)
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c02:	4b2f      	ldr	r3, [pc, #188]	; (8001cc0 <HAL_GPIO_Init+0x300>)
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	693a      	ldr	r2, [r7, #16]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d003      	beq.n	8001c26 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001c1e:	693a      	ldr	r2, [r7, #16]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c26:	4a26      	ldr	r2, [pc, #152]	; (8001cc0 <HAL_GPIO_Init+0x300>)
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001c2c:	4b24      	ldr	r3, [pc, #144]	; (8001cc0 <HAL_GPIO_Init+0x300>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	43db      	mvns	r3, r3
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d003      	beq.n	8001c50 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c50:	4a1b      	ldr	r2, [pc, #108]	; (8001cc0 <HAL_GPIO_Init+0x300>)
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001c56:	4b1a      	ldr	r3, [pc, #104]	; (8001cc0 <HAL_GPIO_Init+0x300>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	4013      	ands	r3, r2
 8001c64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d003      	beq.n	8001c7a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001c7a:	4a11      	ldr	r2, [pc, #68]	; (8001cc0 <HAL_GPIO_Init+0x300>)
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	3301      	adds	r3, #1
 8001c84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f47f ae9d 	bne.w	80019d0 <HAL_GPIO_Init+0x10>
  }
}
 8001c96:	bf00      	nop
 8001c98:	bf00      	nop
 8001c9a:	371c      	adds	r7, #28
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	40021000 	.word	0x40021000
 8001ca8:	40010000 	.word	0x40010000
 8001cac:	48000400 	.word	0x48000400
 8001cb0:	48000800 	.word	0x48000800
 8001cb4:	48000c00 	.word	0x48000c00
 8001cb8:	48001000 	.word	0x48001000
 8001cbc:	48001400 	.word	0x48001400
 8001cc0:	40010400 	.word	0x40010400

08001cc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	807b      	strh	r3, [r7, #2]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cd4:	787b      	ldrb	r3, [r7, #1]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d003      	beq.n	8001ce2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001cda:	887a      	ldrh	r2, [r7, #2]
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ce0:	e002      	b.n	8001ce8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ce2:	887a      	ldrh	r2, [r7, #2]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ce8:	bf00      	nop
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001cfe:	4b08      	ldr	r3, [pc, #32]	; (8001d20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d00:	695a      	ldr	r2, [r3, #20]
 8001d02:	88fb      	ldrh	r3, [r7, #6]
 8001d04:	4013      	ands	r3, r2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d006      	beq.n	8001d18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d0a:	4a05      	ldr	r2, [pc, #20]	; (8001d20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d0c:	88fb      	ldrh	r3, [r7, #6]
 8001d0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d10:	88fb      	ldrh	r3, [r7, #6]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f000 f806 	bl	8001d24 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d18:	bf00      	nop
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40010400 	.word	0x40010400

08001d24 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
	...

08001d3c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b085      	sub	sp, #20
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d141      	bne.n	8001dce <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d4a:	4b4b      	ldr	r3, [pc, #300]	; (8001e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d56:	d131      	bne.n	8001dbc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d58:	4b47      	ldr	r3, [pc, #284]	; (8001e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d5e:	4a46      	ldr	r2, [pc, #280]	; (8001e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001d64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d68:	4b43      	ldr	r3, [pc, #268]	; (8001e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001d70:	4a41      	ldr	r2, [pc, #260]	; (8001e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d76:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001d78:	4b40      	ldr	r3, [pc, #256]	; (8001e7c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2232      	movs	r2, #50	; 0x32
 8001d7e:	fb02 f303 	mul.w	r3, r2, r3
 8001d82:	4a3f      	ldr	r2, [pc, #252]	; (8001e80 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001d84:	fba2 2303 	umull	r2, r3, r2, r3
 8001d88:	0c9b      	lsrs	r3, r3, #18
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d8e:	e002      	b.n	8001d96 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	3b01      	subs	r3, #1
 8001d94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001d96:	4b38      	ldr	r3, [pc, #224]	; (8001e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001da2:	d102      	bne.n	8001daa <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1f2      	bne.n	8001d90 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001daa:	4b33      	ldr	r3, [pc, #204]	; (8001e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001db2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001db6:	d158      	bne.n	8001e6a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001db8:	2303      	movs	r3, #3
 8001dba:	e057      	b.n	8001e6c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001dbc:	4b2e      	ldr	r3, [pc, #184]	; (8001e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001dc2:	4a2d      	ldr	r2, [pc, #180]	; (8001e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001dc8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001dcc:	e04d      	b.n	8001e6a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dd4:	d141      	bne.n	8001e5a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001dd6:	4b28      	ldr	r3, [pc, #160]	; (8001e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001dde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001de2:	d131      	bne.n	8001e48 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001de4:	4b24      	ldr	r3, [pc, #144]	; (8001e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001dea:	4a23      	ldr	r2, [pc, #140]	; (8001e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001df0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001df4:	4b20      	ldr	r3, [pc, #128]	; (8001e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001dfc:	4a1e      	ldr	r2, [pc, #120]	; (8001e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e02:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e04:	4b1d      	ldr	r3, [pc, #116]	; (8001e7c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2232      	movs	r2, #50	; 0x32
 8001e0a:	fb02 f303 	mul.w	r3, r2, r3
 8001e0e:	4a1c      	ldr	r2, [pc, #112]	; (8001e80 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001e10:	fba2 2303 	umull	r2, r3, r2, r3
 8001e14:	0c9b      	lsrs	r3, r3, #18
 8001e16:	3301      	adds	r3, #1
 8001e18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e1a:	e002      	b.n	8001e22 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e22:	4b15      	ldr	r3, [pc, #84]	; (8001e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e24:	695b      	ldr	r3, [r3, #20]
 8001e26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e2e:	d102      	bne.n	8001e36 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1f2      	bne.n	8001e1c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e36:	4b10      	ldr	r3, [pc, #64]	; (8001e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e38:	695b      	ldr	r3, [r3, #20]
 8001e3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e42:	d112      	bne.n	8001e6a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001e44:	2303      	movs	r3, #3
 8001e46:	e011      	b.n	8001e6c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e48:	4b0b      	ldr	r3, [pc, #44]	; (8001e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e4e:	4a0a      	ldr	r2, [pc, #40]	; (8001e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001e58:	e007      	b.n	8001e6a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e5a:	4b07      	ldr	r3, [pc, #28]	; (8001e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e62:	4a05      	ldr	r2, [pc, #20]	; (8001e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e64:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e68:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001e6a:	2300      	movs	r3, #0
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	3714      	adds	r7, #20
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	40007000 	.word	0x40007000
 8001e7c:	20000000 	.word	0x20000000
 8001e80:	431bde83 	.word	0x431bde83

08001e84 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001e88:	4b05      	ldr	r3, [pc, #20]	; (8001ea0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	4a04      	ldr	r2, [pc, #16]	; (8001ea0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001e8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e92:	6093      	str	r3, [r2, #8]
}
 8001e94:	bf00      	nop
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	40007000 	.word	0x40007000

08001ea4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b088      	sub	sp, #32
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d101      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e2fe      	b.n	80024b4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d075      	beq.n	8001fae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ec2:	4b97      	ldr	r3, [pc, #604]	; (8002120 <HAL_RCC_OscConfig+0x27c>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f003 030c 	and.w	r3, r3, #12
 8001eca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ecc:	4b94      	ldr	r3, [pc, #592]	; (8002120 <HAL_RCC_OscConfig+0x27c>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	f003 0303 	and.w	r3, r3, #3
 8001ed4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001ed6:	69bb      	ldr	r3, [r7, #24]
 8001ed8:	2b0c      	cmp	r3, #12
 8001eda:	d102      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x3e>
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	2b03      	cmp	r3, #3
 8001ee0:	d002      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x44>
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	2b08      	cmp	r3, #8
 8001ee6:	d10b      	bne.n	8001f00 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee8:	4b8d      	ldr	r3, [pc, #564]	; (8002120 <HAL_RCC_OscConfig+0x27c>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d05b      	beq.n	8001fac <HAL_RCC_OscConfig+0x108>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d157      	bne.n	8001fac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001efc:	2301      	movs	r3, #1
 8001efe:	e2d9      	b.n	80024b4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f08:	d106      	bne.n	8001f18 <HAL_RCC_OscConfig+0x74>
 8001f0a:	4b85      	ldr	r3, [pc, #532]	; (8002120 <HAL_RCC_OscConfig+0x27c>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a84      	ldr	r2, [pc, #528]	; (8002120 <HAL_RCC_OscConfig+0x27c>)
 8001f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f14:	6013      	str	r3, [r2, #0]
 8001f16:	e01d      	b.n	8001f54 <HAL_RCC_OscConfig+0xb0>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f20:	d10c      	bne.n	8001f3c <HAL_RCC_OscConfig+0x98>
 8001f22:	4b7f      	ldr	r3, [pc, #508]	; (8002120 <HAL_RCC_OscConfig+0x27c>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a7e      	ldr	r2, [pc, #504]	; (8002120 <HAL_RCC_OscConfig+0x27c>)
 8001f28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f2c:	6013      	str	r3, [r2, #0]
 8001f2e:	4b7c      	ldr	r3, [pc, #496]	; (8002120 <HAL_RCC_OscConfig+0x27c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a7b      	ldr	r2, [pc, #492]	; (8002120 <HAL_RCC_OscConfig+0x27c>)
 8001f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f38:	6013      	str	r3, [r2, #0]
 8001f3a:	e00b      	b.n	8001f54 <HAL_RCC_OscConfig+0xb0>
 8001f3c:	4b78      	ldr	r3, [pc, #480]	; (8002120 <HAL_RCC_OscConfig+0x27c>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a77      	ldr	r2, [pc, #476]	; (8002120 <HAL_RCC_OscConfig+0x27c>)
 8001f42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f46:	6013      	str	r3, [r2, #0]
 8001f48:	4b75      	ldr	r3, [pc, #468]	; (8002120 <HAL_RCC_OscConfig+0x27c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a74      	ldr	r2, [pc, #464]	; (8002120 <HAL_RCC_OscConfig+0x27c>)
 8001f4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d013      	beq.n	8001f84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f5c:	f7ff f9ca 	bl	80012f4 <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f62:	e008      	b.n	8001f76 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f64:	f7ff f9c6 	bl	80012f4 <HAL_GetTick>
 8001f68:	4602      	mov	r2, r0
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	1ad3      	subs	r3, r2, r3
 8001f6e:	2b64      	cmp	r3, #100	; 0x64
 8001f70:	d901      	bls.n	8001f76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e29e      	b.n	80024b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f76:	4b6a      	ldr	r3, [pc, #424]	; (8002120 <HAL_RCC_OscConfig+0x27c>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d0f0      	beq.n	8001f64 <HAL_RCC_OscConfig+0xc0>
 8001f82:	e014      	b.n	8001fae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f84:	f7ff f9b6 	bl	80012f4 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f8c:	f7ff f9b2 	bl	80012f4 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b64      	cmp	r3, #100	; 0x64
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e28a      	b.n	80024b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f9e:	4b60      	ldr	r3, [pc, #384]	; (8002120 <HAL_RCC_OscConfig+0x27c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d1f0      	bne.n	8001f8c <HAL_RCC_OscConfig+0xe8>
 8001faa:	e000      	b.n	8001fae <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0302 	and.w	r3, r3, #2
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d075      	beq.n	80020a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fba:	4b59      	ldr	r3, [pc, #356]	; (8002120 <HAL_RCC_OscConfig+0x27c>)
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	f003 030c 	and.w	r3, r3, #12
 8001fc2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fc4:	4b56      	ldr	r3, [pc, #344]	; (8002120 <HAL_RCC_OscConfig+0x27c>)
 8001fc6:	68db      	ldr	r3, [r3, #12]
 8001fc8:	f003 0303 	and.w	r3, r3, #3
 8001fcc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001fce:	69bb      	ldr	r3, [r7, #24]
 8001fd0:	2b0c      	cmp	r3, #12
 8001fd2:	d102      	bne.n	8001fda <HAL_RCC_OscConfig+0x136>
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	d002      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x13c>
 8001fda:	69bb      	ldr	r3, [r7, #24]
 8001fdc:	2b04      	cmp	r3, #4
 8001fde:	d11f      	bne.n	8002020 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fe0:	4b4f      	ldr	r3, [pc, #316]	; (8002120 <HAL_RCC_OscConfig+0x27c>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d005      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x154>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	68db      	ldr	r3, [r3, #12]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d101      	bne.n	8001ff8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	e25d      	b.n	80024b4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff8:	4b49      	ldr	r3, [pc, #292]	; (8002120 <HAL_RCC_OscConfig+0x27c>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	061b      	lsls	r3, r3, #24
 8002006:	4946      	ldr	r1, [pc, #280]	; (8002120 <HAL_RCC_OscConfig+0x27c>)
 8002008:	4313      	orrs	r3, r2
 800200a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800200c:	4b45      	ldr	r3, [pc, #276]	; (8002124 <HAL_RCC_OscConfig+0x280>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff f81b 	bl	800104c <HAL_InitTick>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d043      	beq.n	80020a4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e249      	b.n	80024b4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d023      	beq.n	8002070 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002028:	4b3d      	ldr	r3, [pc, #244]	; (8002120 <HAL_RCC_OscConfig+0x27c>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a3c      	ldr	r2, [pc, #240]	; (8002120 <HAL_RCC_OscConfig+0x27c>)
 800202e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002032:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002034:	f7ff f95e 	bl	80012f4 <HAL_GetTick>
 8002038:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800203a:	e008      	b.n	800204e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800203c:	f7ff f95a 	bl	80012f4 <HAL_GetTick>
 8002040:	4602      	mov	r2, r0
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	1ad3      	subs	r3, r2, r3
 8002046:	2b02      	cmp	r3, #2
 8002048:	d901      	bls.n	800204e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800204a:	2303      	movs	r3, #3
 800204c:	e232      	b.n	80024b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800204e:	4b34      	ldr	r3, [pc, #208]	; (8002120 <HAL_RCC_OscConfig+0x27c>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002056:	2b00      	cmp	r3, #0
 8002058:	d0f0      	beq.n	800203c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800205a:	4b31      	ldr	r3, [pc, #196]	; (8002120 <HAL_RCC_OscConfig+0x27c>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	061b      	lsls	r3, r3, #24
 8002068:	492d      	ldr	r1, [pc, #180]	; (8002120 <HAL_RCC_OscConfig+0x27c>)
 800206a:	4313      	orrs	r3, r2
 800206c:	604b      	str	r3, [r1, #4]
 800206e:	e01a      	b.n	80020a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002070:	4b2b      	ldr	r3, [pc, #172]	; (8002120 <HAL_RCC_OscConfig+0x27c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a2a      	ldr	r2, [pc, #168]	; (8002120 <HAL_RCC_OscConfig+0x27c>)
 8002076:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800207a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800207c:	f7ff f93a 	bl	80012f4 <HAL_GetTick>
 8002080:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002082:	e008      	b.n	8002096 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002084:	f7ff f936 	bl	80012f4 <HAL_GetTick>
 8002088:	4602      	mov	r2, r0
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	1ad3      	subs	r3, r2, r3
 800208e:	2b02      	cmp	r3, #2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e20e      	b.n	80024b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002096:	4b22      	ldr	r3, [pc, #136]	; (8002120 <HAL_RCC_OscConfig+0x27c>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d1f0      	bne.n	8002084 <HAL_RCC_OscConfig+0x1e0>
 80020a2:	e000      	b.n	80020a6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0308 	and.w	r3, r3, #8
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d041      	beq.n	8002136 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d01c      	beq.n	80020f4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020ba:	4b19      	ldr	r3, [pc, #100]	; (8002120 <HAL_RCC_OscConfig+0x27c>)
 80020bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020c0:	4a17      	ldr	r2, [pc, #92]	; (8002120 <HAL_RCC_OscConfig+0x27c>)
 80020c2:	f043 0301 	orr.w	r3, r3, #1
 80020c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ca:	f7ff f913 	bl	80012f4 <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020d0:	e008      	b.n	80020e4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020d2:	f7ff f90f 	bl	80012f4 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d901      	bls.n	80020e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e1e7      	b.n	80024b4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80020e4:	4b0e      	ldr	r3, [pc, #56]	; (8002120 <HAL_RCC_OscConfig+0x27c>)
 80020e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d0ef      	beq.n	80020d2 <HAL_RCC_OscConfig+0x22e>
 80020f2:	e020      	b.n	8002136 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020f4:	4b0a      	ldr	r3, [pc, #40]	; (8002120 <HAL_RCC_OscConfig+0x27c>)
 80020f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020fa:	4a09      	ldr	r2, [pc, #36]	; (8002120 <HAL_RCC_OscConfig+0x27c>)
 80020fc:	f023 0301 	bic.w	r3, r3, #1
 8002100:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002104:	f7ff f8f6 	bl	80012f4 <HAL_GetTick>
 8002108:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800210a:	e00d      	b.n	8002128 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800210c:	f7ff f8f2 	bl	80012f4 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	693b      	ldr	r3, [r7, #16]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	2b02      	cmp	r3, #2
 8002118:	d906      	bls.n	8002128 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e1ca      	b.n	80024b4 <HAL_RCC_OscConfig+0x610>
 800211e:	bf00      	nop
 8002120:	40021000 	.word	0x40021000
 8002124:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002128:	4b8c      	ldr	r3, [pc, #560]	; (800235c <HAL_RCC_OscConfig+0x4b8>)
 800212a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d1ea      	bne.n	800210c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0304 	and.w	r3, r3, #4
 800213e:	2b00      	cmp	r3, #0
 8002140:	f000 80a6 	beq.w	8002290 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002144:	2300      	movs	r3, #0
 8002146:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002148:	4b84      	ldr	r3, [pc, #528]	; (800235c <HAL_RCC_OscConfig+0x4b8>)
 800214a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800214c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <HAL_RCC_OscConfig+0x2b4>
 8002154:	2301      	movs	r3, #1
 8002156:	e000      	b.n	800215a <HAL_RCC_OscConfig+0x2b6>
 8002158:	2300      	movs	r3, #0
 800215a:	2b00      	cmp	r3, #0
 800215c:	d00d      	beq.n	800217a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800215e:	4b7f      	ldr	r3, [pc, #508]	; (800235c <HAL_RCC_OscConfig+0x4b8>)
 8002160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002162:	4a7e      	ldr	r2, [pc, #504]	; (800235c <HAL_RCC_OscConfig+0x4b8>)
 8002164:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002168:	6593      	str	r3, [r2, #88]	; 0x58
 800216a:	4b7c      	ldr	r3, [pc, #496]	; (800235c <HAL_RCC_OscConfig+0x4b8>)
 800216c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800216e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002172:	60fb      	str	r3, [r7, #12]
 8002174:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002176:	2301      	movs	r3, #1
 8002178:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800217a:	4b79      	ldr	r3, [pc, #484]	; (8002360 <HAL_RCC_OscConfig+0x4bc>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002182:	2b00      	cmp	r3, #0
 8002184:	d118      	bne.n	80021b8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002186:	4b76      	ldr	r3, [pc, #472]	; (8002360 <HAL_RCC_OscConfig+0x4bc>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4a75      	ldr	r2, [pc, #468]	; (8002360 <HAL_RCC_OscConfig+0x4bc>)
 800218c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002190:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002192:	f7ff f8af 	bl	80012f4 <HAL_GetTick>
 8002196:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002198:	e008      	b.n	80021ac <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800219a:	f7ff f8ab 	bl	80012f4 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d901      	bls.n	80021ac <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e183      	b.n	80024b4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021ac:	4b6c      	ldr	r3, [pc, #432]	; (8002360 <HAL_RCC_OscConfig+0x4bc>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d0f0      	beq.n	800219a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d108      	bne.n	80021d2 <HAL_RCC_OscConfig+0x32e>
 80021c0:	4b66      	ldr	r3, [pc, #408]	; (800235c <HAL_RCC_OscConfig+0x4b8>)
 80021c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c6:	4a65      	ldr	r2, [pc, #404]	; (800235c <HAL_RCC_OscConfig+0x4b8>)
 80021c8:	f043 0301 	orr.w	r3, r3, #1
 80021cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021d0:	e024      	b.n	800221c <HAL_RCC_OscConfig+0x378>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	2b05      	cmp	r3, #5
 80021d8:	d110      	bne.n	80021fc <HAL_RCC_OscConfig+0x358>
 80021da:	4b60      	ldr	r3, [pc, #384]	; (800235c <HAL_RCC_OscConfig+0x4b8>)
 80021dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e0:	4a5e      	ldr	r2, [pc, #376]	; (800235c <HAL_RCC_OscConfig+0x4b8>)
 80021e2:	f043 0304 	orr.w	r3, r3, #4
 80021e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021ea:	4b5c      	ldr	r3, [pc, #368]	; (800235c <HAL_RCC_OscConfig+0x4b8>)
 80021ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f0:	4a5a      	ldr	r2, [pc, #360]	; (800235c <HAL_RCC_OscConfig+0x4b8>)
 80021f2:	f043 0301 	orr.w	r3, r3, #1
 80021f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80021fa:	e00f      	b.n	800221c <HAL_RCC_OscConfig+0x378>
 80021fc:	4b57      	ldr	r3, [pc, #348]	; (800235c <HAL_RCC_OscConfig+0x4b8>)
 80021fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002202:	4a56      	ldr	r2, [pc, #344]	; (800235c <HAL_RCC_OscConfig+0x4b8>)
 8002204:	f023 0301 	bic.w	r3, r3, #1
 8002208:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800220c:	4b53      	ldr	r3, [pc, #332]	; (800235c <HAL_RCC_OscConfig+0x4b8>)
 800220e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002212:	4a52      	ldr	r2, [pc, #328]	; (800235c <HAL_RCC_OscConfig+0x4b8>)
 8002214:	f023 0304 	bic.w	r3, r3, #4
 8002218:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d016      	beq.n	8002252 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002224:	f7ff f866 	bl	80012f4 <HAL_GetTick>
 8002228:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800222a:	e00a      	b.n	8002242 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800222c:	f7ff f862 	bl	80012f4 <HAL_GetTick>
 8002230:	4602      	mov	r2, r0
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	f241 3288 	movw	r2, #5000	; 0x1388
 800223a:	4293      	cmp	r3, r2
 800223c:	d901      	bls.n	8002242 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e138      	b.n	80024b4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002242:	4b46      	ldr	r3, [pc, #280]	; (800235c <HAL_RCC_OscConfig+0x4b8>)
 8002244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d0ed      	beq.n	800222c <HAL_RCC_OscConfig+0x388>
 8002250:	e015      	b.n	800227e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002252:	f7ff f84f 	bl	80012f4 <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002258:	e00a      	b.n	8002270 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800225a:	f7ff f84b 	bl	80012f4 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	f241 3288 	movw	r2, #5000	; 0x1388
 8002268:	4293      	cmp	r3, r2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e121      	b.n	80024b4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002270:	4b3a      	ldr	r3, [pc, #232]	; (800235c <HAL_RCC_OscConfig+0x4b8>)
 8002272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002276:	f003 0302 	and.w	r3, r3, #2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d1ed      	bne.n	800225a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800227e:	7ffb      	ldrb	r3, [r7, #31]
 8002280:	2b01      	cmp	r3, #1
 8002282:	d105      	bne.n	8002290 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002284:	4b35      	ldr	r3, [pc, #212]	; (800235c <HAL_RCC_OscConfig+0x4b8>)
 8002286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002288:	4a34      	ldr	r2, [pc, #208]	; (800235c <HAL_RCC_OscConfig+0x4b8>)
 800228a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800228e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0320 	and.w	r3, r3, #32
 8002298:	2b00      	cmp	r3, #0
 800229a:	d03c      	beq.n	8002316 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	699b      	ldr	r3, [r3, #24]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d01c      	beq.n	80022de <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80022a4:	4b2d      	ldr	r3, [pc, #180]	; (800235c <HAL_RCC_OscConfig+0x4b8>)
 80022a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022aa:	4a2c      	ldr	r2, [pc, #176]	; (800235c <HAL_RCC_OscConfig+0x4b8>)
 80022ac:	f043 0301 	orr.w	r3, r3, #1
 80022b0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b4:	f7ff f81e 	bl	80012f4 <HAL_GetTick>
 80022b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022ba:	e008      	b.n	80022ce <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022bc:	f7ff f81a 	bl	80012f4 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e0f2      	b.n	80024b4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022ce:	4b23      	ldr	r3, [pc, #140]	; (800235c <HAL_RCC_OscConfig+0x4b8>)
 80022d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d0ef      	beq.n	80022bc <HAL_RCC_OscConfig+0x418>
 80022dc:	e01b      	b.n	8002316 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80022de:	4b1f      	ldr	r3, [pc, #124]	; (800235c <HAL_RCC_OscConfig+0x4b8>)
 80022e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022e4:	4a1d      	ldr	r2, [pc, #116]	; (800235c <HAL_RCC_OscConfig+0x4b8>)
 80022e6:	f023 0301 	bic.w	r3, r3, #1
 80022ea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ee:	f7ff f801 	bl	80012f4 <HAL_GetTick>
 80022f2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80022f4:	e008      	b.n	8002308 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022f6:	f7fe fffd 	bl	80012f4 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e0d5      	b.n	80024b4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002308:	4b14      	ldr	r3, [pc, #80]	; (800235c <HAL_RCC_OscConfig+0x4b8>)
 800230a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1ef      	bne.n	80022f6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	69db      	ldr	r3, [r3, #28]
 800231a:	2b00      	cmp	r3, #0
 800231c:	f000 80c9 	beq.w	80024b2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002320:	4b0e      	ldr	r3, [pc, #56]	; (800235c <HAL_RCC_OscConfig+0x4b8>)
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	f003 030c 	and.w	r3, r3, #12
 8002328:	2b0c      	cmp	r3, #12
 800232a:	f000 8083 	beq.w	8002434 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	2b02      	cmp	r3, #2
 8002334:	d15e      	bne.n	80023f4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002336:	4b09      	ldr	r3, [pc, #36]	; (800235c <HAL_RCC_OscConfig+0x4b8>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a08      	ldr	r2, [pc, #32]	; (800235c <HAL_RCC_OscConfig+0x4b8>)
 800233c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002340:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002342:	f7fe ffd7 	bl	80012f4 <HAL_GetTick>
 8002346:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002348:	e00c      	b.n	8002364 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800234a:	f7fe ffd3 	bl	80012f4 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d905      	bls.n	8002364 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e0ab      	b.n	80024b4 <HAL_RCC_OscConfig+0x610>
 800235c:	40021000 	.word	0x40021000
 8002360:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002364:	4b55      	ldr	r3, [pc, #340]	; (80024bc <HAL_RCC_OscConfig+0x618>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1ec      	bne.n	800234a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002370:	4b52      	ldr	r3, [pc, #328]	; (80024bc <HAL_RCC_OscConfig+0x618>)
 8002372:	68da      	ldr	r2, [r3, #12]
 8002374:	4b52      	ldr	r3, [pc, #328]	; (80024c0 <HAL_RCC_OscConfig+0x61c>)
 8002376:	4013      	ands	r3, r2
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	6a11      	ldr	r1, [r2, #32]
 800237c:	687a      	ldr	r2, [r7, #4]
 800237e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002380:	3a01      	subs	r2, #1
 8002382:	0112      	lsls	r2, r2, #4
 8002384:	4311      	orrs	r1, r2
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800238a:	0212      	lsls	r2, r2, #8
 800238c:	4311      	orrs	r1, r2
 800238e:	687a      	ldr	r2, [r7, #4]
 8002390:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002392:	0852      	lsrs	r2, r2, #1
 8002394:	3a01      	subs	r2, #1
 8002396:	0552      	lsls	r2, r2, #21
 8002398:	4311      	orrs	r1, r2
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800239e:	0852      	lsrs	r2, r2, #1
 80023a0:	3a01      	subs	r2, #1
 80023a2:	0652      	lsls	r2, r2, #25
 80023a4:	4311      	orrs	r1, r2
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80023aa:	06d2      	lsls	r2, r2, #27
 80023ac:	430a      	orrs	r2, r1
 80023ae:	4943      	ldr	r1, [pc, #268]	; (80024bc <HAL_RCC_OscConfig+0x618>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023b4:	4b41      	ldr	r3, [pc, #260]	; (80024bc <HAL_RCC_OscConfig+0x618>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a40      	ldr	r2, [pc, #256]	; (80024bc <HAL_RCC_OscConfig+0x618>)
 80023ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023be:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023c0:	4b3e      	ldr	r3, [pc, #248]	; (80024bc <HAL_RCC_OscConfig+0x618>)
 80023c2:	68db      	ldr	r3, [r3, #12]
 80023c4:	4a3d      	ldr	r2, [pc, #244]	; (80024bc <HAL_RCC_OscConfig+0x618>)
 80023c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023ca:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023cc:	f7fe ff92 	bl	80012f4 <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d4:	f7fe ff8e 	bl	80012f4 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b02      	cmp	r3, #2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e066      	b.n	80024b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023e6:	4b35      	ldr	r3, [pc, #212]	; (80024bc <HAL_RCC_OscConfig+0x618>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d0f0      	beq.n	80023d4 <HAL_RCC_OscConfig+0x530>
 80023f2:	e05e      	b.n	80024b2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f4:	4b31      	ldr	r3, [pc, #196]	; (80024bc <HAL_RCC_OscConfig+0x618>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a30      	ldr	r2, [pc, #192]	; (80024bc <HAL_RCC_OscConfig+0x618>)
 80023fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002400:	f7fe ff78 	bl	80012f4 <HAL_GetTick>
 8002404:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002408:	f7fe ff74 	bl	80012f4 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e04c      	b.n	80024b4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800241a:	4b28      	ldr	r3, [pc, #160]	; (80024bc <HAL_RCC_OscConfig+0x618>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d1f0      	bne.n	8002408 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002426:	4b25      	ldr	r3, [pc, #148]	; (80024bc <HAL_RCC_OscConfig+0x618>)
 8002428:	68da      	ldr	r2, [r3, #12]
 800242a:	4924      	ldr	r1, [pc, #144]	; (80024bc <HAL_RCC_OscConfig+0x618>)
 800242c:	4b25      	ldr	r3, [pc, #148]	; (80024c4 <HAL_RCC_OscConfig+0x620>)
 800242e:	4013      	ands	r3, r2
 8002430:	60cb      	str	r3, [r1, #12]
 8002432:	e03e      	b.n	80024b2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	69db      	ldr	r3, [r3, #28]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d101      	bne.n	8002440 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e039      	b.n	80024b4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002440:	4b1e      	ldr	r3, [pc, #120]	; (80024bc <HAL_RCC_OscConfig+0x618>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	f003 0203 	and.w	r2, r3, #3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	429a      	cmp	r2, r3
 8002452:	d12c      	bne.n	80024ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800245e:	3b01      	subs	r3, #1
 8002460:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002462:	429a      	cmp	r2, r3
 8002464:	d123      	bne.n	80024ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002470:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002472:	429a      	cmp	r2, r3
 8002474:	d11b      	bne.n	80024ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002480:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002482:	429a      	cmp	r2, r3
 8002484:	d113      	bne.n	80024ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002490:	085b      	lsrs	r3, r3, #1
 8002492:	3b01      	subs	r3, #1
 8002494:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002496:	429a      	cmp	r2, r3
 8002498:	d109      	bne.n	80024ae <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024a4:	085b      	lsrs	r3, r3, #1
 80024a6:	3b01      	subs	r3, #1
 80024a8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d001      	beq.n	80024b2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e000      	b.n	80024b4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80024b2:	2300      	movs	r3, #0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3720      	adds	r7, #32
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	40021000 	.word	0x40021000
 80024c0:	019f800c 	.word	0x019f800c
 80024c4:	feeefffc 	.word	0xfeeefffc

080024c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b086      	sub	sp, #24
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80024d2:	2300      	movs	r3, #0
 80024d4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d101      	bne.n	80024e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e11e      	b.n	800271e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024e0:	4b91      	ldr	r3, [pc, #580]	; (8002728 <HAL_RCC_ClockConfig+0x260>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 030f 	and.w	r3, r3, #15
 80024e8:	683a      	ldr	r2, [r7, #0]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d910      	bls.n	8002510 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ee:	4b8e      	ldr	r3, [pc, #568]	; (8002728 <HAL_RCC_ClockConfig+0x260>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f023 020f 	bic.w	r2, r3, #15
 80024f6:	498c      	ldr	r1, [pc, #560]	; (8002728 <HAL_RCC_ClockConfig+0x260>)
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024fe:	4b8a      	ldr	r3, [pc, #552]	; (8002728 <HAL_RCC_ClockConfig+0x260>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	683a      	ldr	r2, [r7, #0]
 8002508:	429a      	cmp	r2, r3
 800250a:	d001      	beq.n	8002510 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e106      	b.n	800271e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	2b00      	cmp	r3, #0
 800251a:	d073      	beq.n	8002604 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	2b03      	cmp	r3, #3
 8002522:	d129      	bne.n	8002578 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002524:	4b81      	ldr	r3, [pc, #516]	; (800272c <HAL_RCC_ClockConfig+0x264>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e0f4      	b.n	800271e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002534:	f000 f9d0 	bl	80028d8 <RCC_GetSysClockFreqFromPLLSource>
 8002538:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	4a7c      	ldr	r2, [pc, #496]	; (8002730 <HAL_RCC_ClockConfig+0x268>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d93f      	bls.n	80025c2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002542:	4b7a      	ldr	r3, [pc, #488]	; (800272c <HAL_RCC_ClockConfig+0x264>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800254a:	2b00      	cmp	r3, #0
 800254c:	d009      	beq.n	8002562 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002556:	2b00      	cmp	r3, #0
 8002558:	d033      	beq.n	80025c2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800255e:	2b00      	cmp	r3, #0
 8002560:	d12f      	bne.n	80025c2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002562:	4b72      	ldr	r3, [pc, #456]	; (800272c <HAL_RCC_ClockConfig+0x264>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800256a:	4a70      	ldr	r2, [pc, #448]	; (800272c <HAL_RCC_ClockConfig+0x264>)
 800256c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002570:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002572:	2380      	movs	r3, #128	; 0x80
 8002574:	617b      	str	r3, [r7, #20]
 8002576:	e024      	b.n	80025c2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	685b      	ldr	r3, [r3, #4]
 800257c:	2b02      	cmp	r3, #2
 800257e:	d107      	bne.n	8002590 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002580:	4b6a      	ldr	r3, [pc, #424]	; (800272c <HAL_RCC_ClockConfig+0x264>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d109      	bne.n	80025a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e0c6      	b.n	800271e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002590:	4b66      	ldr	r3, [pc, #408]	; (800272c <HAL_RCC_ClockConfig+0x264>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e0be      	b.n	800271e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80025a0:	f000 f8ce 	bl	8002740 <HAL_RCC_GetSysClockFreq>
 80025a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	4a61      	ldr	r2, [pc, #388]	; (8002730 <HAL_RCC_ClockConfig+0x268>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d909      	bls.n	80025c2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80025ae:	4b5f      	ldr	r3, [pc, #380]	; (800272c <HAL_RCC_ClockConfig+0x264>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025b6:	4a5d      	ldr	r2, [pc, #372]	; (800272c <HAL_RCC_ClockConfig+0x264>)
 80025b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025bc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80025be:	2380      	movs	r3, #128	; 0x80
 80025c0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025c2:	4b5a      	ldr	r3, [pc, #360]	; (800272c <HAL_RCC_ClockConfig+0x264>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f023 0203 	bic.w	r2, r3, #3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	4957      	ldr	r1, [pc, #348]	; (800272c <HAL_RCC_ClockConfig+0x264>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025d4:	f7fe fe8e 	bl	80012f4 <HAL_GetTick>
 80025d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025da:	e00a      	b.n	80025f2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025dc:	f7fe fe8a 	bl	80012f4 <HAL_GetTick>
 80025e0:	4602      	mov	r2, r0
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d901      	bls.n	80025f2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80025ee:	2303      	movs	r3, #3
 80025f0:	e095      	b.n	800271e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025f2:	4b4e      	ldr	r3, [pc, #312]	; (800272c <HAL_RCC_ClockConfig+0x264>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 020c 	and.w	r2, r3, #12
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	429a      	cmp	r2, r3
 8002602:	d1eb      	bne.n	80025dc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d023      	beq.n	8002658 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	2b00      	cmp	r3, #0
 800261a:	d005      	beq.n	8002628 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800261c:	4b43      	ldr	r3, [pc, #268]	; (800272c <HAL_RCC_ClockConfig+0x264>)
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	4a42      	ldr	r2, [pc, #264]	; (800272c <HAL_RCC_ClockConfig+0x264>)
 8002622:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002626:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 0308 	and.w	r3, r3, #8
 8002630:	2b00      	cmp	r3, #0
 8002632:	d007      	beq.n	8002644 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002634:	4b3d      	ldr	r3, [pc, #244]	; (800272c <HAL_RCC_ClockConfig+0x264>)
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800263c:	4a3b      	ldr	r2, [pc, #236]	; (800272c <HAL_RCC_ClockConfig+0x264>)
 800263e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002642:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002644:	4b39      	ldr	r3, [pc, #228]	; (800272c <HAL_RCC_ClockConfig+0x264>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	4936      	ldr	r1, [pc, #216]	; (800272c <HAL_RCC_ClockConfig+0x264>)
 8002652:	4313      	orrs	r3, r2
 8002654:	608b      	str	r3, [r1, #8]
 8002656:	e008      	b.n	800266a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	2b80      	cmp	r3, #128	; 0x80
 800265c:	d105      	bne.n	800266a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800265e:	4b33      	ldr	r3, [pc, #204]	; (800272c <HAL_RCC_ClockConfig+0x264>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	4a32      	ldr	r2, [pc, #200]	; (800272c <HAL_RCC_ClockConfig+0x264>)
 8002664:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002668:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800266a:	4b2f      	ldr	r3, [pc, #188]	; (8002728 <HAL_RCC_ClockConfig+0x260>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 030f 	and.w	r3, r3, #15
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	429a      	cmp	r2, r3
 8002676:	d21d      	bcs.n	80026b4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002678:	4b2b      	ldr	r3, [pc, #172]	; (8002728 <HAL_RCC_ClockConfig+0x260>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f023 020f 	bic.w	r2, r3, #15
 8002680:	4929      	ldr	r1, [pc, #164]	; (8002728 <HAL_RCC_ClockConfig+0x260>)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	4313      	orrs	r3, r2
 8002686:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002688:	f7fe fe34 	bl	80012f4 <HAL_GetTick>
 800268c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800268e:	e00a      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002690:	f7fe fe30 	bl	80012f4 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	f241 3288 	movw	r2, #5000	; 0x1388
 800269e:	4293      	cmp	r3, r2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e03b      	b.n	800271e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026a6:	4b20      	ldr	r3, [pc, #128]	; (8002728 <HAL_RCC_ClockConfig+0x260>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d1ed      	bne.n	8002690 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0304 	and.w	r3, r3, #4
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d008      	beq.n	80026d2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026c0:	4b1a      	ldr	r3, [pc, #104]	; (800272c <HAL_RCC_ClockConfig+0x264>)
 80026c2:	689b      	ldr	r3, [r3, #8]
 80026c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	4917      	ldr	r1, [pc, #92]	; (800272c <HAL_RCC_ClockConfig+0x264>)
 80026ce:	4313      	orrs	r3, r2
 80026d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0308 	and.w	r3, r3, #8
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d009      	beq.n	80026f2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026de:	4b13      	ldr	r3, [pc, #76]	; (800272c <HAL_RCC_ClockConfig+0x264>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	00db      	lsls	r3, r3, #3
 80026ec:	490f      	ldr	r1, [pc, #60]	; (800272c <HAL_RCC_ClockConfig+0x264>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80026f2:	f000 f825 	bl	8002740 <HAL_RCC_GetSysClockFreq>
 80026f6:	4602      	mov	r2, r0
 80026f8:	4b0c      	ldr	r3, [pc, #48]	; (800272c <HAL_RCC_ClockConfig+0x264>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	091b      	lsrs	r3, r3, #4
 80026fe:	f003 030f 	and.w	r3, r3, #15
 8002702:	490c      	ldr	r1, [pc, #48]	; (8002734 <HAL_RCC_ClockConfig+0x26c>)
 8002704:	5ccb      	ldrb	r3, [r1, r3]
 8002706:	f003 031f 	and.w	r3, r3, #31
 800270a:	fa22 f303 	lsr.w	r3, r2, r3
 800270e:	4a0a      	ldr	r2, [pc, #40]	; (8002738 <HAL_RCC_ClockConfig+0x270>)
 8002710:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002712:	4b0a      	ldr	r3, [pc, #40]	; (800273c <HAL_RCC_ClockConfig+0x274>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f7fe fc98 	bl	800104c <HAL_InitTick>
 800271c:	4603      	mov	r3, r0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3718      	adds	r7, #24
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	40022000 	.word	0x40022000
 800272c:	40021000 	.word	0x40021000
 8002730:	04c4b400 	.word	0x04c4b400
 8002734:	08005ff8 	.word	0x08005ff8
 8002738:	20000000 	.word	0x20000000
 800273c:	20000004 	.word	0x20000004

08002740 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002740:	b480      	push	{r7}
 8002742:	b087      	sub	sp, #28
 8002744:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002746:	4b2c      	ldr	r3, [pc, #176]	; (80027f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	f003 030c 	and.w	r3, r3, #12
 800274e:	2b04      	cmp	r3, #4
 8002750:	d102      	bne.n	8002758 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002752:	4b2a      	ldr	r3, [pc, #168]	; (80027fc <HAL_RCC_GetSysClockFreq+0xbc>)
 8002754:	613b      	str	r3, [r7, #16]
 8002756:	e047      	b.n	80027e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002758:	4b27      	ldr	r3, [pc, #156]	; (80027f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f003 030c 	and.w	r3, r3, #12
 8002760:	2b08      	cmp	r3, #8
 8002762:	d102      	bne.n	800276a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002764:	4b26      	ldr	r3, [pc, #152]	; (8002800 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002766:	613b      	str	r3, [r7, #16]
 8002768:	e03e      	b.n	80027e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800276a:	4b23      	ldr	r3, [pc, #140]	; (80027f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f003 030c 	and.w	r3, r3, #12
 8002772:	2b0c      	cmp	r3, #12
 8002774:	d136      	bne.n	80027e4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002776:	4b20      	ldr	r3, [pc, #128]	; (80027f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002778:	68db      	ldr	r3, [r3, #12]
 800277a:	f003 0303 	and.w	r3, r3, #3
 800277e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002780:	4b1d      	ldr	r3, [pc, #116]	; (80027f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	091b      	lsrs	r3, r3, #4
 8002786:	f003 030f 	and.w	r3, r3, #15
 800278a:	3301      	adds	r3, #1
 800278c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2b03      	cmp	r3, #3
 8002792:	d10c      	bne.n	80027ae <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002794:	4a1a      	ldr	r2, [pc, #104]	; (8002800 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	fbb2 f3f3 	udiv	r3, r2, r3
 800279c:	4a16      	ldr	r2, [pc, #88]	; (80027f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800279e:	68d2      	ldr	r2, [r2, #12]
 80027a0:	0a12      	lsrs	r2, r2, #8
 80027a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80027a6:	fb02 f303 	mul.w	r3, r2, r3
 80027aa:	617b      	str	r3, [r7, #20]
      break;
 80027ac:	e00c      	b.n	80027c8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027ae:	4a13      	ldr	r2, [pc, #76]	; (80027fc <HAL_RCC_GetSysClockFreq+0xbc>)
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027b6:	4a10      	ldr	r2, [pc, #64]	; (80027f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027b8:	68d2      	ldr	r2, [r2, #12]
 80027ba:	0a12      	lsrs	r2, r2, #8
 80027bc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80027c0:	fb02 f303 	mul.w	r3, r2, r3
 80027c4:	617b      	str	r3, [r7, #20]
      break;
 80027c6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027c8:	4b0b      	ldr	r3, [pc, #44]	; (80027f8 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	0e5b      	lsrs	r3, r3, #25
 80027ce:	f003 0303 	and.w	r3, r3, #3
 80027d2:	3301      	adds	r3, #1
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80027d8:	697a      	ldr	r2, [r7, #20]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80027e0:	613b      	str	r3, [r7, #16]
 80027e2:	e001      	b.n	80027e8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80027e4:	2300      	movs	r3, #0
 80027e6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80027e8:	693b      	ldr	r3, [r7, #16]
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	371c      	adds	r7, #28
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	40021000 	.word	0x40021000
 80027fc:	00f42400 	.word	0x00f42400
 8002800:	016e3600 	.word	0x016e3600

08002804 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002808:	4b03      	ldr	r3, [pc, #12]	; (8002818 <HAL_RCC_GetHCLKFreq+0x14>)
 800280a:	681b      	ldr	r3, [r3, #0]
}
 800280c:	4618      	mov	r0, r3
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	20000000 	.word	0x20000000

0800281c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002820:	f7ff fff0 	bl	8002804 <HAL_RCC_GetHCLKFreq>
 8002824:	4602      	mov	r2, r0
 8002826:	4b06      	ldr	r3, [pc, #24]	; (8002840 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	0a1b      	lsrs	r3, r3, #8
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	4904      	ldr	r1, [pc, #16]	; (8002844 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002832:	5ccb      	ldrb	r3, [r1, r3]
 8002834:	f003 031f 	and.w	r3, r3, #31
 8002838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800283c:	4618      	mov	r0, r3
 800283e:	bd80      	pop	{r7, pc}
 8002840:	40021000 	.word	0x40021000
 8002844:	08006008 	.word	0x08006008

08002848 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800284c:	f7ff ffda 	bl	8002804 <HAL_RCC_GetHCLKFreq>
 8002850:	4602      	mov	r2, r0
 8002852:	4b06      	ldr	r3, [pc, #24]	; (800286c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	0adb      	lsrs	r3, r3, #11
 8002858:	f003 0307 	and.w	r3, r3, #7
 800285c:	4904      	ldr	r1, [pc, #16]	; (8002870 <HAL_RCC_GetPCLK2Freq+0x28>)
 800285e:	5ccb      	ldrb	r3, [r1, r3]
 8002860:	f003 031f 	and.w	r3, r3, #31
 8002864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002868:	4618      	mov	r0, r3
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40021000 	.word	0x40021000
 8002870:	08006008 	.word	0x08006008

08002874 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002874:	b480      	push	{r7}
 8002876:	b083      	sub	sp, #12
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	220f      	movs	r2, #15
 8002882:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002884:	4b12      	ldr	r3, [pc, #72]	; (80028d0 <HAL_RCC_GetClockConfig+0x5c>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f003 0203 	and.w	r2, r3, #3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002890:	4b0f      	ldr	r3, [pc, #60]	; (80028d0 <HAL_RCC_GetClockConfig+0x5c>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800289c:	4b0c      	ldr	r3, [pc, #48]	; (80028d0 <HAL_RCC_GetClockConfig+0x5c>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80028a8:	4b09      	ldr	r3, [pc, #36]	; (80028d0 <HAL_RCC_GetClockConfig+0x5c>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	08db      	lsrs	r3, r3, #3
 80028ae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80028b6:	4b07      	ldr	r3, [pc, #28]	; (80028d4 <HAL_RCC_GetClockConfig+0x60>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 020f 	and.w	r2, r3, #15
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	601a      	str	r2, [r3, #0]
}
 80028c2:	bf00      	nop
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	40021000 	.word	0x40021000
 80028d4:	40022000 	.word	0x40022000

080028d8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	b087      	sub	sp, #28
 80028dc:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028de:	4b1e      	ldr	r3, [pc, #120]	; (8002958 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	f003 0303 	and.w	r3, r3, #3
 80028e6:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028e8:	4b1b      	ldr	r3, [pc, #108]	; (8002958 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028ea:	68db      	ldr	r3, [r3, #12]
 80028ec:	091b      	lsrs	r3, r3, #4
 80028ee:	f003 030f 	and.w	r3, r3, #15
 80028f2:	3301      	adds	r3, #1
 80028f4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	2b03      	cmp	r3, #3
 80028fa:	d10c      	bne.n	8002916 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028fc:	4a17      	ldr	r2, [pc, #92]	; (800295c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	fbb2 f3f3 	udiv	r3, r2, r3
 8002904:	4a14      	ldr	r2, [pc, #80]	; (8002958 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002906:	68d2      	ldr	r2, [r2, #12]
 8002908:	0a12      	lsrs	r2, r2, #8
 800290a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800290e:	fb02 f303 	mul.w	r3, r2, r3
 8002912:	617b      	str	r3, [r7, #20]
    break;
 8002914:	e00c      	b.n	8002930 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002916:	4a12      	ldr	r2, [pc, #72]	; (8002960 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	fbb2 f3f3 	udiv	r3, r2, r3
 800291e:	4a0e      	ldr	r2, [pc, #56]	; (8002958 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002920:	68d2      	ldr	r2, [r2, #12]
 8002922:	0a12      	lsrs	r2, r2, #8
 8002924:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002928:	fb02 f303 	mul.w	r3, r2, r3
 800292c:	617b      	str	r3, [r7, #20]
    break;
 800292e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002930:	4b09      	ldr	r3, [pc, #36]	; (8002958 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	0e5b      	lsrs	r3, r3, #25
 8002936:	f003 0303 	and.w	r3, r3, #3
 800293a:	3301      	adds	r3, #1
 800293c:	005b      	lsls	r3, r3, #1
 800293e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002940:	697a      	ldr	r2, [r7, #20]
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	fbb2 f3f3 	udiv	r3, r2, r3
 8002948:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800294a:	687b      	ldr	r3, [r7, #4]
}
 800294c:	4618      	mov	r0, r3
 800294e:	371c      	adds	r7, #28
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr
 8002958:	40021000 	.word	0x40021000
 800295c:	016e3600 	.word	0x016e3600
 8002960:	00f42400 	.word	0x00f42400

08002964 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b086      	sub	sp, #24
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800296c:	2300      	movs	r3, #0
 800296e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002970:	2300      	movs	r3, #0
 8002972:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 8098 	beq.w	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002982:	2300      	movs	r3, #0
 8002984:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002986:	4b43      	ldr	r3, [pc, #268]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800298a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d10d      	bne.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002992:	4b40      	ldr	r3, [pc, #256]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002996:	4a3f      	ldr	r2, [pc, #252]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002998:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800299c:	6593      	str	r3, [r2, #88]	; 0x58
 800299e:	4b3d      	ldr	r3, [pc, #244]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a6:	60bb      	str	r3, [r7, #8]
 80029a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029aa:	2301      	movs	r3, #1
 80029ac:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029ae:	4b3a      	ldr	r3, [pc, #232]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a39      	ldr	r2, [pc, #228]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80029b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029ba:	f7fe fc9b 	bl	80012f4 <HAL_GetTick>
 80029be:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029c0:	e009      	b.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029c2:	f7fe fc97 	bl	80012f4 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d902      	bls.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	74fb      	strb	r3, [r7, #19]
        break;
 80029d4:	e005      	b.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029d6:	4b30      	ldr	r3, [pc, #192]	; (8002a98 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0ef      	beq.n	80029c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80029e2:	7cfb      	ldrb	r3, [r7, #19]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d159      	bne.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80029e8:	4b2a      	ldr	r3, [pc, #168]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029f2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d01e      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029fe:	697a      	ldr	r2, [r7, #20]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d019      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a04:	4b23      	ldr	r3, [pc, #140]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a0e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a10:	4b20      	ldr	r3, [pc, #128]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a16:	4a1f      	ldr	r2, [pc, #124]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a20:	4b1c      	ldr	r3, [pc, #112]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a26:	4a1b      	ldr	r2, [pc, #108]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a30:	4a18      	ldr	r2, [pc, #96]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d016      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a42:	f7fe fc57 	bl	80012f4 <HAL_GetTick>
 8002a46:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a48:	e00b      	b.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a4a:	f7fe fc53 	bl	80012f4 <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d902      	bls.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	74fb      	strb	r3, [r7, #19]
            break;
 8002a60:	e006      	b.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a62:	4b0c      	ldr	r3, [pc, #48]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d0ec      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002a70:	7cfb      	ldrb	r3, [r7, #19]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10b      	bne.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a76:	4b07      	ldr	r3, [pc, #28]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a84:	4903      	ldr	r1, [pc, #12]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002a8c:	e008      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a8e:	7cfb      	ldrb	r3, [r7, #19]
 8002a90:	74bb      	strb	r3, [r7, #18]
 8002a92:	e005      	b.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002a94:	40021000 	.word	0x40021000
 8002a98:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a9c:	7cfb      	ldrb	r3, [r7, #19]
 8002a9e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002aa0:	7c7b      	ldrb	r3, [r7, #17]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d105      	bne.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aa6:	4ba7      	ldr	r3, [pc, #668]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002aaa:	4aa6      	ldr	r2, [pc, #664]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002aac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ab0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00a      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002abe:	4ba1      	ldr	r3, [pc, #644]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ac0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac4:	f023 0203 	bic.w	r2, r3, #3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	499d      	ldr	r1, [pc, #628]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0302 	and.w	r3, r3, #2
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00a      	beq.n	8002af6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ae0:	4b98      	ldr	r3, [pc, #608]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae6:	f023 020c 	bic.w	r2, r3, #12
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	4995      	ldr	r1, [pc, #596]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 0304 	and.w	r3, r3, #4
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00a      	beq.n	8002b18 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b02:	4b90      	ldr	r3, [pc, #576]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b08:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	498c      	ldr	r1, [pc, #560]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0308 	and.w	r3, r3, #8
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00a      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b24:	4b87      	ldr	r3, [pc, #540]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b2a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	4984      	ldr	r1, [pc, #528]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b34:	4313      	orrs	r3, r2
 8002b36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f003 0310 	and.w	r3, r3, #16
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00a      	beq.n	8002b5c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b46:	4b7f      	ldr	r3, [pc, #508]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	695b      	ldr	r3, [r3, #20]
 8002b54:	497b      	ldr	r1, [pc, #492]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0320 	and.w	r3, r3, #32
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00a      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b68:	4b76      	ldr	r3, [pc, #472]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b6e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	699b      	ldr	r3, [r3, #24]
 8002b76:	4973      	ldr	r1, [pc, #460]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00a      	beq.n	8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b8a:	4b6e      	ldr	r3, [pc, #440]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b90:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	69db      	ldr	r3, [r3, #28]
 8002b98:	496a      	ldr	r1, [pc, #424]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d00a      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002bac:	4b65      	ldr	r3, [pc, #404]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	4962      	ldr	r1, [pc, #392]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00a      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002bce:	4b5d      	ldr	r3, [pc, #372]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bdc:	4959      	ldr	r1, [pc, #356]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d00a      	beq.n	8002c06 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002bf0:	4b54      	ldr	r3, [pc, #336]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002bf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf6:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bfe:	4951      	ldr	r1, [pc, #324]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d015      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c12:	4b4c      	ldr	r3, [pc, #304]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c20:	4948      	ldr	r1, [pc, #288]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c22:	4313      	orrs	r3, r2
 8002c24:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c30:	d105      	bne.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x2da>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c32:	4b44      	ldr	r3, [pc, #272]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	4a43      	ldr	r2, [pc, #268]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c38:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c3c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d015      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c4a:	4b3e      	ldr	r3, [pc, #248]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c50:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c58:	493a      	ldr	r1, [pc, #232]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c68:	d105      	bne.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x312>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c6a:	4b36      	ldr	r3, [pc, #216]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c6c:	68db      	ldr	r3, [r3, #12]
 8002c6e:	4a35      	ldr	r2, [pc, #212]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c74:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d015      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002c82:	4b30      	ldr	r3, [pc, #192]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c88:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c90:	492c      	ldr	r1, [pc, #176]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ca0:	d105      	bne.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ca2:	4b28      	ldr	r3, [pc, #160]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	4a27      	ldr	r2, [pc, #156]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ca8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cac:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d015      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x382>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002cba:	4b22      	ldr	r3, [pc, #136]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc8:	491e      	ldr	r1, [pc, #120]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cd8:	d105      	bne.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cda:	4b1a      	ldr	r3, [pc, #104]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	4a19      	ldr	r2, [pc, #100]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ce0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ce4:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d015      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002cf2:	4b14      	ldr	r3, [pc, #80]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d00:	4910      	ldr	r1, [pc, #64]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d10:	d105      	bne.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d12:	4b0c      	ldr	r3, [pc, #48]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	4a0b      	ldr	r2, [pc, #44]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d1c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d018      	beq.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002d2a:	4b06      	ldr	r3, [pc, #24]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d30:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d38:	4902      	ldr	r1, [pc, #8]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	e001      	b.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002d44:	40021000 	.word	0x40021000
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d4e:	d105      	bne.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002d50:	4b21      	ldr	r3, [pc, #132]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	4a20      	ldr	r2, [pc, #128]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002d56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d5a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d015      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x430>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002d68:	4b1b      	ldr	r3, [pc, #108]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002d6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d6e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d76:	4918      	ldr	r1, [pc, #96]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002d78:	4313      	orrs	r3, r2
 8002d7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d86:	d105      	bne.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x430>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002d88:	4b13      	ldr	r3, [pc, #76]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	4a12      	ldr	r2, [pc, #72]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002d8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d92:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d015      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002da0:	4b0d      	ldr	r3, [pc, #52]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002da2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002da6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dae:	490a      	ldr	r1, [pc, #40]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002dba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002dbe:	d105      	bne.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x468>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002dc0:	4b05      	ldr	r3, [pc, #20]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	4a04      	ldr	r2, [pc, #16]	; (8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8002dc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002dca:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002dcc:	7cbb      	ldrb	r3, [r7, #18]
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3718      	adds	r7, #24
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	40021000 	.word	0x40021000

08002ddc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e049      	b.n	8002e82 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d106      	bne.n	8002e08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 f841 	bl	8002e8a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2202      	movs	r2, #2
 8002e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	3304      	adds	r3, #4
 8002e18:	4619      	mov	r1, r3
 8002e1a:	4610      	mov	r0, r2
 8002e1c:	f000 fa28 	bl	8003270 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2201      	movs	r2, #1
 8002e5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2201      	movs	r2, #1
 8002e6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	b083      	sub	sp, #12
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002e92:	bf00      	nop
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr
	...

08002ea0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d001      	beq.n	8002eb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e04f      	b.n	8002f58 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2202      	movs	r2, #2
 8002ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	68da      	ldr	r2, [r3, #12]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f042 0201 	orr.w	r2, r2, #1
 8002ece:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a23      	ldr	r2, [pc, #140]	; (8002f64 <HAL_TIM_Base_Start_IT+0xc4>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d01d      	beq.n	8002f16 <HAL_TIM_Base_Start_IT+0x76>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee2:	d018      	beq.n	8002f16 <HAL_TIM_Base_Start_IT+0x76>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a1f      	ldr	r2, [pc, #124]	; (8002f68 <HAL_TIM_Base_Start_IT+0xc8>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d013      	beq.n	8002f16 <HAL_TIM_Base_Start_IT+0x76>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a1e      	ldr	r2, [pc, #120]	; (8002f6c <HAL_TIM_Base_Start_IT+0xcc>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d00e      	beq.n	8002f16 <HAL_TIM_Base_Start_IT+0x76>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a1c      	ldr	r2, [pc, #112]	; (8002f70 <HAL_TIM_Base_Start_IT+0xd0>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d009      	beq.n	8002f16 <HAL_TIM_Base_Start_IT+0x76>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a1b      	ldr	r2, [pc, #108]	; (8002f74 <HAL_TIM_Base_Start_IT+0xd4>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d004      	beq.n	8002f16 <HAL_TIM_Base_Start_IT+0x76>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a19      	ldr	r2, [pc, #100]	; (8002f78 <HAL_TIM_Base_Start_IT+0xd8>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d115      	bne.n	8002f42 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	689a      	ldr	r2, [r3, #8]
 8002f1c:	4b17      	ldr	r3, [pc, #92]	; (8002f7c <HAL_TIM_Base_Start_IT+0xdc>)
 8002f1e:	4013      	ands	r3, r2
 8002f20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2b06      	cmp	r3, #6
 8002f26:	d015      	beq.n	8002f54 <HAL_TIM_Base_Start_IT+0xb4>
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f2e:	d011      	beq.n	8002f54 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f042 0201 	orr.w	r2, r2, #1
 8002f3e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f40:	e008      	b.n	8002f54 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f042 0201 	orr.w	r2, r2, #1
 8002f50:	601a      	str	r2, [r3, #0]
 8002f52:	e000      	b.n	8002f56 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f54:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
}
 8002f58:	4618      	mov	r0, r3
 8002f5a:	3714      	adds	r7, #20
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr
 8002f64:	40012c00 	.word	0x40012c00
 8002f68:	40000400 	.word	0x40000400
 8002f6c:	40000800 	.word	0x40000800
 8002f70:	40013400 	.word	0x40013400
 8002f74:	40014000 	.word	0x40014000
 8002f78:	40015000 	.word	0x40015000
 8002f7c:	00010007 	.word	0x00010007

08002f80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	691b      	ldr	r3, [r3, #16]
 8002f96:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d020      	beq.n	8002fe4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f003 0302 	and.w	r3, r3, #2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d01b      	beq.n	8002fe4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f06f 0202 	mvn.w	r2, #2
 8002fb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	699b      	ldr	r3, [r3, #24]
 8002fc2:	f003 0303 	and.w	r3, r3, #3
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 f931 	bl	8003232 <HAL_TIM_IC_CaptureCallback>
 8002fd0:	e005      	b.n	8002fde <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f923 	bl	800321e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	f000 f934 	bl	8003246 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	f003 0304 	and.w	r3, r3, #4
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d020      	beq.n	8003030 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f003 0304 	and.w	r3, r3, #4
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d01b      	beq.n	8003030 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f06f 0204 	mvn.w	r2, #4
 8003000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2202      	movs	r2, #2
 8003006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	699b      	ldr	r3, [r3, #24]
 800300e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003012:	2b00      	cmp	r3, #0
 8003014:	d003      	beq.n	800301e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 f90b 	bl	8003232 <HAL_TIM_IC_CaptureCallback>
 800301c:	e005      	b.n	800302a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f8fd 	bl	800321e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003024:	6878      	ldr	r0, [r7, #4]
 8003026:	f000 f90e 	bl	8003246 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2200      	movs	r2, #0
 800302e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003030:	68bb      	ldr	r3, [r7, #8]
 8003032:	f003 0308 	and.w	r3, r3, #8
 8003036:	2b00      	cmp	r3, #0
 8003038:	d020      	beq.n	800307c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	f003 0308 	and.w	r3, r3, #8
 8003040:	2b00      	cmp	r3, #0
 8003042:	d01b      	beq.n	800307c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f06f 0208 	mvn.w	r2, #8
 800304c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2204      	movs	r2, #4
 8003052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	69db      	ldr	r3, [r3, #28]
 800305a:	f003 0303 	and.w	r3, r3, #3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d003      	beq.n	800306a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	f000 f8e5 	bl	8003232 <HAL_TIM_IC_CaptureCallback>
 8003068:	e005      	b.n	8003076 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f000 f8d7 	bl	800321e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 f8e8 	bl	8003246 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	f003 0310 	and.w	r3, r3, #16
 8003082:	2b00      	cmp	r3, #0
 8003084:	d020      	beq.n	80030c8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	f003 0310 	and.w	r3, r3, #16
 800308c:	2b00      	cmp	r3, #0
 800308e:	d01b      	beq.n	80030c8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f06f 0210 	mvn.w	r2, #16
 8003098:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2208      	movs	r2, #8
 800309e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 f8bf 	bl	8003232 <HAL_TIM_IC_CaptureCallback>
 80030b4:	e005      	b.n	80030c2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 f8b1 	bl	800321e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f000 f8c2 	bl	8003246 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2200      	movs	r2, #0
 80030c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	f003 0301 	and.w	r3, r3, #1
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d00c      	beq.n	80030ec <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f003 0301 	and.w	r3, r3, #1
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d007      	beq.n	80030ec <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f06f 0201 	mvn.w	r2, #1
 80030e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f7fd fcfa 	bl	8000ae0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d104      	bne.n	8003100 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00c      	beq.n	800311a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003106:	2b00      	cmp	r3, #0
 8003108:	d007      	beq.n	800311a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 8003112:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 f95f 	bl	80033d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00c      	beq.n	800313e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800312a:	2b00      	cmp	r3, #0
 800312c:	d007      	beq.n	800313e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003136:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 f957 	bl	80033ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003144:	2b00      	cmp	r3, #0
 8003146:	d00c      	beq.n	8003162 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800314e:	2b00      	cmp	r3, #0
 8003150:	d007      	beq.n	8003162 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800315a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800315c:	6878      	ldr	r0, [r7, #4]
 800315e:	f000 f87c 	bl	800325a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	f003 0320 	and.w	r3, r3, #32
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00c      	beq.n	8003186 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f003 0320 	and.w	r3, r3, #32
 8003172:	2b00      	cmp	r3, #0
 8003174:	d007      	beq.n	8003186 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f06f 0220 	mvn.w	r2, #32
 800317e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	f000 f91f 	bl	80033c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d00c      	beq.n	80031aa <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d007      	beq.n	80031aa <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80031a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f000 f92b 	bl	8003400 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d00c      	beq.n	80031ce <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d007      	beq.n	80031ce <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80031c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 f923 	bl	8003414 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00c      	beq.n	80031f2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d007      	beq.n	80031f2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80031ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 f91b 	bl	8003428 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00c      	beq.n	8003216 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d007      	beq.n	8003216 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800320e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 f913 	bl	800343c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003216:	bf00      	nop
 8003218:	3710      	adds	r7, #16
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800321e:	b480      	push	{r7}
 8003220:	b083      	sub	sp, #12
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003226:	bf00      	nop
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr

08003232 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003232:	b480      	push	{r7}
 8003234:	b083      	sub	sp, #12
 8003236:	af00      	add	r7, sp, #0
 8003238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800323a:	bf00      	nop
 800323c:	370c      	adds	r7, #12
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003246:	b480      	push	{r7}
 8003248:	b083      	sub	sp, #12
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800324e:	bf00      	nop
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr

0800325a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800325a:	b480      	push	{r7}
 800325c:	b083      	sub	sp, #12
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003262:	bf00      	nop
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr
	...

08003270 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a48      	ldr	r2, [pc, #288]	; (80033a4 <TIM_Base_SetConfig+0x134>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d013      	beq.n	80032b0 <TIM_Base_SetConfig+0x40>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800328e:	d00f      	beq.n	80032b0 <TIM_Base_SetConfig+0x40>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	4a45      	ldr	r2, [pc, #276]	; (80033a8 <TIM_Base_SetConfig+0x138>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d00b      	beq.n	80032b0 <TIM_Base_SetConfig+0x40>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a44      	ldr	r2, [pc, #272]	; (80033ac <TIM_Base_SetConfig+0x13c>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d007      	beq.n	80032b0 <TIM_Base_SetConfig+0x40>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a43      	ldr	r2, [pc, #268]	; (80033b0 <TIM_Base_SetConfig+0x140>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d003      	beq.n	80032b0 <TIM_Base_SetConfig+0x40>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a42      	ldr	r2, [pc, #264]	; (80033b4 <TIM_Base_SetConfig+0x144>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d108      	bne.n	80032c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	68fa      	ldr	r2, [r7, #12]
 80032be:	4313      	orrs	r3, r2
 80032c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	4a37      	ldr	r2, [pc, #220]	; (80033a4 <TIM_Base_SetConfig+0x134>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d01f      	beq.n	800330a <TIM_Base_SetConfig+0x9a>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d0:	d01b      	beq.n	800330a <TIM_Base_SetConfig+0x9a>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	4a34      	ldr	r2, [pc, #208]	; (80033a8 <TIM_Base_SetConfig+0x138>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d017      	beq.n	800330a <TIM_Base_SetConfig+0x9a>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a33      	ldr	r2, [pc, #204]	; (80033ac <TIM_Base_SetConfig+0x13c>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d013      	beq.n	800330a <TIM_Base_SetConfig+0x9a>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a32      	ldr	r2, [pc, #200]	; (80033b0 <TIM_Base_SetConfig+0x140>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d00f      	beq.n	800330a <TIM_Base_SetConfig+0x9a>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a32      	ldr	r2, [pc, #200]	; (80033b8 <TIM_Base_SetConfig+0x148>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d00b      	beq.n	800330a <TIM_Base_SetConfig+0x9a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a31      	ldr	r2, [pc, #196]	; (80033bc <TIM_Base_SetConfig+0x14c>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d007      	beq.n	800330a <TIM_Base_SetConfig+0x9a>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a30      	ldr	r2, [pc, #192]	; (80033c0 <TIM_Base_SetConfig+0x150>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d003      	beq.n	800330a <TIM_Base_SetConfig+0x9a>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a2b      	ldr	r2, [pc, #172]	; (80033b4 <TIM_Base_SetConfig+0x144>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d108      	bne.n	800331c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003310:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	68fa      	ldr	r2, [r7, #12]
 8003318:	4313      	orrs	r3, r2
 800331a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	4313      	orrs	r3, r2
 8003328:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003330:	683b      	ldr	r3, [r7, #0]
 8003332:	689a      	ldr	r2, [r3, #8]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a18      	ldr	r2, [pc, #96]	; (80033a4 <TIM_Base_SetConfig+0x134>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d013      	beq.n	8003370 <TIM_Base_SetConfig+0x100>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a19      	ldr	r2, [pc, #100]	; (80033b0 <TIM_Base_SetConfig+0x140>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d00f      	beq.n	8003370 <TIM_Base_SetConfig+0x100>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a19      	ldr	r2, [pc, #100]	; (80033b8 <TIM_Base_SetConfig+0x148>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d00b      	beq.n	8003370 <TIM_Base_SetConfig+0x100>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a18      	ldr	r2, [pc, #96]	; (80033bc <TIM_Base_SetConfig+0x14c>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d007      	beq.n	8003370 <TIM_Base_SetConfig+0x100>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a17      	ldr	r2, [pc, #92]	; (80033c0 <TIM_Base_SetConfig+0x150>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d003      	beq.n	8003370 <TIM_Base_SetConfig+0x100>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a12      	ldr	r2, [pc, #72]	; (80033b4 <TIM_Base_SetConfig+0x144>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d103      	bne.n	8003378 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	691a      	ldr	r2, [r3, #16]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	691b      	ldr	r3, [r3, #16]
 8003382:	f003 0301 	and.w	r3, r3, #1
 8003386:	2b01      	cmp	r3, #1
 8003388:	d105      	bne.n	8003396 <TIM_Base_SetConfig+0x126>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	f023 0201 	bic.w	r2, r3, #1
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	611a      	str	r2, [r3, #16]
  }
}
 8003396:	bf00      	nop
 8003398:	3714      	adds	r7, #20
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	40012c00 	.word	0x40012c00
 80033a8:	40000400 	.word	0x40000400
 80033ac:	40000800 	.word	0x40000800
 80033b0:	40013400 	.word	0x40013400
 80033b4:	40015000 	.word	0x40015000
 80033b8:	40014000 	.word	0x40014000
 80033bc:	40014400 	.word	0x40014400
 80033c0:	40014800 	.word	0x40014800

080033c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b083      	sub	sp, #12
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033cc:	bf00      	nop
 80033ce:	370c      	adds	r7, #12
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033d8:	b480      	push	{r7}
 80033da:	b083      	sub	sp, #12
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033e0:	bf00      	nop
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b083      	sub	sp, #12
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80033f4:	bf00      	nop
 80033f6:	370c      	adds	r7, #12
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr

08003400 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8003400:	b480      	push	{r7}
 8003402:	b083      	sub	sp, #12
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e042      	b.n	80034e8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003468:	2b00      	cmp	r3, #0
 800346a:	d106      	bne.n	800347a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f7fd fb75 	bl	8000b64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2224      	movs	r2, #36	; 0x24
 800347e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f022 0201 	bic.w	r2, r2, #1
 8003490:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003496:	2b00      	cmp	r3, #0
 8003498:	d002      	beq.n	80034a0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 fe48 	bl	8004130 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 fb49 	bl	8003b38 <UART_SetConfig>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d101      	bne.n	80034b0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e01b      	b.n	80034e8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	685a      	ldr	r2, [r3, #4]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	689a      	ldr	r2, [r3, #8]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f042 0201 	orr.w	r2, r2, #1
 80034de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034e0:	6878      	ldr	r0, [r7, #4]
 80034e2:	f000 fec7 	bl	8004274 <UART_CheckIdleState>
 80034e6:	4603      	mov	r3, r0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3708      	adds	r7, #8
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b0ba      	sub	sp, #232	; 0xe8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003516:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800351a:	f640 030f 	movw	r3, #2063	; 0x80f
 800351e:	4013      	ands	r3, r2
 8003520:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003524:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003528:	2b00      	cmp	r3, #0
 800352a:	d11b      	bne.n	8003564 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800352c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003530:	f003 0320 	and.w	r3, r3, #32
 8003534:	2b00      	cmp	r3, #0
 8003536:	d015      	beq.n	8003564 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800353c:	f003 0320 	and.w	r3, r3, #32
 8003540:	2b00      	cmp	r3, #0
 8003542:	d105      	bne.n	8003550 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003544:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800354c:	2b00      	cmp	r3, #0
 800354e:	d009      	beq.n	8003564 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003554:	2b00      	cmp	r3, #0
 8003556:	f000 82e3 	beq.w	8003b20 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	4798      	blx	r3
      }
      return;
 8003562:	e2dd      	b.n	8003b20 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003564:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003568:	2b00      	cmp	r3, #0
 800356a:	f000 8123 	beq.w	80037b4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800356e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003572:	4b8d      	ldr	r3, [pc, #564]	; (80037a8 <HAL_UART_IRQHandler+0x2b8>)
 8003574:	4013      	ands	r3, r2
 8003576:	2b00      	cmp	r3, #0
 8003578:	d106      	bne.n	8003588 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800357a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800357e:	4b8b      	ldr	r3, [pc, #556]	; (80037ac <HAL_UART_IRQHandler+0x2bc>)
 8003580:	4013      	ands	r3, r2
 8003582:	2b00      	cmp	r3, #0
 8003584:	f000 8116 	beq.w	80037b4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800358c:	f003 0301 	and.w	r3, r3, #1
 8003590:	2b00      	cmp	r3, #0
 8003592:	d011      	beq.n	80035b8 <HAL_UART_IRQHandler+0xc8>
 8003594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00b      	beq.n	80035b8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2201      	movs	r2, #1
 80035a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ae:	f043 0201 	orr.w	r2, r3, #1
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80035b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d011      	beq.n	80035e8 <HAL_UART_IRQHandler+0xf8>
 80035c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035c8:	f003 0301 	and.w	r3, r3, #1
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d00b      	beq.n	80035e8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	2202      	movs	r2, #2
 80035d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035de:	f043 0204 	orr.w	r2, r3, #4
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80035e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035ec:	f003 0304 	and.w	r3, r3, #4
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d011      	beq.n	8003618 <HAL_UART_IRQHandler+0x128>
 80035f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035f8:	f003 0301 	and.w	r3, r3, #1
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00b      	beq.n	8003618 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2204      	movs	r2, #4
 8003606:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800360e:	f043 0202 	orr.w	r2, r3, #2
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800361c:	f003 0308 	and.w	r3, r3, #8
 8003620:	2b00      	cmp	r3, #0
 8003622:	d017      	beq.n	8003654 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003628:	f003 0320 	and.w	r3, r3, #32
 800362c:	2b00      	cmp	r3, #0
 800362e:	d105      	bne.n	800363c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003630:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003634:	4b5c      	ldr	r3, [pc, #368]	; (80037a8 <HAL_UART_IRQHandler+0x2b8>)
 8003636:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00b      	beq.n	8003654 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2208      	movs	r2, #8
 8003642:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800364a:	f043 0208 	orr.w	r2, r3, #8
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003658:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800365c:	2b00      	cmp	r3, #0
 800365e:	d012      	beq.n	8003686 <HAL_UART_IRQHandler+0x196>
 8003660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003664:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00c      	beq.n	8003686 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003674:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800367c:	f043 0220 	orr.w	r2, r3, #32
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800368c:	2b00      	cmp	r3, #0
 800368e:	f000 8249 	beq.w	8003b24 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003696:	f003 0320 	and.w	r3, r3, #32
 800369a:	2b00      	cmp	r3, #0
 800369c:	d013      	beq.n	80036c6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800369e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80036a2:	f003 0320 	and.w	r3, r3, #32
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d105      	bne.n	80036b6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80036aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80036ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d007      	beq.n	80036c6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d003      	beq.n	80036c6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036da:	2b40      	cmp	r3, #64	; 0x40
 80036dc:	d005      	beq.n	80036ea <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80036de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80036e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d054      	beq.n	8003794 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	f000 fed9 	bl	80044a2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036fa:	2b40      	cmp	r3, #64	; 0x40
 80036fc:	d146      	bne.n	800378c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	3308      	adds	r3, #8
 8003704:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003708:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800370c:	e853 3f00 	ldrex	r3, [r3]
 8003710:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003714:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003718:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800371c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	3308      	adds	r3, #8
 8003726:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800372a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800372e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003732:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003736:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800373a:	e841 2300 	strex	r3, r2, [r1]
 800373e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003742:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d1d9      	bne.n	80036fe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003750:	2b00      	cmp	r3, #0
 8003752:	d017      	beq.n	8003784 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800375a:	4a15      	ldr	r2, [pc, #84]	; (80037b0 <HAL_UART_IRQHandler+0x2c0>)
 800375c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003764:	4618      	mov	r0, r3
 8003766:	f7fd ffb2 	bl	80016ce <HAL_DMA_Abort_IT>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d019      	beq.n	80037a4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003778:	687a      	ldr	r2, [r7, #4]
 800377a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 800377e:	4610      	mov	r0, r2
 8003780:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003782:	e00f      	b.n	80037a4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f002 f9e3 	bl	8005b50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800378a:	e00b      	b.n	80037a4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f002 f9df 	bl	8005b50 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003792:	e007      	b.n	80037a4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f002 f9db 	bl	8005b50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 80037a2:	e1bf      	b.n	8003b24 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037a4:	bf00      	nop
    return;
 80037a6:	e1bd      	b.n	8003b24 <HAL_UART_IRQHandler+0x634>
 80037a8:	10000001 	.word	0x10000001
 80037ac:	04000120 	.word	0x04000120
 80037b0:	0800456f 	.word	0x0800456f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	f040 8153 	bne.w	8003a64 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80037be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037c2:	f003 0310 	and.w	r3, r3, #16
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f000 814c 	beq.w	8003a64 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80037cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037d0:	f003 0310 	and.w	r3, r3, #16
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	f000 8145 	beq.w	8003a64 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2210      	movs	r2, #16
 80037e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037ec:	2b40      	cmp	r3, #64	; 0x40
 80037ee:	f040 80bb 	bne.w	8003968 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003800:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003804:	2b00      	cmp	r3, #0
 8003806:	f000 818f 	beq.w	8003b28 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003810:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003814:	429a      	cmp	r2, r3
 8003816:	f080 8187 	bcs.w	8003b28 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003820:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0320 	and.w	r3, r3, #32
 8003832:	2b00      	cmp	r3, #0
 8003834:	f040 8087 	bne.w	8003946 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003840:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003844:	e853 3f00 	ldrex	r3, [r3]
 8003848:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800384c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003850:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003854:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	461a      	mov	r2, r3
 800385e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003862:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003866:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800386a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800386e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003872:	e841 2300 	strex	r3, r2, [r1]
 8003876:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800387a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1da      	bne.n	8003838 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	3308      	adds	r3, #8
 8003888:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800388a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800388c:	e853 3f00 	ldrex	r3, [r3]
 8003890:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003892:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003894:	f023 0301 	bic.w	r3, r3, #1
 8003898:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	3308      	adds	r3, #8
 80038a2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80038a6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80038aa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ac:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80038ae:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80038b2:	e841 2300 	strex	r3, r2, [r1]
 80038b6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80038b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d1e1      	bne.n	8003882 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	3308      	adds	r3, #8
 80038c4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038c6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038c8:	e853 3f00 	ldrex	r3, [r3]
 80038cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80038ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038d4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	3308      	adds	r3, #8
 80038de:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80038e2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80038e4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038e6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80038e8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80038ea:	e841 2300 	strex	r3, r2, [r1]
 80038ee:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80038f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d1e3      	bne.n	80038be <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2220      	movs	r2, #32
 80038fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800390a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800390c:	e853 3f00 	ldrex	r3, [r3]
 8003910:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003912:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003914:	f023 0310 	bic.w	r3, r3, #16
 8003918:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	461a      	mov	r2, r3
 8003922:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003926:	65bb      	str	r3, [r7, #88]	; 0x58
 8003928:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800392a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800392c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800392e:	e841 2300 	strex	r3, r2, [r1]
 8003932:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003934:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1e4      	bne.n	8003904 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003940:	4618      	mov	r0, r3
 8003942:	f7fd fe6b 	bl	800161c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2202      	movs	r2, #2
 800394a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003958:	b29b      	uxth	r3, r3
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	b29b      	uxth	r3, r3
 800395e:	4619      	mov	r1, r3
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f002 f8e1 	bl	8005b28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003966:	e0df      	b.n	8003b28 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003974:	b29b      	uxth	r3, r3
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8003982:	b29b      	uxth	r3, r3
 8003984:	2b00      	cmp	r3, #0
 8003986:	f000 80d1 	beq.w	8003b2c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 800398a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800398e:	2b00      	cmp	r3, #0
 8003990:	f000 80cc 	beq.w	8003b2c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800399c:	e853 3f00 	ldrex	r3, [r3]
 80039a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80039a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	461a      	mov	r2, r3
 80039b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80039b6:	647b      	str	r3, [r7, #68]	; 0x44
 80039b8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80039bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80039be:	e841 2300 	strex	r3, r2, [r1]
 80039c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80039c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1e4      	bne.n	8003994 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	3308      	adds	r3, #8
 80039d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039d4:	e853 3f00 	ldrex	r3, [r3]
 80039d8:	623b      	str	r3, [r7, #32]
   return(result);
 80039da:	6a3b      	ldr	r3, [r7, #32]
 80039dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039e0:	f023 0301 	bic.w	r3, r3, #1
 80039e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	3308      	adds	r3, #8
 80039ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80039f2:	633a      	str	r2, [r7, #48]	; 0x30
 80039f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039fa:	e841 2300 	strex	r3, r2, [r1]
 80039fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d1e1      	bne.n	80039ca <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2220      	movs	r2, #32
 8003a0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	e853 3f00 	ldrex	r3, [r3]
 8003a26:	60fb      	str	r3, [r7, #12]
   return(result);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f023 0310 	bic.w	r3, r3, #16
 8003a2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	461a      	mov	r2, r3
 8003a38:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003a3c:	61fb      	str	r3, [r7, #28]
 8003a3e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a40:	69b9      	ldr	r1, [r7, #24]
 8003a42:	69fa      	ldr	r2, [r7, #28]
 8003a44:	e841 2300 	strex	r3, r2, [r1]
 8003a48:	617b      	str	r3, [r7, #20]
   return(result);
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d1e4      	bne.n	8003a1a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2202      	movs	r2, #2
 8003a54:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a56:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	f002 f863 	bl	8005b28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a62:	e063      	b.n	8003b2c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003a64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00e      	beq.n	8003a8e <HAL_UART_IRQHandler+0x59e>
 8003a70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d008      	beq.n	8003a8e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003a84:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f000 fdb2 	bl	80045f0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003a8c:	e051      	b.n	8003b32 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d014      	beq.n	8003ac4 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003a9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d105      	bne.n	8003ab2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003aa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003aaa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d008      	beq.n	8003ac4 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d03a      	beq.n	8003b30 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	4798      	blx	r3
    }
    return;
 8003ac2:	e035      	b.n	8003b30 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003ac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d009      	beq.n	8003ae4 <HAL_UART_IRQHandler+0x5f4>
 8003ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d003      	beq.n	8003ae4 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f000 fd5c 	bl	800459a <UART_EndTransmit_IT>
    return;
 8003ae2:	e026      	b.n	8003b32 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003ae4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ae8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d009      	beq.n	8003b04 <HAL_UART_IRQHandler+0x614>
 8003af0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003af4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d003      	beq.n	8003b04 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 fd81 	bl	8004604 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b02:	e016      	b.n	8003b32 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8003b04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b08:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d010      	beq.n	8003b32 <HAL_UART_IRQHandler+0x642>
 8003b10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	da0c      	bge.n	8003b32 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f001 fff3 	bl	8005b04 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003b1e:	e008      	b.n	8003b32 <HAL_UART_IRQHandler+0x642>
      return;
 8003b20:	bf00      	nop
 8003b22:	e006      	b.n	8003b32 <HAL_UART_IRQHandler+0x642>
    return;
 8003b24:	bf00      	nop
 8003b26:	e004      	b.n	8003b32 <HAL_UART_IRQHandler+0x642>
      return;
 8003b28:	bf00      	nop
 8003b2a:	e002      	b.n	8003b32 <HAL_UART_IRQHandler+0x642>
      return;
 8003b2c:	bf00      	nop
 8003b2e:	e000      	b.n	8003b32 <HAL_UART_IRQHandler+0x642>
    return;
 8003b30:	bf00      	nop
  }
}
 8003b32:	37e8      	adds	r7, #232	; 0xe8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b3c:	b08c      	sub	sp, #48	; 0x30
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b42:	2300      	movs	r3, #0
 8003b44:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	689a      	ldr	r2, [r3, #8]
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	431a      	orrs	r2, r3
 8003b52:	697b      	ldr	r3, [r7, #20]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	431a      	orrs	r2, r3
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	69db      	ldr	r3, [r3, #28]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	4baa      	ldr	r3, [pc, #680]	; (8003e10 <UART_SetConfig+0x2d8>)
 8003b68:	4013      	ands	r3, r2
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	6812      	ldr	r2, [r2, #0]
 8003b6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b70:	430b      	orrs	r3, r1
 8003b72:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b7e:	697b      	ldr	r3, [r7, #20]
 8003b80:	68da      	ldr	r2, [r3, #12]
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	430a      	orrs	r2, r1
 8003b88:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b8a:	697b      	ldr	r3, [r7, #20]
 8003b8c:	699b      	ldr	r3, [r3, #24]
 8003b8e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a9f      	ldr	r2, [pc, #636]	; (8003e14 <UART_SetConfig+0x2dc>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d004      	beq.n	8003ba4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	6a1b      	ldr	r3, [r3, #32]
 8003b9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003bae:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	6812      	ldr	r2, [r2, #0]
 8003bb6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003bb8:	430b      	orrs	r3, r1
 8003bba:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc2:	f023 010f 	bic.w	r1, r3, #15
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a90      	ldr	r2, [pc, #576]	; (8003e18 <UART_SetConfig+0x2e0>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d125      	bne.n	8003c28 <UART_SetConfig+0xf0>
 8003bdc:	4b8f      	ldr	r3, [pc, #572]	; (8003e1c <UART_SetConfig+0x2e4>)
 8003bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003be2:	f003 0303 	and.w	r3, r3, #3
 8003be6:	2b03      	cmp	r3, #3
 8003be8:	d81a      	bhi.n	8003c20 <UART_SetConfig+0xe8>
 8003bea:	a201      	add	r2, pc, #4	; (adr r2, 8003bf0 <UART_SetConfig+0xb8>)
 8003bec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bf0:	08003c01 	.word	0x08003c01
 8003bf4:	08003c11 	.word	0x08003c11
 8003bf8:	08003c09 	.word	0x08003c09
 8003bfc:	08003c19 	.word	0x08003c19
 8003c00:	2301      	movs	r3, #1
 8003c02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c06:	e116      	b.n	8003e36 <UART_SetConfig+0x2fe>
 8003c08:	2302      	movs	r3, #2
 8003c0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c0e:	e112      	b.n	8003e36 <UART_SetConfig+0x2fe>
 8003c10:	2304      	movs	r3, #4
 8003c12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c16:	e10e      	b.n	8003e36 <UART_SetConfig+0x2fe>
 8003c18:	2308      	movs	r3, #8
 8003c1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c1e:	e10a      	b.n	8003e36 <UART_SetConfig+0x2fe>
 8003c20:	2310      	movs	r3, #16
 8003c22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c26:	e106      	b.n	8003e36 <UART_SetConfig+0x2fe>
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a7c      	ldr	r2, [pc, #496]	; (8003e20 <UART_SetConfig+0x2e8>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d138      	bne.n	8003ca4 <UART_SetConfig+0x16c>
 8003c32:	4b7a      	ldr	r3, [pc, #488]	; (8003e1c <UART_SetConfig+0x2e4>)
 8003c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c38:	f003 030c 	and.w	r3, r3, #12
 8003c3c:	2b0c      	cmp	r3, #12
 8003c3e:	d82d      	bhi.n	8003c9c <UART_SetConfig+0x164>
 8003c40:	a201      	add	r2, pc, #4	; (adr r2, 8003c48 <UART_SetConfig+0x110>)
 8003c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c46:	bf00      	nop
 8003c48:	08003c7d 	.word	0x08003c7d
 8003c4c:	08003c9d 	.word	0x08003c9d
 8003c50:	08003c9d 	.word	0x08003c9d
 8003c54:	08003c9d 	.word	0x08003c9d
 8003c58:	08003c8d 	.word	0x08003c8d
 8003c5c:	08003c9d 	.word	0x08003c9d
 8003c60:	08003c9d 	.word	0x08003c9d
 8003c64:	08003c9d 	.word	0x08003c9d
 8003c68:	08003c85 	.word	0x08003c85
 8003c6c:	08003c9d 	.word	0x08003c9d
 8003c70:	08003c9d 	.word	0x08003c9d
 8003c74:	08003c9d 	.word	0x08003c9d
 8003c78:	08003c95 	.word	0x08003c95
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c82:	e0d8      	b.n	8003e36 <UART_SetConfig+0x2fe>
 8003c84:	2302      	movs	r3, #2
 8003c86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c8a:	e0d4      	b.n	8003e36 <UART_SetConfig+0x2fe>
 8003c8c:	2304      	movs	r3, #4
 8003c8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c92:	e0d0      	b.n	8003e36 <UART_SetConfig+0x2fe>
 8003c94:	2308      	movs	r3, #8
 8003c96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c9a:	e0cc      	b.n	8003e36 <UART_SetConfig+0x2fe>
 8003c9c:	2310      	movs	r3, #16
 8003c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ca2:	e0c8      	b.n	8003e36 <UART_SetConfig+0x2fe>
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a5e      	ldr	r2, [pc, #376]	; (8003e24 <UART_SetConfig+0x2ec>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d125      	bne.n	8003cfa <UART_SetConfig+0x1c2>
 8003cae:	4b5b      	ldr	r3, [pc, #364]	; (8003e1c <UART_SetConfig+0x2e4>)
 8003cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cb4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003cb8:	2b30      	cmp	r3, #48	; 0x30
 8003cba:	d016      	beq.n	8003cea <UART_SetConfig+0x1b2>
 8003cbc:	2b30      	cmp	r3, #48	; 0x30
 8003cbe:	d818      	bhi.n	8003cf2 <UART_SetConfig+0x1ba>
 8003cc0:	2b20      	cmp	r3, #32
 8003cc2:	d00a      	beq.n	8003cda <UART_SetConfig+0x1a2>
 8003cc4:	2b20      	cmp	r3, #32
 8003cc6:	d814      	bhi.n	8003cf2 <UART_SetConfig+0x1ba>
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d002      	beq.n	8003cd2 <UART_SetConfig+0x19a>
 8003ccc:	2b10      	cmp	r3, #16
 8003cce:	d008      	beq.n	8003ce2 <UART_SetConfig+0x1aa>
 8003cd0:	e00f      	b.n	8003cf2 <UART_SetConfig+0x1ba>
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cd8:	e0ad      	b.n	8003e36 <UART_SetConfig+0x2fe>
 8003cda:	2302      	movs	r3, #2
 8003cdc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ce0:	e0a9      	b.n	8003e36 <UART_SetConfig+0x2fe>
 8003ce2:	2304      	movs	r3, #4
 8003ce4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ce8:	e0a5      	b.n	8003e36 <UART_SetConfig+0x2fe>
 8003cea:	2308      	movs	r3, #8
 8003cec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cf0:	e0a1      	b.n	8003e36 <UART_SetConfig+0x2fe>
 8003cf2:	2310      	movs	r3, #16
 8003cf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cf8:	e09d      	b.n	8003e36 <UART_SetConfig+0x2fe>
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	4a4a      	ldr	r2, [pc, #296]	; (8003e28 <UART_SetConfig+0x2f0>)
 8003d00:	4293      	cmp	r3, r2
 8003d02:	d125      	bne.n	8003d50 <UART_SetConfig+0x218>
 8003d04:	4b45      	ldr	r3, [pc, #276]	; (8003e1c <UART_SetConfig+0x2e4>)
 8003d06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d0a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003d0e:	2bc0      	cmp	r3, #192	; 0xc0
 8003d10:	d016      	beq.n	8003d40 <UART_SetConfig+0x208>
 8003d12:	2bc0      	cmp	r3, #192	; 0xc0
 8003d14:	d818      	bhi.n	8003d48 <UART_SetConfig+0x210>
 8003d16:	2b80      	cmp	r3, #128	; 0x80
 8003d18:	d00a      	beq.n	8003d30 <UART_SetConfig+0x1f8>
 8003d1a:	2b80      	cmp	r3, #128	; 0x80
 8003d1c:	d814      	bhi.n	8003d48 <UART_SetConfig+0x210>
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d002      	beq.n	8003d28 <UART_SetConfig+0x1f0>
 8003d22:	2b40      	cmp	r3, #64	; 0x40
 8003d24:	d008      	beq.n	8003d38 <UART_SetConfig+0x200>
 8003d26:	e00f      	b.n	8003d48 <UART_SetConfig+0x210>
 8003d28:	2300      	movs	r3, #0
 8003d2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d2e:	e082      	b.n	8003e36 <UART_SetConfig+0x2fe>
 8003d30:	2302      	movs	r3, #2
 8003d32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d36:	e07e      	b.n	8003e36 <UART_SetConfig+0x2fe>
 8003d38:	2304      	movs	r3, #4
 8003d3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d3e:	e07a      	b.n	8003e36 <UART_SetConfig+0x2fe>
 8003d40:	2308      	movs	r3, #8
 8003d42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d46:	e076      	b.n	8003e36 <UART_SetConfig+0x2fe>
 8003d48:	2310      	movs	r3, #16
 8003d4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d4e:	e072      	b.n	8003e36 <UART_SetConfig+0x2fe>
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a35      	ldr	r2, [pc, #212]	; (8003e2c <UART_SetConfig+0x2f4>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d12a      	bne.n	8003db0 <UART_SetConfig+0x278>
 8003d5a:	4b30      	ldr	r3, [pc, #192]	; (8003e1c <UART_SetConfig+0x2e4>)
 8003d5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d68:	d01a      	beq.n	8003da0 <UART_SetConfig+0x268>
 8003d6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d6e:	d81b      	bhi.n	8003da8 <UART_SetConfig+0x270>
 8003d70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d74:	d00c      	beq.n	8003d90 <UART_SetConfig+0x258>
 8003d76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d7a:	d815      	bhi.n	8003da8 <UART_SetConfig+0x270>
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d003      	beq.n	8003d88 <UART_SetConfig+0x250>
 8003d80:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d84:	d008      	beq.n	8003d98 <UART_SetConfig+0x260>
 8003d86:	e00f      	b.n	8003da8 <UART_SetConfig+0x270>
 8003d88:	2300      	movs	r3, #0
 8003d8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d8e:	e052      	b.n	8003e36 <UART_SetConfig+0x2fe>
 8003d90:	2302      	movs	r3, #2
 8003d92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d96:	e04e      	b.n	8003e36 <UART_SetConfig+0x2fe>
 8003d98:	2304      	movs	r3, #4
 8003d9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003d9e:	e04a      	b.n	8003e36 <UART_SetConfig+0x2fe>
 8003da0:	2308      	movs	r3, #8
 8003da2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003da6:	e046      	b.n	8003e36 <UART_SetConfig+0x2fe>
 8003da8:	2310      	movs	r3, #16
 8003daa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dae:	e042      	b.n	8003e36 <UART_SetConfig+0x2fe>
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a17      	ldr	r2, [pc, #92]	; (8003e14 <UART_SetConfig+0x2dc>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d13a      	bne.n	8003e30 <UART_SetConfig+0x2f8>
 8003dba:	4b18      	ldr	r3, [pc, #96]	; (8003e1c <UART_SetConfig+0x2e4>)
 8003dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dc0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003dc4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003dc8:	d01a      	beq.n	8003e00 <UART_SetConfig+0x2c8>
 8003dca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003dce:	d81b      	bhi.n	8003e08 <UART_SetConfig+0x2d0>
 8003dd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dd4:	d00c      	beq.n	8003df0 <UART_SetConfig+0x2b8>
 8003dd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003dda:	d815      	bhi.n	8003e08 <UART_SetConfig+0x2d0>
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d003      	beq.n	8003de8 <UART_SetConfig+0x2b0>
 8003de0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003de4:	d008      	beq.n	8003df8 <UART_SetConfig+0x2c0>
 8003de6:	e00f      	b.n	8003e08 <UART_SetConfig+0x2d0>
 8003de8:	2300      	movs	r3, #0
 8003dea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dee:	e022      	b.n	8003e36 <UART_SetConfig+0x2fe>
 8003df0:	2302      	movs	r3, #2
 8003df2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003df6:	e01e      	b.n	8003e36 <UART_SetConfig+0x2fe>
 8003df8:	2304      	movs	r3, #4
 8003dfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003dfe:	e01a      	b.n	8003e36 <UART_SetConfig+0x2fe>
 8003e00:	2308      	movs	r3, #8
 8003e02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e06:	e016      	b.n	8003e36 <UART_SetConfig+0x2fe>
 8003e08:	2310      	movs	r3, #16
 8003e0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003e0e:	e012      	b.n	8003e36 <UART_SetConfig+0x2fe>
 8003e10:	cfff69f3 	.word	0xcfff69f3
 8003e14:	40008000 	.word	0x40008000
 8003e18:	40013800 	.word	0x40013800
 8003e1c:	40021000 	.word	0x40021000
 8003e20:	40004400 	.word	0x40004400
 8003e24:	40004800 	.word	0x40004800
 8003e28:	40004c00 	.word	0x40004c00
 8003e2c:	40005000 	.word	0x40005000
 8003e30:	2310      	movs	r3, #16
 8003e32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4aae      	ldr	r2, [pc, #696]	; (80040f4 <UART_SetConfig+0x5bc>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	f040 8097 	bne.w	8003f70 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e42:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003e46:	2b08      	cmp	r3, #8
 8003e48:	d823      	bhi.n	8003e92 <UART_SetConfig+0x35a>
 8003e4a:	a201      	add	r2, pc, #4	; (adr r2, 8003e50 <UART_SetConfig+0x318>)
 8003e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e50:	08003e75 	.word	0x08003e75
 8003e54:	08003e93 	.word	0x08003e93
 8003e58:	08003e7d 	.word	0x08003e7d
 8003e5c:	08003e93 	.word	0x08003e93
 8003e60:	08003e83 	.word	0x08003e83
 8003e64:	08003e93 	.word	0x08003e93
 8003e68:	08003e93 	.word	0x08003e93
 8003e6c:	08003e93 	.word	0x08003e93
 8003e70:	08003e8b 	.word	0x08003e8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e74:	f7fe fcd2 	bl	800281c <HAL_RCC_GetPCLK1Freq>
 8003e78:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e7a:	e010      	b.n	8003e9e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e7c:	4b9e      	ldr	r3, [pc, #632]	; (80040f8 <UART_SetConfig+0x5c0>)
 8003e7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e80:	e00d      	b.n	8003e9e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e82:	f7fe fc5d 	bl	8002740 <HAL_RCC_GetSysClockFreq>
 8003e86:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e88:	e009      	b.n	8003e9e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e8e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e90:	e005      	b.n	8003e9e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8003e92:	2300      	movs	r3, #0
 8003e94:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003e9c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	f000 8130 	beq.w	8004106 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eaa:	4a94      	ldr	r2, [pc, #592]	; (80040fc <UART_SetConfig+0x5c4>)
 8003eac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb4:	fbb3 f3f2 	udiv	r3, r3, r2
 8003eb8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	685a      	ldr	r2, [r3, #4]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	005b      	lsls	r3, r3, #1
 8003ec2:	4413      	add	r3, r2
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d305      	bcc.n	8003ed6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003ed0:	69ba      	ldr	r2, [r7, #24]
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	d903      	bls.n	8003ede <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003edc:	e113      	b.n	8004106 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	60bb      	str	r3, [r7, #8]
 8003ee4:	60fa      	str	r2, [r7, #12]
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eea:	4a84      	ldr	r2, [pc, #528]	; (80040fc <UART_SetConfig+0x5c4>)
 8003eec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	603b      	str	r3, [r7, #0]
 8003ef6:	607a      	str	r2, [r7, #4]
 8003ef8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003efc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003f00:	f7fc f996 	bl	8000230 <__aeabi_uldivmod>
 8003f04:	4602      	mov	r2, r0
 8003f06:	460b      	mov	r3, r1
 8003f08:	4610      	mov	r0, r2
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	f04f 0200 	mov.w	r2, #0
 8003f10:	f04f 0300 	mov.w	r3, #0
 8003f14:	020b      	lsls	r3, r1, #8
 8003f16:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003f1a:	0202      	lsls	r2, r0, #8
 8003f1c:	6979      	ldr	r1, [r7, #20]
 8003f1e:	6849      	ldr	r1, [r1, #4]
 8003f20:	0849      	lsrs	r1, r1, #1
 8003f22:	2000      	movs	r0, #0
 8003f24:	460c      	mov	r4, r1
 8003f26:	4605      	mov	r5, r0
 8003f28:	eb12 0804 	adds.w	r8, r2, r4
 8003f2c:	eb43 0905 	adc.w	r9, r3, r5
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	469a      	mov	sl, r3
 8003f38:	4693      	mov	fp, r2
 8003f3a:	4652      	mov	r2, sl
 8003f3c:	465b      	mov	r3, fp
 8003f3e:	4640      	mov	r0, r8
 8003f40:	4649      	mov	r1, r9
 8003f42:	f7fc f975 	bl	8000230 <__aeabi_uldivmod>
 8003f46:	4602      	mov	r2, r0
 8003f48:	460b      	mov	r3, r1
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f4e:	6a3b      	ldr	r3, [r7, #32]
 8003f50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f54:	d308      	bcc.n	8003f68 <UART_SetConfig+0x430>
 8003f56:	6a3b      	ldr	r3, [r7, #32]
 8003f58:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f5c:	d204      	bcs.n	8003f68 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	6a3a      	ldr	r2, [r7, #32]
 8003f64:	60da      	str	r2, [r3, #12]
 8003f66:	e0ce      	b.n	8004106 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003f6e:	e0ca      	b.n	8004106 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	69db      	ldr	r3, [r3, #28]
 8003f74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f78:	d166      	bne.n	8004048 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8003f7a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f7e:	2b08      	cmp	r3, #8
 8003f80:	d827      	bhi.n	8003fd2 <UART_SetConfig+0x49a>
 8003f82:	a201      	add	r2, pc, #4	; (adr r2, 8003f88 <UART_SetConfig+0x450>)
 8003f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f88:	08003fad 	.word	0x08003fad
 8003f8c:	08003fb5 	.word	0x08003fb5
 8003f90:	08003fbd 	.word	0x08003fbd
 8003f94:	08003fd3 	.word	0x08003fd3
 8003f98:	08003fc3 	.word	0x08003fc3
 8003f9c:	08003fd3 	.word	0x08003fd3
 8003fa0:	08003fd3 	.word	0x08003fd3
 8003fa4:	08003fd3 	.word	0x08003fd3
 8003fa8:	08003fcb 	.word	0x08003fcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003fac:	f7fe fc36 	bl	800281c <HAL_RCC_GetPCLK1Freq>
 8003fb0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003fb2:	e014      	b.n	8003fde <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003fb4:	f7fe fc48 	bl	8002848 <HAL_RCC_GetPCLK2Freq>
 8003fb8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003fba:	e010      	b.n	8003fde <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003fbc:	4b4e      	ldr	r3, [pc, #312]	; (80040f8 <UART_SetConfig+0x5c0>)
 8003fbe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003fc0:	e00d      	b.n	8003fde <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003fc2:	f7fe fbbd 	bl	8002740 <HAL_RCC_GetSysClockFreq>
 8003fc6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003fc8:	e009      	b.n	8003fde <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003fca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fce:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003fd0:	e005      	b.n	8003fde <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003fdc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f000 8090 	beq.w	8004106 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fea:	4a44      	ldr	r2, [pc, #272]	; (80040fc <UART_SetConfig+0x5c4>)
 8003fec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ff0:	461a      	mov	r2, r3
 8003ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff4:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ff8:	005a      	lsls	r2, r3, #1
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	085b      	lsrs	r3, r3, #1
 8004000:	441a      	add	r2, r3
 8004002:	697b      	ldr	r3, [r7, #20]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	fbb2 f3f3 	udiv	r3, r2, r3
 800400a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800400c:	6a3b      	ldr	r3, [r7, #32]
 800400e:	2b0f      	cmp	r3, #15
 8004010:	d916      	bls.n	8004040 <UART_SetConfig+0x508>
 8004012:	6a3b      	ldr	r3, [r7, #32]
 8004014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004018:	d212      	bcs.n	8004040 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800401a:	6a3b      	ldr	r3, [r7, #32]
 800401c:	b29b      	uxth	r3, r3
 800401e:	f023 030f 	bic.w	r3, r3, #15
 8004022:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004024:	6a3b      	ldr	r3, [r7, #32]
 8004026:	085b      	lsrs	r3, r3, #1
 8004028:	b29b      	uxth	r3, r3
 800402a:	f003 0307 	and.w	r3, r3, #7
 800402e:	b29a      	uxth	r2, r3
 8004030:	8bfb      	ldrh	r3, [r7, #30]
 8004032:	4313      	orrs	r3, r2
 8004034:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	8bfa      	ldrh	r2, [r7, #30]
 800403c:	60da      	str	r2, [r3, #12]
 800403e:	e062      	b.n	8004106 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004046:	e05e      	b.n	8004106 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004048:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800404c:	2b08      	cmp	r3, #8
 800404e:	d828      	bhi.n	80040a2 <UART_SetConfig+0x56a>
 8004050:	a201      	add	r2, pc, #4	; (adr r2, 8004058 <UART_SetConfig+0x520>)
 8004052:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004056:	bf00      	nop
 8004058:	0800407d 	.word	0x0800407d
 800405c:	08004085 	.word	0x08004085
 8004060:	0800408d 	.word	0x0800408d
 8004064:	080040a3 	.word	0x080040a3
 8004068:	08004093 	.word	0x08004093
 800406c:	080040a3 	.word	0x080040a3
 8004070:	080040a3 	.word	0x080040a3
 8004074:	080040a3 	.word	0x080040a3
 8004078:	0800409b 	.word	0x0800409b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800407c:	f7fe fbce 	bl	800281c <HAL_RCC_GetPCLK1Freq>
 8004080:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004082:	e014      	b.n	80040ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004084:	f7fe fbe0 	bl	8002848 <HAL_RCC_GetPCLK2Freq>
 8004088:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800408a:	e010      	b.n	80040ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800408c:	4b1a      	ldr	r3, [pc, #104]	; (80040f8 <UART_SetConfig+0x5c0>)
 800408e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004090:	e00d      	b.n	80040ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004092:	f7fe fb55 	bl	8002740 <HAL_RCC_GetSysClockFreq>
 8004096:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004098:	e009      	b.n	80040ae <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800409a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800409e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80040a0:	e005      	b.n	80040ae <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80040a2:	2300      	movs	r3, #0
 80040a4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80040ac:	bf00      	nop
    }

    if (pclk != 0U)
 80040ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d028      	beq.n	8004106 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b8:	4a10      	ldr	r2, [pc, #64]	; (80040fc <UART_SetConfig+0x5c4>)
 80040ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80040be:	461a      	mov	r2, r3
 80040c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c2:	fbb3 f2f2 	udiv	r2, r3, r2
 80040c6:	697b      	ldr	r3, [r7, #20]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	085b      	lsrs	r3, r3, #1
 80040cc:	441a      	add	r2, r3
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040d8:	6a3b      	ldr	r3, [r7, #32]
 80040da:	2b0f      	cmp	r3, #15
 80040dc:	d910      	bls.n	8004100 <UART_SetConfig+0x5c8>
 80040de:	6a3b      	ldr	r3, [r7, #32]
 80040e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040e4:	d20c      	bcs.n	8004100 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80040e6:	6a3b      	ldr	r3, [r7, #32]
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	60da      	str	r2, [r3, #12]
 80040f0:	e009      	b.n	8004106 <UART_SetConfig+0x5ce>
 80040f2:	bf00      	nop
 80040f4:	40008000 	.word	0x40008000
 80040f8:	00f42400 	.word	0x00f42400
 80040fc:	08006010 	.word	0x08006010
      }
      else
      {
        ret = HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	2201      	movs	r2, #1
 800410a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	2201      	movs	r2, #1
 8004112:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	2200      	movs	r2, #0
 800411a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	2200      	movs	r2, #0
 8004120:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004122:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004126:	4618      	mov	r0, r3
 8004128:	3730      	adds	r7, #48	; 0x30
 800412a:	46bd      	mov	sp, r7
 800412c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004130 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800413c:	f003 0308 	and.w	r3, r3, #8
 8004140:	2b00      	cmp	r3, #0
 8004142:	d00a      	beq.n	800415a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	430a      	orrs	r2, r1
 8004158:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800415e:	f003 0301 	and.w	r3, r3, #1
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00a      	beq.n	800417c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	430a      	orrs	r2, r1
 800417a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004180:	f003 0302 	and.w	r3, r3, #2
 8004184:	2b00      	cmp	r3, #0
 8004186:	d00a      	beq.n	800419e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	430a      	orrs	r2, r1
 800419c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a2:	f003 0304 	and.w	r3, r3, #4
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d00a      	beq.n	80041c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	430a      	orrs	r2, r1
 80041be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c4:	f003 0310 	and.w	r3, r3, #16
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d00a      	beq.n	80041e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	689b      	ldr	r3, [r3, #8]
 80041d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	430a      	orrs	r2, r1
 80041e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e6:	f003 0320 	and.w	r3, r3, #32
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d00a      	beq.n	8004204 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	430a      	orrs	r2, r1
 8004202:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800420c:	2b00      	cmp	r3, #0
 800420e:	d01a      	beq.n	8004246 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	430a      	orrs	r2, r1
 8004224:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800422a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800422e:	d10a      	bne.n	8004246 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	430a      	orrs	r2, r1
 8004244:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800424a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800424e:	2b00      	cmp	r3, #0
 8004250:	d00a      	beq.n	8004268 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	430a      	orrs	r2, r1
 8004266:	605a      	str	r2, [r3, #4]
  }
}
 8004268:	bf00      	nop
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b098      	sub	sp, #96	; 0x60
 8004278:	af02      	add	r7, sp, #8
 800427a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004284:	f7fd f836 	bl	80012f4 <HAL_GetTick>
 8004288:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f003 0308 	and.w	r3, r3, #8
 8004294:	2b08      	cmp	r3, #8
 8004296:	d12f      	bne.n	80042f8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004298:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800429c:	9300      	str	r3, [sp, #0]
 800429e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80042a0:	2200      	movs	r2, #0
 80042a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	f000 f88e 	bl	80043c8 <UART_WaitOnFlagUntilTimeout>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d022      	beq.n	80042f8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ba:	e853 3f00 	ldrex	r3, [r3]
 80042be:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80042c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042c6:	653b      	str	r3, [r7, #80]	; 0x50
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	461a      	mov	r2, r3
 80042ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042d0:	647b      	str	r3, [r7, #68]	; 0x44
 80042d2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80042d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80042d8:	e841 2300 	strex	r3, r2, [r1]
 80042dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80042de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d1e6      	bne.n	80042b2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2220      	movs	r2, #32
 80042e8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e063      	b.n	80043c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f003 0304 	and.w	r3, r3, #4
 8004302:	2b04      	cmp	r3, #4
 8004304:	d149      	bne.n	800439a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004306:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800430a:	9300      	str	r3, [sp, #0]
 800430c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800430e:	2200      	movs	r2, #0
 8004310:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004314:	6878      	ldr	r0, [r7, #4]
 8004316:	f000 f857 	bl	80043c8 <UART_WaitOnFlagUntilTimeout>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d03c      	beq.n	800439a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004328:	e853 3f00 	ldrex	r3, [r3]
 800432c:	623b      	str	r3, [r7, #32]
   return(result);
 800432e:	6a3b      	ldr	r3, [r7, #32]
 8004330:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004334:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	461a      	mov	r2, r3
 800433c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800433e:	633b      	str	r3, [r7, #48]	; 0x30
 8004340:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004342:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004344:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004346:	e841 2300 	strex	r3, r2, [r1]
 800434a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800434c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1e6      	bne.n	8004320 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	3308      	adds	r3, #8
 8004358:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	e853 3f00 	ldrex	r3, [r3]
 8004360:	60fb      	str	r3, [r7, #12]
   return(result);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f023 0301 	bic.w	r3, r3, #1
 8004368:	64bb      	str	r3, [r7, #72]	; 0x48
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	3308      	adds	r3, #8
 8004370:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004372:	61fa      	str	r2, [r7, #28]
 8004374:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004376:	69b9      	ldr	r1, [r7, #24]
 8004378:	69fa      	ldr	r2, [r7, #28]
 800437a:	e841 2300 	strex	r3, r2, [r1]
 800437e:	617b      	str	r3, [r7, #20]
   return(result);
 8004380:	697b      	ldr	r3, [r7, #20]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1e5      	bne.n	8004352 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2220      	movs	r2, #32
 800438a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004396:	2303      	movs	r3, #3
 8004398:	e012      	b.n	80043c0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2220      	movs	r2, #32
 800439e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2220      	movs	r2, #32
 80043a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80043be:	2300      	movs	r3, #0
}
 80043c0:	4618      	mov	r0, r3
 80043c2:	3758      	adds	r7, #88	; 0x58
 80043c4:	46bd      	mov	sp, r7
 80043c6:	bd80      	pop	{r7, pc}

080043c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b084      	sub	sp, #16
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	603b      	str	r3, [r7, #0]
 80043d4:	4613      	mov	r3, r2
 80043d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043d8:	e04f      	b.n	800447a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043e0:	d04b      	beq.n	800447a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043e2:	f7fc ff87 	bl	80012f4 <HAL_GetTick>
 80043e6:	4602      	mov	r2, r0
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	69ba      	ldr	r2, [r7, #24]
 80043ee:	429a      	cmp	r2, r3
 80043f0:	d302      	bcc.n	80043f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d101      	bne.n	80043fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80043f8:	2303      	movs	r3, #3
 80043fa:	e04e      	b.n	800449a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f003 0304 	and.w	r3, r3, #4
 8004406:	2b00      	cmp	r3, #0
 8004408:	d037      	beq.n	800447a <UART_WaitOnFlagUntilTimeout+0xb2>
 800440a:	68bb      	ldr	r3, [r7, #8]
 800440c:	2b80      	cmp	r3, #128	; 0x80
 800440e:	d034      	beq.n	800447a <UART_WaitOnFlagUntilTimeout+0xb2>
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	2b40      	cmp	r3, #64	; 0x40
 8004414:	d031      	beq.n	800447a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	69db      	ldr	r3, [r3, #28]
 800441c:	f003 0308 	and.w	r3, r3, #8
 8004420:	2b08      	cmp	r3, #8
 8004422:	d110      	bne.n	8004446 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	2208      	movs	r2, #8
 800442a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f000 f838 	bl	80044a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2208      	movs	r2, #8
 8004436:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e029      	b.n	800449a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	69db      	ldr	r3, [r3, #28]
 800444c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004450:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004454:	d111      	bne.n	800447a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800445e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004460:	68f8      	ldr	r0, [r7, #12]
 8004462:	f000 f81e 	bl	80044a2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2220      	movs	r2, #32
 800446a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004476:	2303      	movs	r3, #3
 8004478:	e00f      	b.n	800449a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	69da      	ldr	r2, [r3, #28]
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	4013      	ands	r3, r2
 8004484:	68ba      	ldr	r2, [r7, #8]
 8004486:	429a      	cmp	r2, r3
 8004488:	bf0c      	ite	eq
 800448a:	2301      	moveq	r3, #1
 800448c:	2300      	movne	r3, #0
 800448e:	b2db      	uxtb	r3, r3
 8004490:	461a      	mov	r2, r3
 8004492:	79fb      	ldrb	r3, [r7, #7]
 8004494:	429a      	cmp	r2, r3
 8004496:	d0a0      	beq.n	80043da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3710      	adds	r7, #16
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80044a2:	b480      	push	{r7}
 80044a4:	b095      	sub	sp, #84	; 0x54
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044b2:	e853 3f00 	ldrex	r3, [r3]
 80044b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80044b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	461a      	mov	r2, r3
 80044c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044c8:	643b      	str	r3, [r7, #64]	; 0x40
 80044ca:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80044ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044d0:	e841 2300 	strex	r3, r2, [r1]
 80044d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1e6      	bne.n	80044aa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	3308      	adds	r3, #8
 80044e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044e4:	6a3b      	ldr	r3, [r7, #32]
 80044e6:	e853 3f00 	ldrex	r3, [r3]
 80044ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80044f2:	f023 0301 	bic.w	r3, r3, #1
 80044f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	3308      	adds	r3, #8
 80044fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004500:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004502:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004504:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004506:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004508:	e841 2300 	strex	r3, r2, [r1]
 800450c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800450e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1e3      	bne.n	80044dc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004518:	2b01      	cmp	r3, #1
 800451a:	d118      	bne.n	800454e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	e853 3f00 	ldrex	r3, [r3]
 8004528:	60bb      	str	r3, [r7, #8]
   return(result);
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	f023 0310 	bic.w	r3, r3, #16
 8004530:	647b      	str	r3, [r7, #68]	; 0x44
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	461a      	mov	r2, r3
 8004538:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800453a:	61bb      	str	r3, [r7, #24]
 800453c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800453e:	6979      	ldr	r1, [r7, #20]
 8004540:	69ba      	ldr	r2, [r7, #24]
 8004542:	e841 2300 	strex	r3, r2, [r1]
 8004546:	613b      	str	r3, [r7, #16]
   return(result);
 8004548:	693b      	ldr	r3, [r7, #16]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d1e6      	bne.n	800451c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2220      	movs	r2, #32
 8004552:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004562:	bf00      	nop
 8004564:	3754      	adds	r7, #84	; 0x54
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr

0800456e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800456e:	b580      	push	{r7, lr}
 8004570:	b084      	sub	sp, #16
 8004572:	af00      	add	r7, sp, #0
 8004574:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800457a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2200      	movs	r2, #0
 8004588:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	f001 fadf 	bl	8005b50 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004592:	bf00      	nop
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800459a:	b580      	push	{r7, lr}
 800459c:	b088      	sub	sp, #32
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	e853 3f00 	ldrex	r3, [r3]
 80045ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045b6:	61fb      	str	r3, [r7, #28]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	461a      	mov	r2, r3
 80045be:	69fb      	ldr	r3, [r7, #28]
 80045c0:	61bb      	str	r3, [r7, #24]
 80045c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c4:	6979      	ldr	r1, [r7, #20]
 80045c6:	69ba      	ldr	r2, [r7, #24]
 80045c8:	e841 2300 	strex	r3, r2, [r1]
 80045cc:	613b      	str	r3, [r7, #16]
   return(result);
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1e6      	bne.n	80045a2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2220      	movs	r2, #32
 80045d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f001 fa1e 	bl	8005a24 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80045e8:	bf00      	nop
 80045ea:	3720      	adds	r7, #32
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80045f8:	bf00      	nop
 80045fa:	370c      	adds	r7, #12
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004604:	b480      	push	{r7}
 8004606:	b083      	sub	sp, #12
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004618:	b480      	push	{r7}
 800461a:	b085      	sub	sp, #20
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004626:	2b01      	cmp	r3, #1
 8004628:	d101      	bne.n	800462e <HAL_UARTEx_DisableFifoMode+0x16>
 800462a:	2302      	movs	r3, #2
 800462c:	e027      	b.n	800467e <HAL_UARTEx_DisableFifoMode+0x66>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2224      	movs	r2, #36	; 0x24
 800463a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681a      	ldr	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f022 0201 	bic.w	r2, r2, #1
 8004654:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800465c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68fa      	ldr	r2, [r7, #12]
 800466a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2220      	movs	r2, #32
 8004670:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2200      	movs	r2, #0
 8004678:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3714      	adds	r7, #20
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr

0800468a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800468a:	b580      	push	{r7, lr}
 800468c:	b084      	sub	sp, #16
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
 8004692:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800469a:	2b01      	cmp	r3, #1
 800469c:	d101      	bne.n	80046a2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800469e:	2302      	movs	r3, #2
 80046a0:	e02d      	b.n	80046fe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2201      	movs	r2, #1
 80046a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2224      	movs	r2, #36	; 0x24
 80046ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f022 0201 	bic.w	r2, r2, #1
 80046c8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	683a      	ldr	r2, [r7, #0]
 80046da:	430a      	orrs	r2, r1
 80046dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 f850 	bl	8004784 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2220      	movs	r2, #32
 80046f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3710      	adds	r7, #16
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004706:	b580      	push	{r7, lr}
 8004708:	b084      	sub	sp, #16
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
 800470e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8004716:	2b01      	cmp	r3, #1
 8004718:	d101      	bne.n	800471e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800471a:	2302      	movs	r3, #2
 800471c:	e02d      	b.n	800477a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2224      	movs	r2, #36	; 0x24
 800472a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f022 0201 	bic.w	r2, r2, #1
 8004744:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	683a      	ldr	r2, [r7, #0]
 8004756:	430a      	orrs	r2, r1
 8004758:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f000 f812 	bl	8004784 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2220      	movs	r2, #32
 800476c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
	...

08004784 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004784:	b480      	push	{r7}
 8004786:	b085      	sub	sp, #20
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004790:	2b00      	cmp	r3, #0
 8004792:	d108      	bne.n	80047a6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2201      	movs	r2, #1
 8004798:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80047a4:	e031      	b.n	800480a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80047a6:	2308      	movs	r3, #8
 80047a8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80047aa:	2308      	movs	r3, #8
 80047ac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	0e5b      	lsrs	r3, r3, #25
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	f003 0307 	and.w	r3, r3, #7
 80047bc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	0f5b      	lsrs	r3, r3, #29
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	f003 0307 	and.w	r3, r3, #7
 80047cc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80047ce:	7bbb      	ldrb	r3, [r7, #14]
 80047d0:	7b3a      	ldrb	r2, [r7, #12]
 80047d2:	4911      	ldr	r1, [pc, #68]	; (8004818 <UARTEx_SetNbDataToProcess+0x94>)
 80047d4:	5c8a      	ldrb	r2, [r1, r2]
 80047d6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80047da:	7b3a      	ldrb	r2, [r7, #12]
 80047dc:	490f      	ldr	r1, [pc, #60]	; (800481c <UARTEx_SetNbDataToProcess+0x98>)
 80047de:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80047e0:	fb93 f3f2 	sdiv	r3, r3, r2
 80047e4:	b29a      	uxth	r2, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80047ec:	7bfb      	ldrb	r3, [r7, #15]
 80047ee:	7b7a      	ldrb	r2, [r7, #13]
 80047f0:	4909      	ldr	r1, [pc, #36]	; (8004818 <UARTEx_SetNbDataToProcess+0x94>)
 80047f2:	5c8a      	ldrb	r2, [r1, r2]
 80047f4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80047f8:	7b7a      	ldrb	r2, [r7, #13]
 80047fa:	4908      	ldr	r1, [pc, #32]	; (800481c <UARTEx_SetNbDataToProcess+0x98>)
 80047fc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80047fe:	fb93 f3f2 	sdiv	r3, r3, r2
 8004802:	b29a      	uxth	r2, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800480a:	bf00      	nop
 800480c:	3714      	adds	r7, #20
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	08006028 	.word	0x08006028
 800481c:	08006030 	.word	0x08006030

08004820 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004820:	b480      	push	{r7}
 8004822:	b085      	sub	sp, #20
 8004824:	af00      	add	r7, sp, #0
 8004826:	4603      	mov	r3, r0
 8004828:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800482a:	2300      	movs	r3, #0
 800482c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800482e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004832:	2b84      	cmp	r3, #132	; 0x84
 8004834:	d005      	beq.n	8004842 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004836:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	4413      	add	r3, r2
 800483e:	3303      	adds	r3, #3
 8004840:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004842:	68fb      	ldr	r3, [r7, #12]
}
 8004844:	4618      	mov	r0, r3
 8004846:	3714      	adds	r7, #20
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004854:	f000 fa6e 	bl	8004d34 <vTaskStartScheduler>
  
  return osOK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	bd80      	pop	{r7, pc}

0800485e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800485e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004860:	b089      	sub	sp, #36	; 0x24
 8004862:	af04      	add	r7, sp, #16
 8004864:	6078      	str	r0, [r7, #4]
 8004866:	6039      	str	r1, [r7, #0]
      return NULL;
    } 
  }
#elif( configSUPPORT_STATIC_ALLOCATION == 1 )

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685c      	ldr	r4, [r3, #4]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	691e      	ldr	r6, [r3, #16]
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800487a:	4618      	mov	r0, r3
 800487c:	f7ff ffd0 	bl	8004820 <makeFreeRtosPriority>
 8004880:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800488a:	9202      	str	r2, [sp, #8]
 800488c:	9301      	str	r3, [sp, #4]
 800488e:	9100      	str	r1, [sp, #0]
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	4632      	mov	r2, r6
 8004894:	4629      	mov	r1, r5
 8004896:	4620      	mov	r0, r4
 8004898:	f000 f8ce 	bl	8004a38 <xTaskCreateStatic>
 800489c:	60f8      	str	r0, [r7, #12]
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800489e:	68fb      	ldr	r3, [r7, #12]
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3714      	adds	r7, #20
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080048a8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d001      	beq.n	80048be <osDelay+0x16>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	e000      	b.n	80048c0 <osDelay+0x18>
 80048be:	2301      	movs	r3, #1
 80048c0:	4618      	mov	r0, r3
 80048c2:	f000 fa03 	bl	8004ccc <vTaskDelay>
  
  return osOK;
 80048c6:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3710      	adds	r7, #16
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f103 0208 	add.w	r2, r3, #8
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f103 0208 	add.w	r2, r3, #8
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f103 0208 	add.w	r2, r3, #8
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004904:	bf00      	nop
 8004906:	370c      	adds	r7, #12
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800491e:	bf00      	nop
 8004920:	370c      	adds	r7, #12
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr

0800492a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800492a:	b480      	push	{r7}
 800492c:	b085      	sub	sp, #20
 800492e:	af00      	add	r7, sp, #0
 8004930:	6078      	str	r0, [r7, #4]
 8004932:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	68fa      	ldr	r2, [r7, #12]
 800493e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	689a      	ldr	r2, [r3, #8]
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	683a      	ldr	r2, [r7, #0]
 800494e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	687a      	ldr	r2, [r7, #4]
 800495a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	1c5a      	adds	r2, r3, #1
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	601a      	str	r2, [r3, #0]
}
 8004966:	bf00      	nop
 8004968:	3714      	adds	r7, #20
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr

08004972 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004972:	b480      	push	{r7}
 8004974:	b085      	sub	sp, #20
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
 800497a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004988:	d103      	bne.n	8004992 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	60fb      	str	r3, [r7, #12]
 8004990:	e00c      	b.n	80049ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	3308      	adds	r3, #8
 8004996:	60fb      	str	r3, [r7, #12]
 8004998:	e002      	b.n	80049a0 <vListInsert+0x2e>
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	60fb      	str	r3, [r7, #12]
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68ba      	ldr	r2, [r7, #8]
 80049a8:	429a      	cmp	r2, r3
 80049aa:	d2f6      	bcs.n	800499a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	685a      	ldr	r2, [r3, #4]
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	683a      	ldr	r2, [r7, #0]
 80049ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	683a      	ldr	r2, [r7, #0]
 80049c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	1c5a      	adds	r2, r3, #1
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	601a      	str	r2, [r3, #0]
}
 80049d8:	bf00      	nop
 80049da:	3714      	adds	r7, #20
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	687a      	ldr	r2, [r7, #4]
 80049f8:	6892      	ldr	r2, [r2, #8]
 80049fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	6852      	ldr	r2, [r2, #4]
 8004a04:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d103      	bne.n	8004a18 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	689a      	ldr	r2, [r3, #8]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	1e5a      	subs	r2, r3, #1
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	681b      	ldr	r3, [r3, #0]
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3714      	adds	r7, #20
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b08e      	sub	sp, #56	; 0x38
 8004a3c:	af04      	add	r7, sp, #16
 8004a3e:	60f8      	str	r0, [r7, #12]
 8004a40:	60b9      	str	r1, [r7, #8]
 8004a42:	607a      	str	r2, [r7, #4]
 8004a44:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004a46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d10a      	bne.n	8004a62 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004a4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a50:	f383 8811 	msr	BASEPRI, r3
 8004a54:	f3bf 8f6f 	isb	sy
 8004a58:	f3bf 8f4f 	dsb	sy
 8004a5c:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004a5e:	bf00      	nop
 8004a60:	e7fe      	b.n	8004a60 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d10a      	bne.n	8004a7e <xTaskCreateStatic+0x46>
	__asm volatile
 8004a68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a6c:	f383 8811 	msr	BASEPRI, r3
 8004a70:	f3bf 8f6f 	isb	sy
 8004a74:	f3bf 8f4f 	dsb	sy
 8004a78:	61fb      	str	r3, [r7, #28]
}
 8004a7a:	bf00      	nop
 8004a7c:	e7fe      	b.n	8004a7c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004a7e:	2354      	movs	r3, #84	; 0x54
 8004a80:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	2b54      	cmp	r3, #84	; 0x54
 8004a86:	d00a      	beq.n	8004a9e <xTaskCreateStatic+0x66>
	__asm volatile
 8004a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a8c:	f383 8811 	msr	BASEPRI, r3
 8004a90:	f3bf 8f6f 	isb	sy
 8004a94:	f3bf 8f4f 	dsb	sy
 8004a98:	61bb      	str	r3, [r7, #24]
}
 8004a9a:	bf00      	nop
 8004a9c:	e7fe      	b.n	8004a9c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004a9e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d01a      	beq.n	8004adc <xTaskCreateStatic+0xa4>
 8004aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d017      	beq.n	8004adc <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004aac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ab4:	631a      	str	r2, [r3, #48]	; 0x30
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	9303      	str	r3, [sp, #12]
 8004aba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004abc:	9302      	str	r3, [sp, #8]
 8004abe:	f107 0314 	add.w	r3, r7, #20
 8004ac2:	9301      	str	r3, [sp, #4]
 8004ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac6:	9300      	str	r3, [sp, #0]
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	68b9      	ldr	r1, [r7, #8]
 8004ace:	68f8      	ldr	r0, [r7, #12]
 8004ad0:	f000 f80b 	bl	8004aea <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ad4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004ad6:	f000 f88f 	bl	8004bf8 <prvAddNewTaskToReadyList>
 8004ada:	e001      	b.n	8004ae0 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8004adc:	2300      	movs	r3, #0
 8004ade:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004ae0:	697b      	ldr	r3, [r7, #20]
	}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3728      	adds	r7, #40	; 0x28
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b088      	sub	sp, #32
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	60f8      	str	r0, [r7, #12]
 8004af2:	60b9      	str	r1, [r7, #8]
 8004af4:	607a      	str	r2, [r7, #4]
 8004af6:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004afa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004b02:	3b01      	subs	r3, #1
 8004b04:	009b      	lsls	r3, r3, #2
 8004b06:	4413      	add	r3, r2
 8004b08:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	f023 0307 	bic.w	r3, r3, #7
 8004b10:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	f003 0307 	and.w	r3, r3, #7
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d00a      	beq.n	8004b32 <prvInitialiseNewTask+0x48>
	__asm volatile
 8004b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b20:	f383 8811 	msr	BASEPRI, r3
 8004b24:	f3bf 8f6f 	isb	sy
 8004b28:	f3bf 8f4f 	dsb	sy
 8004b2c:	617b      	str	r3, [r7, #20]
}
 8004b2e:	bf00      	nop
 8004b30:	e7fe      	b.n	8004b30 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d01f      	beq.n	8004b78 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b38:	2300      	movs	r3, #0
 8004b3a:	61fb      	str	r3, [r7, #28]
 8004b3c:	e012      	b.n	8004b64 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004b3e:	68ba      	ldr	r2, [r7, #8]
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	4413      	add	r3, r2
 8004b44:	7819      	ldrb	r1, [r3, #0]
 8004b46:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b48:	69fb      	ldr	r3, [r7, #28]
 8004b4a:	4413      	add	r3, r2
 8004b4c:	3334      	adds	r3, #52	; 0x34
 8004b4e:	460a      	mov	r2, r1
 8004b50:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004b52:	68ba      	ldr	r2, [r7, #8]
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	4413      	add	r3, r2
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d006      	beq.n	8004b6c <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	3301      	adds	r3, #1
 8004b62:	61fb      	str	r3, [r7, #28]
 8004b64:	69fb      	ldr	r3, [r7, #28]
 8004b66:	2b0f      	cmp	r3, #15
 8004b68:	d9e9      	bls.n	8004b3e <prvInitialiseNewTask+0x54>
 8004b6a:	e000      	b.n	8004b6e <prvInitialiseNewTask+0x84>
			{
				break;
 8004b6c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b76:	e003      	b.n	8004b80 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b82:	2b06      	cmp	r3, #6
 8004b84:	d901      	bls.n	8004b8a <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004b86:	2306      	movs	r3, #6
 8004b88:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b8e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b94:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b98:	2200      	movs	r2, #0
 8004b9a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004b9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9e:	3304      	adds	r3, #4
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7ff feb5 	bl	8004910 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba8:	3318      	adds	r3, #24
 8004baa:	4618      	mov	r0, r3
 8004bac:	f7ff feb0 	bl	8004910 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bb4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb8:	f1c3 0207 	rsb	r2, r3, #7
 8004bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bbe:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bc4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc8:	2200      	movs	r2, #0
 8004bca:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bce:	2200      	movs	r2, #0
 8004bd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004bd4:	683a      	ldr	r2, [r7, #0]
 8004bd6:	68f9      	ldr	r1, [r7, #12]
 8004bd8:	69b8      	ldr	r0, [r7, #24]
 8004bda:	f000 fcb9 	bl	8005550 <pxPortInitialiseStack>
 8004bde:	4602      	mov	r2, r0
 8004be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d002      	beq.n	8004bf0 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004bf0:	bf00      	nop
 8004bf2:	3720      	adds	r7, #32
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004c00:	f000 fdd0 	bl	80057a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004c04:	4b2a      	ldr	r3, [pc, #168]	; (8004cb0 <prvAddNewTaskToReadyList+0xb8>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	3301      	adds	r3, #1
 8004c0a:	4a29      	ldr	r2, [pc, #164]	; (8004cb0 <prvAddNewTaskToReadyList+0xb8>)
 8004c0c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004c0e:	4b29      	ldr	r3, [pc, #164]	; (8004cb4 <prvAddNewTaskToReadyList+0xbc>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d109      	bne.n	8004c2a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004c16:	4a27      	ldr	r2, [pc, #156]	; (8004cb4 <prvAddNewTaskToReadyList+0xbc>)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004c1c:	4b24      	ldr	r3, [pc, #144]	; (8004cb0 <prvAddNewTaskToReadyList+0xb8>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d110      	bne.n	8004c46 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004c24:	f000 fabc 	bl	80051a0 <prvInitialiseTaskLists>
 8004c28:	e00d      	b.n	8004c46 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004c2a:	4b23      	ldr	r3, [pc, #140]	; (8004cb8 <prvAddNewTaskToReadyList+0xc0>)
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d109      	bne.n	8004c46 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004c32:	4b20      	ldr	r3, [pc, #128]	; (8004cb4 <prvAddNewTaskToReadyList+0xbc>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d802      	bhi.n	8004c46 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004c40:	4a1c      	ldr	r2, [pc, #112]	; (8004cb4 <prvAddNewTaskToReadyList+0xbc>)
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004c46:	4b1d      	ldr	r3, [pc, #116]	; (8004cbc <prvAddNewTaskToReadyList+0xc4>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	4a1b      	ldr	r2, [pc, #108]	; (8004cbc <prvAddNewTaskToReadyList+0xc4>)
 8004c4e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c54:	2201      	movs	r2, #1
 8004c56:	409a      	lsls	r2, r3
 8004c58:	4b19      	ldr	r3, [pc, #100]	; (8004cc0 <prvAddNewTaskToReadyList+0xc8>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	4a18      	ldr	r2, [pc, #96]	; (8004cc0 <prvAddNewTaskToReadyList+0xc8>)
 8004c60:	6013      	str	r3, [r2, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c66:	4613      	mov	r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	4413      	add	r3, r2
 8004c6c:	009b      	lsls	r3, r3, #2
 8004c6e:	4a15      	ldr	r2, [pc, #84]	; (8004cc4 <prvAddNewTaskToReadyList+0xcc>)
 8004c70:	441a      	add	r2, r3
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	3304      	adds	r3, #4
 8004c76:	4619      	mov	r1, r3
 8004c78:	4610      	mov	r0, r2
 8004c7a:	f7ff fe56 	bl	800492a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004c7e:	f000 fdc1 	bl	8005804 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004c82:	4b0d      	ldr	r3, [pc, #52]	; (8004cb8 <prvAddNewTaskToReadyList+0xc0>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d00e      	beq.n	8004ca8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004c8a:	4b0a      	ldr	r3, [pc, #40]	; (8004cb4 <prvAddNewTaskToReadyList+0xbc>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c94:	429a      	cmp	r2, r3
 8004c96:	d207      	bcs.n	8004ca8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004c98:	4b0b      	ldr	r3, [pc, #44]	; (8004cc8 <prvAddNewTaskToReadyList+0xd0>)
 8004c9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c9e:	601a      	str	r2, [r3, #0]
 8004ca0:	f3bf 8f4f 	dsb	sy
 8004ca4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ca8:	bf00      	nop
 8004caa:	3708      	adds	r7, #8
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}
 8004cb0:	20000db0 	.word	0x20000db0
 8004cb4:	20000cb0 	.word	0x20000cb0
 8004cb8:	20000dbc 	.word	0x20000dbc
 8004cbc:	20000dcc 	.word	0x20000dcc
 8004cc0:	20000db8 	.word	0x20000db8
 8004cc4:	20000cb4 	.word	0x20000cb4
 8004cc8:	e000ed04 	.word	0xe000ed04

08004ccc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d017      	beq.n	8004d0e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004cde:	4b13      	ldr	r3, [pc, #76]	; (8004d2c <vTaskDelay+0x60>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00a      	beq.n	8004cfc <vTaskDelay+0x30>
	__asm volatile
 8004ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cea:	f383 8811 	msr	BASEPRI, r3
 8004cee:	f3bf 8f6f 	isb	sy
 8004cf2:	f3bf 8f4f 	dsb	sy
 8004cf6:	60bb      	str	r3, [r7, #8]
}
 8004cf8:	bf00      	nop
 8004cfa:	e7fe      	b.n	8004cfa <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004cfc:	f000 f87a 	bl	8004df4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004d00:	2100      	movs	r1, #0
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 fbbe 	bl	8005484 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004d08:	f000 f882 	bl	8004e10 <xTaskResumeAll>
 8004d0c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d107      	bne.n	8004d24 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004d14:	4b06      	ldr	r3, [pc, #24]	; (8004d30 <vTaskDelay+0x64>)
 8004d16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d1a:	601a      	str	r2, [r3, #0]
 8004d1c:	f3bf 8f4f 	dsb	sy
 8004d20:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004d24:	bf00      	nop
 8004d26:	3710      	adds	r7, #16
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	20000dd8 	.word	0x20000dd8
 8004d30:	e000ed04 	.word	0xe000ed04

08004d34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b08a      	sub	sp, #40	; 0x28
 8004d38:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004d3e:	2300      	movs	r3, #0
 8004d40:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004d42:	463a      	mov	r2, r7
 8004d44:	1d39      	adds	r1, r7, #4
 8004d46:	f107 0308 	add.w	r3, r7, #8
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7fb fbee 	bl	800052c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004d50:	6839      	ldr	r1, [r7, #0]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	68ba      	ldr	r2, [r7, #8]
 8004d56:	9202      	str	r2, [sp, #8]
 8004d58:	9301      	str	r3, [sp, #4]
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	9300      	str	r3, [sp, #0]
 8004d5e:	2300      	movs	r3, #0
 8004d60:	460a      	mov	r2, r1
 8004d62:	491e      	ldr	r1, [pc, #120]	; (8004ddc <vTaskStartScheduler+0xa8>)
 8004d64:	481e      	ldr	r0, [pc, #120]	; (8004de0 <vTaskStartScheduler+0xac>)
 8004d66:	f7ff fe67 	bl	8004a38 <xTaskCreateStatic>
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	4a1d      	ldr	r2, [pc, #116]	; (8004de4 <vTaskStartScheduler+0xb0>)
 8004d6e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004d70:	4b1c      	ldr	r3, [pc, #112]	; (8004de4 <vTaskStartScheduler+0xb0>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d002      	beq.n	8004d7e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	617b      	str	r3, [r7, #20]
 8004d7c:	e001      	b.n	8004d82 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	d116      	bne.n	8004db6 <vTaskStartScheduler+0x82>
	__asm volatile
 8004d88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d8c:	f383 8811 	msr	BASEPRI, r3
 8004d90:	f3bf 8f6f 	isb	sy
 8004d94:	f3bf 8f4f 	dsb	sy
 8004d98:	613b      	str	r3, [r7, #16]
}
 8004d9a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004d9c:	4b12      	ldr	r3, [pc, #72]	; (8004de8 <vTaskStartScheduler+0xb4>)
 8004d9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004da2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004da4:	4b11      	ldr	r3, [pc, #68]	; (8004dec <vTaskStartScheduler+0xb8>)
 8004da6:	2201      	movs	r2, #1
 8004da8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004daa:	4b11      	ldr	r3, [pc, #68]	; (8004df0 <vTaskStartScheduler+0xbc>)
 8004dac:	2200      	movs	r2, #0
 8004dae:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004db0:	f000 fc56 	bl	8005660 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004db4:	e00e      	b.n	8004dd4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004dbc:	d10a      	bne.n	8004dd4 <vTaskStartScheduler+0xa0>
	__asm volatile
 8004dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc2:	f383 8811 	msr	BASEPRI, r3
 8004dc6:	f3bf 8f6f 	isb	sy
 8004dca:	f3bf 8f4f 	dsb	sy
 8004dce:	60fb      	str	r3, [r7, #12]
}
 8004dd0:	bf00      	nop
 8004dd2:	e7fe      	b.n	8004dd2 <vTaskStartScheduler+0x9e>
}
 8004dd4:	bf00      	nop
 8004dd6:	3718      	adds	r7, #24
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	08005f88 	.word	0x08005f88
 8004de0:	08005171 	.word	0x08005171
 8004de4:	20000dd4 	.word	0x20000dd4
 8004de8:	20000dd0 	.word	0x20000dd0
 8004dec:	20000dbc 	.word	0x20000dbc
 8004df0:	20000db4 	.word	0x20000db4

08004df4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004df4:	b480      	push	{r7}
 8004df6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004df8:	4b04      	ldr	r3, [pc, #16]	; (8004e0c <vTaskSuspendAll+0x18>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	3301      	adds	r3, #1
 8004dfe:	4a03      	ldr	r2, [pc, #12]	; (8004e0c <vTaskSuspendAll+0x18>)
 8004e00:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004e02:	bf00      	nop
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr
 8004e0c:	20000dd8 	.word	0x20000dd8

08004e10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004e16:	2300      	movs	r3, #0
 8004e18:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004e1e:	4b41      	ldr	r3, [pc, #260]	; (8004f24 <xTaskResumeAll+0x114>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10a      	bne.n	8004e3c <xTaskResumeAll+0x2c>
	__asm volatile
 8004e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2a:	f383 8811 	msr	BASEPRI, r3
 8004e2e:	f3bf 8f6f 	isb	sy
 8004e32:	f3bf 8f4f 	dsb	sy
 8004e36:	603b      	str	r3, [r7, #0]
}
 8004e38:	bf00      	nop
 8004e3a:	e7fe      	b.n	8004e3a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004e3c:	f000 fcb2 	bl	80057a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004e40:	4b38      	ldr	r3, [pc, #224]	; (8004f24 <xTaskResumeAll+0x114>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	3b01      	subs	r3, #1
 8004e46:	4a37      	ldr	r2, [pc, #220]	; (8004f24 <xTaskResumeAll+0x114>)
 8004e48:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e4a:	4b36      	ldr	r3, [pc, #216]	; (8004f24 <xTaskResumeAll+0x114>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d161      	bne.n	8004f16 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004e52:	4b35      	ldr	r3, [pc, #212]	; (8004f28 <xTaskResumeAll+0x118>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d05d      	beq.n	8004f16 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e5a:	e02e      	b.n	8004eba <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e5c:	4b33      	ldr	r3, [pc, #204]	; (8004f2c <xTaskResumeAll+0x11c>)
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	3318      	adds	r3, #24
 8004e68:	4618      	mov	r0, r3
 8004e6a:	f7ff fdbb 	bl	80049e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	3304      	adds	r3, #4
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7ff fdb6 	bl	80049e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	409a      	lsls	r2, r3
 8004e80:	4b2b      	ldr	r3, [pc, #172]	; (8004f30 <xTaskResumeAll+0x120>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	4a2a      	ldr	r2, [pc, #168]	; (8004f30 <xTaskResumeAll+0x120>)
 8004e88:	6013      	str	r3, [r2, #0]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e8e:	4613      	mov	r3, r2
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	4413      	add	r3, r2
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	4a27      	ldr	r2, [pc, #156]	; (8004f34 <xTaskResumeAll+0x124>)
 8004e98:	441a      	add	r2, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	3304      	adds	r3, #4
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	4610      	mov	r0, r2
 8004ea2:	f7ff fd42 	bl	800492a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eaa:	4b23      	ldr	r3, [pc, #140]	; (8004f38 <xTaskResumeAll+0x128>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d302      	bcc.n	8004eba <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8004eb4:	4b21      	ldr	r3, [pc, #132]	; (8004f3c <xTaskResumeAll+0x12c>)
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004eba:	4b1c      	ldr	r3, [pc, #112]	; (8004f2c <xTaskResumeAll+0x11c>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d1cc      	bne.n	8004e5c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d001      	beq.n	8004ecc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004ec8:	f000 f9e2 	bl	8005290 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004ecc:	4b1c      	ldr	r3, [pc, #112]	; (8004f40 <xTaskResumeAll+0x130>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d010      	beq.n	8004efa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004ed8:	f000 f836 	bl	8004f48 <xTaskIncrementTick>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d002      	beq.n	8004ee8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8004ee2:	4b16      	ldr	r3, [pc, #88]	; (8004f3c <xTaskResumeAll+0x12c>)
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	3b01      	subs	r3, #1
 8004eec:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1f1      	bne.n	8004ed8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8004ef4:	4b12      	ldr	r3, [pc, #72]	; (8004f40 <xTaskResumeAll+0x130>)
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004efa:	4b10      	ldr	r3, [pc, #64]	; (8004f3c <xTaskResumeAll+0x12c>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d009      	beq.n	8004f16 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004f02:	2301      	movs	r3, #1
 8004f04:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004f06:	4b0f      	ldr	r3, [pc, #60]	; (8004f44 <xTaskResumeAll+0x134>)
 8004f08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f0c:	601a      	str	r2, [r3, #0]
 8004f0e:	f3bf 8f4f 	dsb	sy
 8004f12:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004f16:	f000 fc75 	bl	8005804 <vPortExitCritical>

	return xAlreadyYielded;
 8004f1a:	68bb      	ldr	r3, [r7, #8]
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3710      	adds	r7, #16
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}
 8004f24:	20000dd8 	.word	0x20000dd8
 8004f28:	20000db0 	.word	0x20000db0
 8004f2c:	20000d70 	.word	0x20000d70
 8004f30:	20000db8 	.word	0x20000db8
 8004f34:	20000cb4 	.word	0x20000cb4
 8004f38:	20000cb0 	.word	0x20000cb0
 8004f3c:	20000dc4 	.word	0x20000dc4
 8004f40:	20000dc0 	.word	0x20000dc0
 8004f44:	e000ed04 	.word	0xe000ed04

08004f48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b086      	sub	sp, #24
 8004f4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f52:	4b4e      	ldr	r3, [pc, #312]	; (800508c <xTaskIncrementTick+0x144>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	f040 808e 	bne.w	8005078 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004f5c:	4b4c      	ldr	r3, [pc, #304]	; (8005090 <xTaskIncrementTick+0x148>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	3301      	adds	r3, #1
 8004f62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004f64:	4a4a      	ldr	r2, [pc, #296]	; (8005090 <xTaskIncrementTick+0x148>)
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d120      	bne.n	8004fb2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004f70:	4b48      	ldr	r3, [pc, #288]	; (8005094 <xTaskIncrementTick+0x14c>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d00a      	beq.n	8004f90 <xTaskIncrementTick+0x48>
	__asm volatile
 8004f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7e:	f383 8811 	msr	BASEPRI, r3
 8004f82:	f3bf 8f6f 	isb	sy
 8004f86:	f3bf 8f4f 	dsb	sy
 8004f8a:	603b      	str	r3, [r7, #0]
}
 8004f8c:	bf00      	nop
 8004f8e:	e7fe      	b.n	8004f8e <xTaskIncrementTick+0x46>
 8004f90:	4b40      	ldr	r3, [pc, #256]	; (8005094 <xTaskIncrementTick+0x14c>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	60fb      	str	r3, [r7, #12]
 8004f96:	4b40      	ldr	r3, [pc, #256]	; (8005098 <xTaskIncrementTick+0x150>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a3e      	ldr	r2, [pc, #248]	; (8005094 <xTaskIncrementTick+0x14c>)
 8004f9c:	6013      	str	r3, [r2, #0]
 8004f9e:	4a3e      	ldr	r2, [pc, #248]	; (8005098 <xTaskIncrementTick+0x150>)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6013      	str	r3, [r2, #0]
 8004fa4:	4b3d      	ldr	r3, [pc, #244]	; (800509c <xTaskIncrementTick+0x154>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	4a3c      	ldr	r2, [pc, #240]	; (800509c <xTaskIncrementTick+0x154>)
 8004fac:	6013      	str	r3, [r2, #0]
 8004fae:	f000 f96f 	bl	8005290 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004fb2:	4b3b      	ldr	r3, [pc, #236]	; (80050a0 <xTaskIncrementTick+0x158>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	693a      	ldr	r2, [r7, #16]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d348      	bcc.n	800504e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fbc:	4b35      	ldr	r3, [pc, #212]	; (8005094 <xTaskIncrementTick+0x14c>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d104      	bne.n	8004fd0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fc6:	4b36      	ldr	r3, [pc, #216]	; (80050a0 <xTaskIncrementTick+0x158>)
 8004fc8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004fcc:	601a      	str	r2, [r3, #0]
					break;
 8004fce:	e03e      	b.n	800504e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fd0:	4b30      	ldr	r3, [pc, #192]	; (8005094 <xTaskIncrementTick+0x14c>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68db      	ldr	r3, [r3, #12]
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d203      	bcs.n	8004ff0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004fe8:	4a2d      	ldr	r2, [pc, #180]	; (80050a0 <xTaskIncrementTick+0x158>)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004fee:	e02e      	b.n	800504e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	3304      	adds	r3, #4
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f7ff fcf5 	bl	80049e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d004      	beq.n	800500c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	3318      	adds	r3, #24
 8005006:	4618      	mov	r0, r3
 8005008:	f7ff fcec 	bl	80049e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005010:	2201      	movs	r2, #1
 8005012:	409a      	lsls	r2, r3
 8005014:	4b23      	ldr	r3, [pc, #140]	; (80050a4 <xTaskIncrementTick+0x15c>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4313      	orrs	r3, r2
 800501a:	4a22      	ldr	r2, [pc, #136]	; (80050a4 <xTaskIncrementTick+0x15c>)
 800501c:	6013      	str	r3, [r2, #0]
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005022:	4613      	mov	r3, r2
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	4413      	add	r3, r2
 8005028:	009b      	lsls	r3, r3, #2
 800502a:	4a1f      	ldr	r2, [pc, #124]	; (80050a8 <xTaskIncrementTick+0x160>)
 800502c:	441a      	add	r2, r3
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	3304      	adds	r3, #4
 8005032:	4619      	mov	r1, r3
 8005034:	4610      	mov	r0, r2
 8005036:	f7ff fc78 	bl	800492a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800503e:	4b1b      	ldr	r3, [pc, #108]	; (80050ac <xTaskIncrementTick+0x164>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005044:	429a      	cmp	r2, r3
 8005046:	d3b9      	bcc.n	8004fbc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005048:	2301      	movs	r3, #1
 800504a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800504c:	e7b6      	b.n	8004fbc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800504e:	4b17      	ldr	r3, [pc, #92]	; (80050ac <xTaskIncrementTick+0x164>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005054:	4914      	ldr	r1, [pc, #80]	; (80050a8 <xTaskIncrementTick+0x160>)
 8005056:	4613      	mov	r3, r2
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	4413      	add	r3, r2
 800505c:	009b      	lsls	r3, r3, #2
 800505e:	440b      	add	r3, r1
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2b01      	cmp	r3, #1
 8005064:	d901      	bls.n	800506a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8005066:	2301      	movs	r3, #1
 8005068:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800506a:	4b11      	ldr	r3, [pc, #68]	; (80050b0 <xTaskIncrementTick+0x168>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d007      	beq.n	8005082 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8005072:	2301      	movs	r3, #1
 8005074:	617b      	str	r3, [r7, #20]
 8005076:	e004      	b.n	8005082 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005078:	4b0e      	ldr	r3, [pc, #56]	; (80050b4 <xTaskIncrementTick+0x16c>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	3301      	adds	r3, #1
 800507e:	4a0d      	ldr	r2, [pc, #52]	; (80050b4 <xTaskIncrementTick+0x16c>)
 8005080:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005082:	697b      	ldr	r3, [r7, #20]
}
 8005084:	4618      	mov	r0, r3
 8005086:	3718      	adds	r7, #24
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	20000dd8 	.word	0x20000dd8
 8005090:	20000db4 	.word	0x20000db4
 8005094:	20000d68 	.word	0x20000d68
 8005098:	20000d6c 	.word	0x20000d6c
 800509c:	20000dc8 	.word	0x20000dc8
 80050a0:	20000dd0 	.word	0x20000dd0
 80050a4:	20000db8 	.word	0x20000db8
 80050a8:	20000cb4 	.word	0x20000cb4
 80050ac:	20000cb0 	.word	0x20000cb0
 80050b0:	20000dc4 	.word	0x20000dc4
 80050b4:	20000dc0 	.word	0x20000dc0

080050b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80050b8:	b480      	push	{r7}
 80050ba:	b087      	sub	sp, #28
 80050bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80050be:	4b27      	ldr	r3, [pc, #156]	; (800515c <vTaskSwitchContext+0xa4>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d003      	beq.n	80050ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80050c6:	4b26      	ldr	r3, [pc, #152]	; (8005160 <vTaskSwitchContext+0xa8>)
 80050c8:	2201      	movs	r2, #1
 80050ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80050cc:	e03f      	b.n	800514e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 80050ce:	4b24      	ldr	r3, [pc, #144]	; (8005160 <vTaskSwitchContext+0xa8>)
 80050d0:	2200      	movs	r2, #0
 80050d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050d4:	4b23      	ldr	r3, [pc, #140]	; (8005164 <vTaskSwitchContext+0xac>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	fab3 f383 	clz	r3, r3
 80050e0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80050e2:	7afb      	ldrb	r3, [r7, #11]
 80050e4:	f1c3 031f 	rsb	r3, r3, #31
 80050e8:	617b      	str	r3, [r7, #20]
 80050ea:	491f      	ldr	r1, [pc, #124]	; (8005168 <vTaskSwitchContext+0xb0>)
 80050ec:	697a      	ldr	r2, [r7, #20]
 80050ee:	4613      	mov	r3, r2
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	4413      	add	r3, r2
 80050f4:	009b      	lsls	r3, r3, #2
 80050f6:	440b      	add	r3, r1
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d10a      	bne.n	8005114 <vTaskSwitchContext+0x5c>
	__asm volatile
 80050fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005102:	f383 8811 	msr	BASEPRI, r3
 8005106:	f3bf 8f6f 	isb	sy
 800510a:	f3bf 8f4f 	dsb	sy
 800510e:	607b      	str	r3, [r7, #4]
}
 8005110:	bf00      	nop
 8005112:	e7fe      	b.n	8005112 <vTaskSwitchContext+0x5a>
 8005114:	697a      	ldr	r2, [r7, #20]
 8005116:	4613      	mov	r3, r2
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	4413      	add	r3, r2
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	4a12      	ldr	r2, [pc, #72]	; (8005168 <vTaskSwitchContext+0xb0>)
 8005120:	4413      	add	r3, r2
 8005122:	613b      	str	r3, [r7, #16]
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	685a      	ldr	r2, [r3, #4]
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	605a      	str	r2, [r3, #4]
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	685a      	ldr	r2, [r3, #4]
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	3308      	adds	r3, #8
 8005136:	429a      	cmp	r2, r3
 8005138:	d104      	bne.n	8005144 <vTaskSwitchContext+0x8c>
 800513a:	693b      	ldr	r3, [r7, #16]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	685a      	ldr	r2, [r3, #4]
 8005140:	693b      	ldr	r3, [r7, #16]
 8005142:	605a      	str	r2, [r3, #4]
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	68db      	ldr	r3, [r3, #12]
 800514a:	4a08      	ldr	r2, [pc, #32]	; (800516c <vTaskSwitchContext+0xb4>)
 800514c:	6013      	str	r3, [r2, #0]
}
 800514e:	bf00      	nop
 8005150:	371c      	adds	r7, #28
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	20000dd8 	.word	0x20000dd8
 8005160:	20000dc4 	.word	0x20000dc4
 8005164:	20000db8 	.word	0x20000db8
 8005168:	20000cb4 	.word	0x20000cb4
 800516c:	20000cb0 	.word	0x20000cb0

08005170 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b082      	sub	sp, #8
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005178:	f000 f852 	bl	8005220 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800517c:	4b06      	ldr	r3, [pc, #24]	; (8005198 <prvIdleTask+0x28>)
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d9f9      	bls.n	8005178 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005184:	4b05      	ldr	r3, [pc, #20]	; (800519c <prvIdleTask+0x2c>)
 8005186:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800518a:	601a      	str	r2, [r3, #0]
 800518c:	f3bf 8f4f 	dsb	sy
 8005190:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005194:	e7f0      	b.n	8005178 <prvIdleTask+0x8>
 8005196:	bf00      	nop
 8005198:	20000cb4 	.word	0x20000cb4
 800519c:	e000ed04 	.word	0xe000ed04

080051a0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80051a6:	2300      	movs	r3, #0
 80051a8:	607b      	str	r3, [r7, #4]
 80051aa:	e00c      	b.n	80051c6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80051ac:	687a      	ldr	r2, [r7, #4]
 80051ae:	4613      	mov	r3, r2
 80051b0:	009b      	lsls	r3, r3, #2
 80051b2:	4413      	add	r3, r2
 80051b4:	009b      	lsls	r3, r3, #2
 80051b6:	4a12      	ldr	r2, [pc, #72]	; (8005200 <prvInitialiseTaskLists+0x60>)
 80051b8:	4413      	add	r3, r2
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7ff fb88 	bl	80048d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	3301      	adds	r3, #1
 80051c4:	607b      	str	r3, [r7, #4]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2b06      	cmp	r3, #6
 80051ca:	d9ef      	bls.n	80051ac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80051cc:	480d      	ldr	r0, [pc, #52]	; (8005204 <prvInitialiseTaskLists+0x64>)
 80051ce:	f7ff fb7f 	bl	80048d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80051d2:	480d      	ldr	r0, [pc, #52]	; (8005208 <prvInitialiseTaskLists+0x68>)
 80051d4:	f7ff fb7c 	bl	80048d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80051d8:	480c      	ldr	r0, [pc, #48]	; (800520c <prvInitialiseTaskLists+0x6c>)
 80051da:	f7ff fb79 	bl	80048d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80051de:	480c      	ldr	r0, [pc, #48]	; (8005210 <prvInitialiseTaskLists+0x70>)
 80051e0:	f7ff fb76 	bl	80048d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80051e4:	480b      	ldr	r0, [pc, #44]	; (8005214 <prvInitialiseTaskLists+0x74>)
 80051e6:	f7ff fb73 	bl	80048d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80051ea:	4b0b      	ldr	r3, [pc, #44]	; (8005218 <prvInitialiseTaskLists+0x78>)
 80051ec:	4a05      	ldr	r2, [pc, #20]	; (8005204 <prvInitialiseTaskLists+0x64>)
 80051ee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80051f0:	4b0a      	ldr	r3, [pc, #40]	; (800521c <prvInitialiseTaskLists+0x7c>)
 80051f2:	4a05      	ldr	r2, [pc, #20]	; (8005208 <prvInitialiseTaskLists+0x68>)
 80051f4:	601a      	str	r2, [r3, #0]
}
 80051f6:	bf00      	nop
 80051f8:	3708      	adds	r7, #8
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	20000cb4 	.word	0x20000cb4
 8005204:	20000d40 	.word	0x20000d40
 8005208:	20000d54 	.word	0x20000d54
 800520c:	20000d70 	.word	0x20000d70
 8005210:	20000d84 	.word	0x20000d84
 8005214:	20000d9c 	.word	0x20000d9c
 8005218:	20000d68 	.word	0x20000d68
 800521c:	20000d6c 	.word	0x20000d6c

08005220 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b082      	sub	sp, #8
 8005224:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005226:	e019      	b.n	800525c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005228:	f000 fabc 	bl	80057a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800522c:	4b10      	ldr	r3, [pc, #64]	; (8005270 <prvCheckTasksWaitingTermination+0x50>)
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	3304      	adds	r3, #4
 8005238:	4618      	mov	r0, r3
 800523a:	f7ff fbd3 	bl	80049e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800523e:	4b0d      	ldr	r3, [pc, #52]	; (8005274 <prvCheckTasksWaitingTermination+0x54>)
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	3b01      	subs	r3, #1
 8005244:	4a0b      	ldr	r2, [pc, #44]	; (8005274 <prvCheckTasksWaitingTermination+0x54>)
 8005246:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005248:	4b0b      	ldr	r3, [pc, #44]	; (8005278 <prvCheckTasksWaitingTermination+0x58>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	3b01      	subs	r3, #1
 800524e:	4a0a      	ldr	r2, [pc, #40]	; (8005278 <prvCheckTasksWaitingTermination+0x58>)
 8005250:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005252:	f000 fad7 	bl	8005804 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 f810 	bl	800527c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800525c:	4b06      	ldr	r3, [pc, #24]	; (8005278 <prvCheckTasksWaitingTermination+0x58>)
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d1e1      	bne.n	8005228 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005264:	bf00      	nop
 8005266:	bf00      	nop
 8005268:	3708      	adds	r7, #8
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	20000d84 	.word	0x20000d84
 8005274:	20000db0 	.word	0x20000db0
 8005278:	20000d98 	.word	0x20000d98

0800527c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005284:	bf00      	nop
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005296:	4b0c      	ldr	r3, [pc, #48]	; (80052c8 <prvResetNextTaskUnblockTime+0x38>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d104      	bne.n	80052aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80052a0:	4b0a      	ldr	r3, [pc, #40]	; (80052cc <prvResetNextTaskUnblockTime+0x3c>)
 80052a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80052a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80052a8:	e008      	b.n	80052bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052aa:	4b07      	ldr	r3, [pc, #28]	; (80052c8 <prvResetNextTaskUnblockTime+0x38>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	68db      	ldr	r3, [r3, #12]
 80052b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	4a04      	ldr	r2, [pc, #16]	; (80052cc <prvResetNextTaskUnblockTime+0x3c>)
 80052ba:	6013      	str	r3, [r2, #0]
}
 80052bc:	bf00      	nop
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr
 80052c8:	20000d68 	.word	0x20000d68
 80052cc:	20000dd0 	.word	0x20000dd0

080052d0 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b08e      	sub	sp, #56	; 0x38
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	60b9      	str	r1, [r7, #8]
 80052da:	603b      	str	r3, [r7, #0]
 80052dc:	4613      	mov	r3, r2
 80052de:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80052e0:	2301      	movs	r3, #1
 80052e2:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d10a      	bne.n	8005300 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 80052ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ee:	f383 8811 	msr	BASEPRI, r3
 80052f2:	f3bf 8f6f 	isb	sy
 80052f6:	f3bf 8f4f 	dsb	sy
 80052fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80052fc:	bf00      	nop
 80052fe:	e7fe      	b.n	80052fe <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005300:	f000 fb32 	bl	8005968 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	633b      	str	r3, [r7, #48]	; 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005308:	f3ef 8211 	mrs	r2, BASEPRI
 800530c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005310:	f383 8811 	msr	BASEPRI, r3
 8005314:	f3bf 8f6f 	isb	sy
 8005318:	f3bf 8f4f 	dsb	sy
 800531c:	623a      	str	r2, [r7, #32]
 800531e:	61fb      	str	r3, [r7, #28]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005320:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005322:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d003      	beq.n	8005332 <xTaskGenericNotifyFromISR+0x62>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800532a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8005332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005334:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005338:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800533c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533e:	2202      	movs	r2, #2
 8005340:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

			switch( eAction )
 8005344:	79fb      	ldrb	r3, [r7, #7]
 8005346:	2b04      	cmp	r3, #4
 8005348:	d828      	bhi.n	800539c <xTaskGenericNotifyFromISR+0xcc>
 800534a:	a201      	add	r2, pc, #4	; (adr r2, 8005350 <xTaskGenericNotifyFromISR+0x80>)
 800534c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005350:	080053bd 	.word	0x080053bd
 8005354:	08005365 	.word	0x08005365
 8005358:	08005373 	.word	0x08005373
 800535c:	0800537f 	.word	0x0800537f
 8005360:	08005387 	.word	0x08005387
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8005364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005366:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	431a      	orrs	r2, r3
 800536c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536e:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8005370:	e027      	b.n	80053c2 <xTaskGenericNotifyFromISR+0xf2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8005372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005376:	1c5a      	adds	r2, r3, #1
 8005378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537a:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 800537c:	e021      	b.n	80053c2 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800537e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005380:	68ba      	ldr	r2, [r7, #8]
 8005382:	64da      	str	r2, [r3, #76]	; 0x4c
					break;
 8005384:	e01d      	b.n	80053c2 <xTaskGenericNotifyFromISR+0xf2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005386:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800538a:	2b02      	cmp	r3, #2
 800538c:	d003      	beq.n	8005396 <xTaskGenericNotifyFromISR+0xc6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800538e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005390:	68ba      	ldr	r2, [r7, #8]
 8005392:	64da      	str	r2, [r3, #76]	; 0x4c
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8005394:	e015      	b.n	80053c2 <xTaskGenericNotifyFromISR+0xf2>
						xReturn = pdFAIL;
 8005396:	2300      	movs	r3, #0
 8005398:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800539a:	e012      	b.n	80053c2 <xTaskGenericNotifyFromISR+0xf2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800539c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800539e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053a4:	d00c      	beq.n	80053c0 <xTaskGenericNotifyFromISR+0xf0>
	__asm volatile
 80053a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053aa:	f383 8811 	msr	BASEPRI, r3
 80053ae:	f3bf 8f6f 	isb	sy
 80053b2:	f3bf 8f4f 	dsb	sy
 80053b6:	61bb      	str	r3, [r7, #24]
}
 80053b8:	bf00      	nop
 80053ba:	e7fe      	b.n	80053ba <xTaskGenericNotifyFromISR+0xea>
					break;
 80053bc:	bf00      	nop
 80053be:	e000      	b.n	80053c2 <xTaskGenericNotifyFromISR+0xf2>
					break;
 80053c0:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80053c2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d145      	bne.n	8005456 <xTaskGenericNotifyFromISR+0x186>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80053ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00a      	beq.n	80053e8 <xTaskGenericNotifyFromISR+0x118>
	__asm volatile
 80053d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d6:	f383 8811 	msr	BASEPRI, r3
 80053da:	f3bf 8f6f 	isb	sy
 80053de:	f3bf 8f4f 	dsb	sy
 80053e2:	617b      	str	r3, [r7, #20]
}
 80053e4:	bf00      	nop
 80053e6:	e7fe      	b.n	80053e6 <xTaskGenericNotifyFromISR+0x116>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80053e8:	4b20      	ldr	r3, [pc, #128]	; (800546c <xTaskGenericNotifyFromISR+0x19c>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d11c      	bne.n	800542a <xTaskGenericNotifyFromISR+0x15a>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80053f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f2:	3304      	adds	r3, #4
 80053f4:	4618      	mov	r0, r3
 80053f6:	f7ff faf5 	bl	80049e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80053fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053fe:	2201      	movs	r2, #1
 8005400:	409a      	lsls	r2, r3
 8005402:	4b1b      	ldr	r3, [pc, #108]	; (8005470 <xTaskGenericNotifyFromISR+0x1a0>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4313      	orrs	r3, r2
 8005408:	4a19      	ldr	r2, [pc, #100]	; (8005470 <xTaskGenericNotifyFromISR+0x1a0>)
 800540a:	6013      	str	r3, [r2, #0]
 800540c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005410:	4613      	mov	r3, r2
 8005412:	009b      	lsls	r3, r3, #2
 8005414:	4413      	add	r3, r2
 8005416:	009b      	lsls	r3, r3, #2
 8005418:	4a16      	ldr	r2, [pc, #88]	; (8005474 <xTaskGenericNotifyFromISR+0x1a4>)
 800541a:	441a      	add	r2, r3
 800541c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800541e:	3304      	adds	r3, #4
 8005420:	4619      	mov	r1, r3
 8005422:	4610      	mov	r0, r2
 8005424:	f7ff fa81 	bl	800492a <vListInsertEnd>
 8005428:	e005      	b.n	8005436 <xTaskGenericNotifyFromISR+0x166>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800542a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800542c:	3318      	adds	r3, #24
 800542e:	4619      	mov	r1, r3
 8005430:	4811      	ldr	r0, [pc, #68]	; (8005478 <xTaskGenericNotifyFromISR+0x1a8>)
 8005432:	f7ff fa7a 	bl	800492a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800543a:	4b10      	ldr	r3, [pc, #64]	; (800547c <xTaskGenericNotifyFromISR+0x1ac>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005440:	429a      	cmp	r2, r3
 8005442:	d908      	bls.n	8005456 <xTaskGenericNotifyFromISR+0x186>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8005444:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005446:	2b00      	cmp	r3, #0
 8005448:	d002      	beq.n	8005450 <xTaskGenericNotifyFromISR+0x180>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800544a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800544c:	2201      	movs	r2, #1
 800544e:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8005450:	4b0b      	ldr	r3, [pc, #44]	; (8005480 <xTaskGenericNotifyFromISR+0x1b0>)
 8005452:	2201      	movs	r2, #1
 8005454:	601a      	str	r2, [r3, #0]
 8005456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005458:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005460:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8005462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8005464:	4618      	mov	r0, r3
 8005466:	3738      	adds	r7, #56	; 0x38
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}
 800546c:	20000dd8 	.word	0x20000dd8
 8005470:	20000db8 	.word	0x20000db8
 8005474:	20000cb4 	.word	0x20000cb4
 8005478:	20000d70 	.word	0x20000d70
 800547c:	20000cb0 	.word	0x20000cb0
 8005480:	20000dc4 	.word	0x20000dc4

08005484 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800548e:	4b29      	ldr	r3, [pc, #164]	; (8005534 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005494:	4b28      	ldr	r3, [pc, #160]	; (8005538 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	3304      	adds	r3, #4
 800549a:	4618      	mov	r0, r3
 800549c:	f7ff faa2 	bl	80049e4 <uxListRemove>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d10b      	bne.n	80054be <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80054a6:	4b24      	ldr	r3, [pc, #144]	; (8005538 <prvAddCurrentTaskToDelayedList+0xb4>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ac:	2201      	movs	r2, #1
 80054ae:	fa02 f303 	lsl.w	r3, r2, r3
 80054b2:	43da      	mvns	r2, r3
 80054b4:	4b21      	ldr	r3, [pc, #132]	; (800553c <prvAddCurrentTaskToDelayedList+0xb8>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4013      	ands	r3, r2
 80054ba:	4a20      	ldr	r2, [pc, #128]	; (800553c <prvAddCurrentTaskToDelayedList+0xb8>)
 80054bc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054c4:	d10a      	bne.n	80054dc <prvAddCurrentTaskToDelayedList+0x58>
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d007      	beq.n	80054dc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054cc:	4b1a      	ldr	r3, [pc, #104]	; (8005538 <prvAddCurrentTaskToDelayedList+0xb4>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	3304      	adds	r3, #4
 80054d2:	4619      	mov	r1, r3
 80054d4:	481a      	ldr	r0, [pc, #104]	; (8005540 <prvAddCurrentTaskToDelayedList+0xbc>)
 80054d6:	f7ff fa28 	bl	800492a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80054da:	e026      	b.n	800552a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80054dc:	68fa      	ldr	r2, [r7, #12]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4413      	add	r3, r2
 80054e2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80054e4:	4b14      	ldr	r3, [pc, #80]	; (8005538 <prvAddCurrentTaskToDelayedList+0xb4>)
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	68ba      	ldr	r2, [r7, #8]
 80054ea:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80054ec:	68ba      	ldr	r2, [r7, #8]
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d209      	bcs.n	8005508 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054f4:	4b13      	ldr	r3, [pc, #76]	; (8005544 <prvAddCurrentTaskToDelayedList+0xc0>)
 80054f6:	681a      	ldr	r2, [r3, #0]
 80054f8:	4b0f      	ldr	r3, [pc, #60]	; (8005538 <prvAddCurrentTaskToDelayedList+0xb4>)
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	3304      	adds	r3, #4
 80054fe:	4619      	mov	r1, r3
 8005500:	4610      	mov	r0, r2
 8005502:	f7ff fa36 	bl	8004972 <vListInsert>
}
 8005506:	e010      	b.n	800552a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005508:	4b0f      	ldr	r3, [pc, #60]	; (8005548 <prvAddCurrentTaskToDelayedList+0xc4>)
 800550a:	681a      	ldr	r2, [r3, #0]
 800550c:	4b0a      	ldr	r3, [pc, #40]	; (8005538 <prvAddCurrentTaskToDelayedList+0xb4>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	3304      	adds	r3, #4
 8005512:	4619      	mov	r1, r3
 8005514:	4610      	mov	r0, r2
 8005516:	f7ff fa2c 	bl	8004972 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800551a:	4b0c      	ldr	r3, [pc, #48]	; (800554c <prvAddCurrentTaskToDelayedList+0xc8>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68ba      	ldr	r2, [r7, #8]
 8005520:	429a      	cmp	r2, r3
 8005522:	d202      	bcs.n	800552a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005524:	4a09      	ldr	r2, [pc, #36]	; (800554c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	6013      	str	r3, [r2, #0]
}
 800552a:	bf00      	nop
 800552c:	3710      	adds	r7, #16
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	20000db4 	.word	0x20000db4
 8005538:	20000cb0 	.word	0x20000cb0
 800553c:	20000db8 	.word	0x20000db8
 8005540:	20000d9c 	.word	0x20000d9c
 8005544:	20000d6c 	.word	0x20000d6c
 8005548:	20000d68 	.word	0x20000d68
 800554c:	20000dd0 	.word	0x20000dd0

08005550 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005550:	b480      	push	{r7}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
 8005556:	60f8      	str	r0, [r7, #12]
 8005558:	60b9      	str	r1, [r7, #8]
 800555a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	3b04      	subs	r3, #4
 8005560:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005568:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	3b04      	subs	r3, #4
 800556e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	f023 0201 	bic.w	r2, r3, #1
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	3b04      	subs	r3, #4
 800557e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005580:	4a0c      	ldr	r2, [pc, #48]	; (80055b4 <pxPortInitialiseStack+0x64>)
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	3b14      	subs	r3, #20
 800558a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	3b04      	subs	r3, #4
 8005596:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f06f 0202 	mvn.w	r2, #2
 800559e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	3b20      	subs	r3, #32
 80055a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80055a6:	68fb      	ldr	r3, [r7, #12]
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3714      	adds	r7, #20
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr
 80055b4:	080055b9 	.word	0x080055b9

080055b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80055be:	2300      	movs	r3, #0
 80055c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80055c2:	4b12      	ldr	r3, [pc, #72]	; (800560c <prvTaskExitError+0x54>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055ca:	d00a      	beq.n	80055e2 <prvTaskExitError+0x2a>
	__asm volatile
 80055cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d0:	f383 8811 	msr	BASEPRI, r3
 80055d4:	f3bf 8f6f 	isb	sy
 80055d8:	f3bf 8f4f 	dsb	sy
 80055dc:	60fb      	str	r3, [r7, #12]
}
 80055de:	bf00      	nop
 80055e0:	e7fe      	b.n	80055e0 <prvTaskExitError+0x28>
	__asm volatile
 80055e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e6:	f383 8811 	msr	BASEPRI, r3
 80055ea:	f3bf 8f6f 	isb	sy
 80055ee:	f3bf 8f4f 	dsb	sy
 80055f2:	60bb      	str	r3, [r7, #8]
}
 80055f4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80055f6:	bf00      	nop
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d0fc      	beq.n	80055f8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80055fe:	bf00      	nop
 8005600:	bf00      	nop
 8005602:	3714      	adds	r7, #20
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr
 800560c:	2000000c 	.word	0x2000000c

08005610 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005610:	4b07      	ldr	r3, [pc, #28]	; (8005630 <pxCurrentTCBConst2>)
 8005612:	6819      	ldr	r1, [r3, #0]
 8005614:	6808      	ldr	r0, [r1, #0]
 8005616:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800561a:	f380 8809 	msr	PSP, r0
 800561e:	f3bf 8f6f 	isb	sy
 8005622:	f04f 0000 	mov.w	r0, #0
 8005626:	f380 8811 	msr	BASEPRI, r0
 800562a:	4770      	bx	lr
 800562c:	f3af 8000 	nop.w

08005630 <pxCurrentTCBConst2>:
 8005630:	20000cb0 	.word	0x20000cb0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005634:	bf00      	nop
 8005636:	bf00      	nop

08005638 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005638:	4808      	ldr	r0, [pc, #32]	; (800565c <prvPortStartFirstTask+0x24>)
 800563a:	6800      	ldr	r0, [r0, #0]
 800563c:	6800      	ldr	r0, [r0, #0]
 800563e:	f380 8808 	msr	MSP, r0
 8005642:	f04f 0000 	mov.w	r0, #0
 8005646:	f380 8814 	msr	CONTROL, r0
 800564a:	b662      	cpsie	i
 800564c:	b661      	cpsie	f
 800564e:	f3bf 8f4f 	dsb	sy
 8005652:	f3bf 8f6f 	isb	sy
 8005656:	df00      	svc	0
 8005658:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800565a:	bf00      	nop
 800565c:	e000ed08 	.word	0xe000ed08

08005660 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b086      	sub	sp, #24
 8005664:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005666:	4b46      	ldr	r3, [pc, #280]	; (8005780 <xPortStartScheduler+0x120>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a46      	ldr	r2, [pc, #280]	; (8005784 <xPortStartScheduler+0x124>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d10a      	bne.n	8005686 <xPortStartScheduler+0x26>
	__asm volatile
 8005670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005674:	f383 8811 	msr	BASEPRI, r3
 8005678:	f3bf 8f6f 	isb	sy
 800567c:	f3bf 8f4f 	dsb	sy
 8005680:	613b      	str	r3, [r7, #16]
}
 8005682:	bf00      	nop
 8005684:	e7fe      	b.n	8005684 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005686:	4b3e      	ldr	r3, [pc, #248]	; (8005780 <xPortStartScheduler+0x120>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a3f      	ldr	r2, [pc, #252]	; (8005788 <xPortStartScheduler+0x128>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d10a      	bne.n	80056a6 <xPortStartScheduler+0x46>
	__asm volatile
 8005690:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005694:	f383 8811 	msr	BASEPRI, r3
 8005698:	f3bf 8f6f 	isb	sy
 800569c:	f3bf 8f4f 	dsb	sy
 80056a0:	60fb      	str	r3, [r7, #12]
}
 80056a2:	bf00      	nop
 80056a4:	e7fe      	b.n	80056a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80056a6:	4b39      	ldr	r3, [pc, #228]	; (800578c <xPortStartScheduler+0x12c>)
 80056a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80056aa:	697b      	ldr	r3, [r7, #20]
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	22ff      	movs	r2, #255	; 0xff
 80056b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80056c0:	78fb      	ldrb	r3, [r7, #3]
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80056c8:	b2da      	uxtb	r2, r3
 80056ca:	4b31      	ldr	r3, [pc, #196]	; (8005790 <xPortStartScheduler+0x130>)
 80056cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80056ce:	4b31      	ldr	r3, [pc, #196]	; (8005794 <xPortStartScheduler+0x134>)
 80056d0:	2207      	movs	r2, #7
 80056d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80056d4:	e009      	b.n	80056ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80056d6:	4b2f      	ldr	r3, [pc, #188]	; (8005794 <xPortStartScheduler+0x134>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	3b01      	subs	r3, #1
 80056dc:	4a2d      	ldr	r2, [pc, #180]	; (8005794 <xPortStartScheduler+0x134>)
 80056de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80056e0:	78fb      	ldrb	r3, [r7, #3]
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	005b      	lsls	r3, r3, #1
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80056ea:	78fb      	ldrb	r3, [r7, #3]
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056f2:	2b80      	cmp	r3, #128	; 0x80
 80056f4:	d0ef      	beq.n	80056d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80056f6:	4b27      	ldr	r3, [pc, #156]	; (8005794 <xPortStartScheduler+0x134>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f1c3 0307 	rsb	r3, r3, #7
 80056fe:	2b04      	cmp	r3, #4
 8005700:	d00a      	beq.n	8005718 <xPortStartScheduler+0xb8>
	__asm volatile
 8005702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005706:	f383 8811 	msr	BASEPRI, r3
 800570a:	f3bf 8f6f 	isb	sy
 800570e:	f3bf 8f4f 	dsb	sy
 8005712:	60bb      	str	r3, [r7, #8]
}
 8005714:	bf00      	nop
 8005716:	e7fe      	b.n	8005716 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005718:	4b1e      	ldr	r3, [pc, #120]	; (8005794 <xPortStartScheduler+0x134>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	021b      	lsls	r3, r3, #8
 800571e:	4a1d      	ldr	r2, [pc, #116]	; (8005794 <xPortStartScheduler+0x134>)
 8005720:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005722:	4b1c      	ldr	r3, [pc, #112]	; (8005794 <xPortStartScheduler+0x134>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800572a:	4a1a      	ldr	r2, [pc, #104]	; (8005794 <xPortStartScheduler+0x134>)
 800572c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	b2da      	uxtb	r2, r3
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005736:	4b18      	ldr	r3, [pc, #96]	; (8005798 <xPortStartScheduler+0x138>)
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a17      	ldr	r2, [pc, #92]	; (8005798 <xPortStartScheduler+0x138>)
 800573c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005740:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005742:	4b15      	ldr	r3, [pc, #84]	; (8005798 <xPortStartScheduler+0x138>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a14      	ldr	r2, [pc, #80]	; (8005798 <xPortStartScheduler+0x138>)
 8005748:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800574c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800574e:	f000 f8dd 	bl	800590c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005752:	4b12      	ldr	r3, [pc, #72]	; (800579c <xPortStartScheduler+0x13c>)
 8005754:	2200      	movs	r2, #0
 8005756:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005758:	f000 f8fc 	bl	8005954 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800575c:	4b10      	ldr	r3, [pc, #64]	; (80057a0 <xPortStartScheduler+0x140>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a0f      	ldr	r2, [pc, #60]	; (80057a0 <xPortStartScheduler+0x140>)
 8005762:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005766:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005768:	f7ff ff66 	bl	8005638 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800576c:	f7ff fca4 	bl	80050b8 <vTaskSwitchContext>
	prvTaskExitError();
 8005770:	f7ff ff22 	bl	80055b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005774:	2300      	movs	r3, #0
}
 8005776:	4618      	mov	r0, r3
 8005778:	3718      	adds	r7, #24
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	e000ed00 	.word	0xe000ed00
 8005784:	410fc271 	.word	0x410fc271
 8005788:	410fc270 	.word	0x410fc270
 800578c:	e000e400 	.word	0xe000e400
 8005790:	20000ddc 	.word	0x20000ddc
 8005794:	20000de0 	.word	0x20000de0
 8005798:	e000ed20 	.word	0xe000ed20
 800579c:	2000000c 	.word	0x2000000c
 80057a0:	e000ef34 	.word	0xe000ef34

080057a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80057a4:	b480      	push	{r7}
 80057a6:	b083      	sub	sp, #12
 80057a8:	af00      	add	r7, sp, #0
	__asm volatile
 80057aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ae:	f383 8811 	msr	BASEPRI, r3
 80057b2:	f3bf 8f6f 	isb	sy
 80057b6:	f3bf 8f4f 	dsb	sy
 80057ba:	607b      	str	r3, [r7, #4]
}
 80057bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80057be:	4b0f      	ldr	r3, [pc, #60]	; (80057fc <vPortEnterCritical+0x58>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	3301      	adds	r3, #1
 80057c4:	4a0d      	ldr	r2, [pc, #52]	; (80057fc <vPortEnterCritical+0x58>)
 80057c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80057c8:	4b0c      	ldr	r3, [pc, #48]	; (80057fc <vPortEnterCritical+0x58>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d10f      	bne.n	80057f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80057d0:	4b0b      	ldr	r3, [pc, #44]	; (8005800 <vPortEnterCritical+0x5c>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00a      	beq.n	80057f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80057da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057de:	f383 8811 	msr	BASEPRI, r3
 80057e2:	f3bf 8f6f 	isb	sy
 80057e6:	f3bf 8f4f 	dsb	sy
 80057ea:	603b      	str	r3, [r7, #0]
}
 80057ec:	bf00      	nop
 80057ee:	e7fe      	b.n	80057ee <vPortEnterCritical+0x4a>
	}
}
 80057f0:	bf00      	nop
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr
 80057fc:	2000000c 	.word	0x2000000c
 8005800:	e000ed04 	.word	0xe000ed04

08005804 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005804:	b480      	push	{r7}
 8005806:	b083      	sub	sp, #12
 8005808:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800580a:	4b12      	ldr	r3, [pc, #72]	; (8005854 <vPortExitCritical+0x50>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d10a      	bne.n	8005828 <vPortExitCritical+0x24>
	__asm volatile
 8005812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005816:	f383 8811 	msr	BASEPRI, r3
 800581a:	f3bf 8f6f 	isb	sy
 800581e:	f3bf 8f4f 	dsb	sy
 8005822:	607b      	str	r3, [r7, #4]
}
 8005824:	bf00      	nop
 8005826:	e7fe      	b.n	8005826 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005828:	4b0a      	ldr	r3, [pc, #40]	; (8005854 <vPortExitCritical+0x50>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	3b01      	subs	r3, #1
 800582e:	4a09      	ldr	r2, [pc, #36]	; (8005854 <vPortExitCritical+0x50>)
 8005830:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005832:	4b08      	ldr	r3, [pc, #32]	; (8005854 <vPortExitCritical+0x50>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d105      	bne.n	8005846 <vPortExitCritical+0x42>
 800583a:	2300      	movs	r3, #0
 800583c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	f383 8811 	msr	BASEPRI, r3
}
 8005844:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005846:	bf00      	nop
 8005848:	370c      	adds	r7, #12
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
 8005852:	bf00      	nop
 8005854:	2000000c 	.word	0x2000000c
	...

08005860 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005860:	f3ef 8009 	mrs	r0, PSP
 8005864:	f3bf 8f6f 	isb	sy
 8005868:	4b15      	ldr	r3, [pc, #84]	; (80058c0 <pxCurrentTCBConst>)
 800586a:	681a      	ldr	r2, [r3, #0]
 800586c:	f01e 0f10 	tst.w	lr, #16
 8005870:	bf08      	it	eq
 8005872:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005876:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800587a:	6010      	str	r0, [r2, #0]
 800587c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005880:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005884:	f380 8811 	msr	BASEPRI, r0
 8005888:	f3bf 8f4f 	dsb	sy
 800588c:	f3bf 8f6f 	isb	sy
 8005890:	f7ff fc12 	bl	80050b8 <vTaskSwitchContext>
 8005894:	f04f 0000 	mov.w	r0, #0
 8005898:	f380 8811 	msr	BASEPRI, r0
 800589c:	bc09      	pop	{r0, r3}
 800589e:	6819      	ldr	r1, [r3, #0]
 80058a0:	6808      	ldr	r0, [r1, #0]
 80058a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058a6:	f01e 0f10 	tst.w	lr, #16
 80058aa:	bf08      	it	eq
 80058ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80058b0:	f380 8809 	msr	PSP, r0
 80058b4:	f3bf 8f6f 	isb	sy
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	f3af 8000 	nop.w

080058c0 <pxCurrentTCBConst>:
 80058c0:	20000cb0 	.word	0x20000cb0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80058c4:	bf00      	nop
 80058c6:	bf00      	nop

080058c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b082      	sub	sp, #8
 80058cc:	af00      	add	r7, sp, #0
	__asm volatile
 80058ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d2:	f383 8811 	msr	BASEPRI, r3
 80058d6:	f3bf 8f6f 	isb	sy
 80058da:	f3bf 8f4f 	dsb	sy
 80058de:	607b      	str	r3, [r7, #4]
}
 80058e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80058e2:	f7ff fb31 	bl	8004f48 <xTaskIncrementTick>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d003      	beq.n	80058f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80058ec:	4b06      	ldr	r3, [pc, #24]	; (8005908 <SysTick_Handler+0x40>)
 80058ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058f2:	601a      	str	r2, [r3, #0]
 80058f4:	2300      	movs	r3, #0
 80058f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	f383 8811 	msr	BASEPRI, r3
}
 80058fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005900:	bf00      	nop
 8005902:	3708      	adds	r7, #8
 8005904:	46bd      	mov	sp, r7
 8005906:	bd80      	pop	{r7, pc}
 8005908:	e000ed04 	.word	0xe000ed04

0800590c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800590c:	b480      	push	{r7}
 800590e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005910:	4b0b      	ldr	r3, [pc, #44]	; (8005940 <vPortSetupTimerInterrupt+0x34>)
 8005912:	2200      	movs	r2, #0
 8005914:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005916:	4b0b      	ldr	r3, [pc, #44]	; (8005944 <vPortSetupTimerInterrupt+0x38>)
 8005918:	2200      	movs	r2, #0
 800591a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800591c:	4b0a      	ldr	r3, [pc, #40]	; (8005948 <vPortSetupTimerInterrupt+0x3c>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a0a      	ldr	r2, [pc, #40]	; (800594c <vPortSetupTimerInterrupt+0x40>)
 8005922:	fba2 2303 	umull	r2, r3, r2, r3
 8005926:	099b      	lsrs	r3, r3, #6
 8005928:	4a09      	ldr	r2, [pc, #36]	; (8005950 <vPortSetupTimerInterrupt+0x44>)
 800592a:	3b01      	subs	r3, #1
 800592c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800592e:	4b04      	ldr	r3, [pc, #16]	; (8005940 <vPortSetupTimerInterrupt+0x34>)
 8005930:	2207      	movs	r2, #7
 8005932:	601a      	str	r2, [r3, #0]
}
 8005934:	bf00      	nop
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop
 8005940:	e000e010 	.word	0xe000e010
 8005944:	e000e018 	.word	0xe000e018
 8005948:	20000000 	.word	0x20000000
 800594c:	10624dd3 	.word	0x10624dd3
 8005950:	e000e014 	.word	0xe000e014

08005954 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005954:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005964 <vPortEnableVFP+0x10>
 8005958:	6801      	ldr	r1, [r0, #0]
 800595a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800595e:	6001      	str	r1, [r0, #0]
 8005960:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005962:	bf00      	nop
 8005964:	e000ed88 	.word	0xe000ed88

08005968 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800596e:	f3ef 8305 	mrs	r3, IPSR
 8005972:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2b0f      	cmp	r3, #15
 8005978:	d914      	bls.n	80059a4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800597a:	4a17      	ldr	r2, [pc, #92]	; (80059d8 <vPortValidateInterruptPriority+0x70>)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	4413      	add	r3, r2
 8005980:	781b      	ldrb	r3, [r3, #0]
 8005982:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005984:	4b15      	ldr	r3, [pc, #84]	; (80059dc <vPortValidateInterruptPriority+0x74>)
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	7afa      	ldrb	r2, [r7, #11]
 800598a:	429a      	cmp	r2, r3
 800598c:	d20a      	bcs.n	80059a4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800598e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005992:	f383 8811 	msr	BASEPRI, r3
 8005996:	f3bf 8f6f 	isb	sy
 800599a:	f3bf 8f4f 	dsb	sy
 800599e:	607b      	str	r3, [r7, #4]
}
 80059a0:	bf00      	nop
 80059a2:	e7fe      	b.n	80059a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80059a4:	4b0e      	ldr	r3, [pc, #56]	; (80059e0 <vPortValidateInterruptPriority+0x78>)
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80059ac:	4b0d      	ldr	r3, [pc, #52]	; (80059e4 <vPortValidateInterruptPriority+0x7c>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d90a      	bls.n	80059ca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80059b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b8:	f383 8811 	msr	BASEPRI, r3
 80059bc:	f3bf 8f6f 	isb	sy
 80059c0:	f3bf 8f4f 	dsb	sy
 80059c4:	603b      	str	r3, [r7, #0]
}
 80059c6:	bf00      	nop
 80059c8:	e7fe      	b.n	80059c8 <vPortValidateInterruptPriority+0x60>
	}
 80059ca:	bf00      	nop
 80059cc:	3714      	adds	r7, #20
 80059ce:	46bd      	mov	sp, r7
 80059d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d4:	4770      	bx	lr
 80059d6:	bf00      	nop
 80059d8:	e000e3f0 	.word	0xe000e3f0
 80059dc:	20000ddc 	.word	0x20000ddc
 80059e0:	e000ed0c 	.word	0xe000ed0c
 80059e4:	20000de0 	.word	0x20000de0

080059e8 <itm_debug1>:

void _itm_debug3(int err, const char *msg, int32_t v1, int32_t v2, int32_t v3, int n);


static inline void itm_debug1(uint32_t f, const char *msg, int32_t v)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b086      	sub	sp, #24
 80059ec:	af02      	add	r7, sp, #8
 80059ee:	60f8      	str	r0, [r7, #12]
 80059f0:	60b9      	str	r1, [r7, #8]
 80059f2:	607a      	str	r2, [r7, #4]
	if (f & debug_flags) _itm_debug3(f & DBG_ERR, msg, v, 0, 0, 1);
 80059f4:	4b0a      	ldr	r3, [pc, #40]	; (8005a20 <itm_debug1+0x38>)
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	4013      	ands	r3, r2
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d00b      	beq.n	8005a18 <itm_debug1+0x30>
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f003 4000 	and.w	r0, r3, #2147483648	; 0x80000000
 8005a06:	2301      	movs	r3, #1
 8005a08:	9301      	str	r3, [sp, #4]
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	9300      	str	r3, [sp, #0]
 8005a0e:	2300      	movs	r3, #0
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	68b9      	ldr	r1, [r7, #8]
 8005a14:	f000 f954 	bl	8005cc0 <_itm_debug3>
}
 8005a18:	bf00      	nop
 8005a1a:	3710      	adds	r7, #16
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	200000b0 	.word	0x200000b0

08005a24 <HAL_UART_TxCpltCallback>:
	return 0;
}

//void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart);
void HAL_UART_TxCpltCallback(_UNUSED_ UART_HandleTypeDef *huart)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b088      	sub	sp, #32
 8005a28:	af02      	add	r7, sp, #8
 8005a2a:	6078      	str	r0, [r7, #4]
	int port = -1;
 8005a2c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005a30:	617b      	str	r3, [r7, #20]
	for (int p=0; p<NUM_SERIALS; p++) {
 8005a32:	2300      	movs	r3, #0
 8005a34:	613b      	str	r3, [r7, #16]
 8005a36:	e011      	b.n	8005a5c <HAL_UART_TxCpltCallback+0x38>
		if (serials[p].uart == huart) {
 8005a38:	4929      	ldr	r1, [pc, #164]	; (8005ae0 <HAL_UART_TxCpltCallback+0xbc>)
 8005a3a:	693a      	ldr	r2, [r7, #16]
 8005a3c:	4613      	mov	r3, r2
 8005a3e:	00db      	lsls	r3, r3, #3
 8005a40:	1a9b      	subs	r3, r3, r2
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	440b      	add	r3, r1
 8005a46:	3304      	adds	r3, #4
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	429a      	cmp	r2, r3
 8005a4e:	d102      	bne.n	8005a56 <HAL_UART_TxCpltCallback+0x32>
			port = p;
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	617b      	str	r3, [r7, #20]
			break;
 8005a54:	e005      	b.n	8005a62 <HAL_UART_TxCpltCallback+0x3e>
	for (int p=0; p<NUM_SERIALS; p++) {
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	3301      	adds	r3, #1
 8005a5a:	613b      	str	r3, [r7, #16]
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	2b03      	cmp	r3, #3
 8005a60:	ddea      	ble.n	8005a38 <HAL_UART_TxCpltCallback+0x14>
		}
	}
	if (port < 0) {
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	da06      	bge.n	8005a76 <HAL_UART_TxCpltCallback+0x52>
		itm_debug1(DBG_ERR|DBG_SERIAL, "bad uart", (int)huart);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	461a      	mov	r2, r3
 8005a6c:	491d      	ldr	r1, [pc, #116]	; (8005ae4 <HAL_UART_TxCpltCallback+0xc0>)
 8005a6e:	481e      	ldr	r0, [pc, #120]	; (8005ae8 <HAL_UART_TxCpltCallback+0xc4>)
 8005a70:	f7ff ffba 	bl	80059e8 <itm_debug1>
		return;
 8005a74:	e030      	b.n	8005ad8 <HAL_UART_TxCpltCallback+0xb4>
	}

	serial_t *s = &serials[port];
 8005a76:	697a      	ldr	r2, [r7, #20]
 8005a78:	4613      	mov	r3, r2
 8005a7a:	00db      	lsls	r3, r3, #3
 8005a7c:	1a9b      	subs	r3, r3, r2
 8005a7e:	009b      	lsls	r3, r3, #2
 8005a80:	4a17      	ldr	r2, [pc, #92]	; (8005ae0 <HAL_UART_TxCpltCallback+0xbc>)
 8005a82:	4413      	add	r3, r2
 8005a84:	60fb      	str	r3, [r7, #12]
	s->txonprogress = 0;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	751a      	strb	r2, [r3, #20]

	BaseType_t higher=0;
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	60bb      	str	r3, [r7, #8]
	if (!s->taskHandle) {
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d106      	bne.n	8005aa6 <HAL_UART_TxCpltCallback+0x82>
		itm_debug1(DBG_ERR, "notask", port);
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	4914      	ldr	r1, [pc, #80]	; (8005aec <HAL_UART_TxCpltCallback+0xc8>)
 8005a9c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8005aa0:	f7ff ffa2 	bl	80059e8 <itm_debug1>
		return;
 8005aa4:	e018      	b.n	8005ad8 <HAL_UART_TxCpltCallback+0xb4>
	}
	xTaskNotifyFromISR(s->taskHandle, NOTIFY_UART_TX(port), eSetBits, &higher);
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6818      	ldr	r0, [r3, #0]
 8005aaa:	2210      	movs	r2, #16
 8005aac:	697b      	ldr	r3, [r7, #20]
 8005aae:	fa02 f303 	lsl.w	r3, r2, r3
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	f107 0308 	add.w	r3, r7, #8
 8005ab8:	9300      	str	r3, [sp, #0]
 8005aba:	2300      	movs	r3, #0
 8005abc:	2201      	movs	r2, #1
 8005abe:	f7ff fc07 	bl	80052d0 <xTaskGenericNotifyFromISR>
	portYIELD_FROM_ISR(higher);
 8005ac2:	68bb      	ldr	r3, [r7, #8]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d007      	beq.n	8005ad8 <HAL_UART_TxCpltCallback+0xb4>
 8005ac8:	4b09      	ldr	r3, [pc, #36]	; (8005af0 <HAL_UART_TxCpltCallback+0xcc>)
 8005aca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ace:	601a      	str	r2, [r3, #0]
 8005ad0:	f3bf 8f4f 	dsb	sy
 8005ad4:	f3bf 8f6f 	isb	sy
}
 8005ad8:	3718      	adds	r7, #24
 8005ada:	46bd      	mov	sp, r7
 8005adc:	bd80      	pop	{r7, pc}
 8005ade:	bf00      	nop
 8005ae0:	20000040 	.word	0x20000040
 8005ae4:	08005fb0 	.word	0x08005fb0
 8005ae8:	80000004 	.word	0x80000004
 8005aec:	08005fbc 	.word	0x08005fbc
 8005af0:	e000ed04 	.word	0xe000ed04

08005af4 <bh>:


static void bh(void)
{
 8005af4:	b480      	push	{r7}
 8005af6:	af00      	add	r7, sp, #0
}
 8005af8:	bf00      	nop
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
	...

08005b04 <HAL_UARTEx_RxFifoFullCallback>:


void HAL_UARTEx_RxFifoFullCallback(_UNUSED_  UART_HandleTypeDef *huart)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
	itm_debug1(DBG_SERIAL, "RxFifoFull", 0);
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	4905      	ldr	r1, [pc, #20]	; (8005b24 <HAL_UARTEx_RxFifoFullCallback+0x20>)
 8005b10:	2004      	movs	r0, #4
 8005b12:	f7ff ff69 	bl	80059e8 <itm_debug1>
	bh();
 8005b16:	f7ff ffed 	bl	8005af4 <bh>
}
 8005b1a:	bf00      	nop
 8005b1c:	3708      	adds	r7, #8
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	08005fc4 	.word	0x08005fc4

08005b28 <HAL_UARTEx_RxEventCallback>:
}



void HAL_UARTEx_RxEventCallback(_UNUSED_ UART_HandleTypeDef *huart, _UNUSED_ uint16_t Size)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	460b      	mov	r3, r1
 8005b32:	807b      	strh	r3, [r7, #2]
	itm_debug1(DBG_SERIAL, "RxEvent", Size);
 8005b34:	887b      	ldrh	r3, [r7, #2]
 8005b36:	461a      	mov	r2, r3
 8005b38:	4904      	ldr	r1, [pc, #16]	; (8005b4c <HAL_UARTEx_RxEventCallback+0x24>)
 8005b3a:	2004      	movs	r0, #4
 8005b3c:	f7ff ff54 	bl	80059e8 <itm_debug1>
	bh();
 8005b40:	f7ff ffd8 	bl	8005af4 <bh>
}
 8005b44:	bf00      	nop
 8005b46:	3708      	adds	r7, #8
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	08005fe4 	.word	0x08005fe4

08005b50 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(_UNUSED_ UART_HandleTypeDef *huart)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
	itm_debug1(DBG_ERR|DBG_SERIAL, "RxErr", huart->ErrorCode);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b5e:	461a      	mov	r2, r3
 8005b60:	491c      	ldr	r1, [pc, #112]	; (8005bd4 <HAL_UART_ErrorCallback+0x84>)
 8005b62:	481d      	ldr	r0, [pc, #116]	; (8005bd8 <HAL_UART_ErrorCallback+0x88>)
 8005b64:	f7ff ff40 	bl	80059e8 <itm_debug1>
	bh();
 8005b68:	f7ff ffc4 	bl	8005af4 <bh>
	if (__HAL_UART_GET_FLAG(huart, UART_FLAG_PE) != RESET) {
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	69db      	ldr	r3, [r3, #28]
 8005b72:	f003 0301 	and.w	r3, r3, #1
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d104      	bne.n	8005b84 <HAL_UART_ErrorCallback+0x34>
		__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF); /* Clear PE flag */
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	621a      	str	r2, [r3, #32]
		__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF); /* Clear NE flag */
	} else if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) != RESET) {
		__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF); /* Clear ORE flag */
	}
	//_start_rx(0);
}
 8005b82:	e022      	b.n	8005bca <HAL_UART_ErrorCallback+0x7a>
	} else if (__HAL_UART_GET_FLAG(huart, UART_FLAG_FE) != RESET) {
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	69db      	ldr	r3, [r3, #28]
 8005b8a:	f003 0302 	and.w	r3, r3, #2
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d104      	bne.n	8005b9c <HAL_UART_ErrorCallback+0x4c>
		__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF); /* Clear FE flag */
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2202      	movs	r2, #2
 8005b98:	621a      	str	r2, [r3, #32]
}
 8005b9a:	e016      	b.n	8005bca <HAL_UART_ErrorCallback+0x7a>
	} else if (__HAL_UART_GET_FLAG(huart, UART_FLAG_NE) != RESET) {
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	69db      	ldr	r3, [r3, #28]
 8005ba2:	f003 0304 	and.w	r3, r3, #4
 8005ba6:	2b04      	cmp	r3, #4
 8005ba8:	d104      	bne.n	8005bb4 <HAL_UART_ErrorCallback+0x64>
		__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF); /* Clear NE flag */
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	2204      	movs	r2, #4
 8005bb0:	621a      	str	r2, [r3, #32]
}
 8005bb2:	e00a      	b.n	8005bca <HAL_UART_ErrorCallback+0x7a>
	} else if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) != RESET) {
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	69db      	ldr	r3, [r3, #28]
 8005bba:	f003 0308 	and.w	r3, r3, #8
 8005bbe:	2b08      	cmp	r3, #8
 8005bc0:	d103      	bne.n	8005bca <HAL_UART_ErrorCallback+0x7a>
		__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF); /* Clear ORE flag */
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	2208      	movs	r2, #8
 8005bc8:	621a      	str	r2, [r3, #32]
}
 8005bca:	bf00      	nop
 8005bcc:	3708      	adds	r7, #8
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	08005fec 	.word	0x08005fec
 8005bd8:	80000004 	.word	0x80000004

08005bdc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8005be4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8005be8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8005bec:	f003 0301 	and.w	r3, r3, #1
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d013      	beq.n	8005c1c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8005bf4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8005bf8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8005bfc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d00b      	beq.n	8005c1c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8005c04:	e000      	b.n	8005c08 <ITM_SendChar+0x2c>
    {
      __NOP();
 8005c06:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8005c08:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d0f9      	beq.n	8005c06 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8005c12:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	b2d2      	uxtb	r2, r2
 8005c1a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8005c1c:	687b      	ldr	r3, [r7, #4]
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	370c      	adds	r7, #12
 8005c22:	46bd      	mov	sp, r7
 8005c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c28:	4770      	bx	lr
	...

08005c2c <write_num>:




static void write_num(char *buf, uint32_t v, int ndigit)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b085      	sub	sp, #20
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	60f8      	str	r0, [r7, #12]
 8005c34:	60b9      	str	r1, [r7, #8]
 8005c36:	607a      	str	r2, [r7, #4]
	for (;ndigit>0; ndigit--) {
 8005c38:	e01a      	b.n	8005c70 <write_num+0x44>
		buf[ndigit-1] = '0'+ (v % 10);
 8005c3a:	68b9      	ldr	r1, [r7, #8]
 8005c3c:	4b11      	ldr	r3, [pc, #68]	; (8005c84 <write_num+0x58>)
 8005c3e:	fba3 2301 	umull	r2, r3, r3, r1
 8005c42:	08da      	lsrs	r2, r3, #3
 8005c44:	4613      	mov	r3, r2
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	4413      	add	r3, r2
 8005c4a:	005b      	lsls	r3, r3, #1
 8005c4c:	1aca      	subs	r2, r1, r3
 8005c4e:	b2d2      	uxtb	r2, r2
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	3b01      	subs	r3, #1
 8005c54:	68f9      	ldr	r1, [r7, #12]
 8005c56:	440b      	add	r3, r1
 8005c58:	3230      	adds	r2, #48	; 0x30
 8005c5a:	b2d2      	uxtb	r2, r2
 8005c5c:	701a      	strb	r2, [r3, #0]
		v = v/10;
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	4a08      	ldr	r2, [pc, #32]	; (8005c84 <write_num+0x58>)
 8005c62:	fba2 2303 	umull	r2, r3, r2, r3
 8005c66:	08db      	lsrs	r3, r3, #3
 8005c68:	60bb      	str	r3, [r7, #8]
	for (;ndigit>0; ndigit--) {
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	607b      	str	r3, [r7, #4]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	dce1      	bgt.n	8005c3a <write_num+0xe>
	}
}
 8005c76:	bf00      	nop
 8005c78:	bf00      	nop
 8005c7a:	3714      	adds	r7, #20
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr
 8005c84:	cccccccd 	.word	0xcccccccd

08005c88 <mywrite>:
}
#endif
#endif

static inline void mywrite(const char *ptr, int32_t len)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
#ifndef TRAIN_SIMU
	for (int i = 0; i < len; i++)
 8005c92:	2300      	movs	r3, #0
 8005c94:	60fb      	str	r3, [r7, #12]
 8005c96:	e009      	b.n	8005cac <mywrite+0x24>
	{
		ITM_SendChar(*ptr++);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	1c5a      	adds	r2, r3, #1
 8005c9c:	607a      	str	r2, [r7, #4]
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	f7ff ff9b 	bl	8005bdc <ITM_SendChar>
	for (int i = 0; i < len; i++)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	3301      	adds	r3, #1
 8005caa:	60fb      	str	r3, [r7, #12]
 8005cac:	68fa      	ldr	r2, [r7, #12]
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	dbf1      	blt.n	8005c98 <mywrite+0x10>
	}
#else
    ssize_t  write(int fildes, const void *buf, size_t nbyte);
    write(1, ptr, len);
#endif
}
 8005cb4:	bf00      	nop
 8005cb6:	bf00      	nop
 8005cb8:	3710      	adds	r7, #16
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	bd80      	pop	{r7, pc}
	...

08005cc0 <_itm_debug3>:
/*
 * before: StartCtrlTask max 858
 */

void _itm_debug3(int err, const char *msg, int32_t v1, int32_t v2, int32_t v3, int n)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b08a      	sub	sp, #40	; 0x28
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
 8005ccc:	603b      	str	r3, [r7, #0]
	char buf[12];
	memset(buf, 0, sizeof(buf));
 8005cce:	f107 0314 	add.w	r3, r7, #20
 8005cd2:	220c      	movs	r2, #12
 8005cd4:	2100      	movs	r1, #0
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f000 f90a 	bl	8005ef0 <memset>
    uint32_t tck = HAL_GetTick();
 8005cdc:	f7fb fb0a 	bl	80012f4 <HAL_GetTick>
 8005ce0:	6278      	str	r0, [r7, #36]	; 0x24
	write_num(buf, tck, 7);
 8005ce2:	f107 0314 	add.w	r3, r7, #20
 8005ce6:	2207      	movs	r2, #7
 8005ce8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005cea:	4618      	mov	r0, r3
 8005cec:	f7ff ff9e 	bl	8005c2c <write_num>
	buf[7] = err ? '@' : ':';
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d001      	beq.n	8005cfa <_itm_debug3+0x3a>
 8005cf6:	2340      	movs	r3, #64	; 0x40
 8005cf8:	e000      	b.n	8005cfc <_itm_debug3+0x3c>
 8005cfa:	233a      	movs	r3, #58	; 0x3a
 8005cfc:	76fb      	strb	r3, [r7, #27]
	mywrite(buf, 8);
 8005cfe:	f107 0314 	add.w	r3, r7, #20
 8005d02:	2108      	movs	r1, #8
 8005d04:	4618      	mov	r0, r3
 8005d06:	f7ff ffbf 	bl	8005c88 <mywrite>
	int l = MIN(12, (int)strlen(msg));
 8005d0a:	68b8      	ldr	r0, [r7, #8]
 8005d0c:	f7fa fa88 	bl	8000220 <strlen>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b0c      	cmp	r3, #12
 8005d14:	dc04      	bgt.n	8005d20 <_itm_debug3+0x60>
 8005d16:	68b8      	ldr	r0, [r7, #8]
 8005d18:	f7fa fa82 	bl	8000220 <strlen>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	e000      	b.n	8005d22 <_itm_debug3+0x62>
 8005d20:	230c      	movs	r3, #12
 8005d22:	623b      	str	r3, [r7, #32]
	mywrite(msg, l);
 8005d24:	6a39      	ldr	r1, [r7, #32]
 8005d26:	68b8      	ldr	r0, [r7, #8]
 8005d28:	f7ff ffae 	bl	8005c88 <mywrite>
	if (!n--) goto done;
 8005d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d2e:	1e5a      	subs	r2, r3, #1
 8005d30:	637a      	str	r2, [r7, #52]	; 0x34
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d071      	beq.n	8005e1a <_itm_debug3+0x15a>

	buf[0] = '/';
 8005d36:	232f      	movs	r3, #47	; 0x2f
 8005d38:	753b      	strb	r3, [r7, #20]
	itoa(v1, buf+1, 10);
 8005d3a:	f107 0314 	add.w	r3, r7, #20
 8005d3e:	3301      	adds	r3, #1
 8005d40:	220a      	movs	r2, #10
 8005d42:	4619      	mov	r1, r3
 8005d44:	6878      	ldr	r0, [r7, #4]
 8005d46:	f000 f88f 	bl	8005e68 <itoa>
    l = MIN(12, (int)strlen(buf));
 8005d4a:	f107 0314 	add.w	r3, r7, #20
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f7fa fa66 	bl	8000220 <strlen>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b0c      	cmp	r3, #12
 8005d58:	dc06      	bgt.n	8005d68 <_itm_debug3+0xa8>
 8005d5a:	f107 0314 	add.w	r3, r7, #20
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f7fa fa5e 	bl	8000220 <strlen>
 8005d64:	4603      	mov	r3, r0
 8005d66:	e000      	b.n	8005d6a <_itm_debug3+0xaa>
 8005d68:	230c      	movs	r3, #12
 8005d6a:	623b      	str	r3, [r7, #32]
    mywrite(buf, l);
 8005d6c:	f107 0314 	add.w	r3, r7, #20
 8005d70:	6a39      	ldr	r1, [r7, #32]
 8005d72:	4618      	mov	r0, r3
 8005d74:	f7ff ff88 	bl	8005c88 <mywrite>
	if (!n--) goto done;
 8005d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d7a:	1e5a      	subs	r2, r3, #1
 8005d7c:	637a      	str	r2, [r7, #52]	; 0x34
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d04d      	beq.n	8005e1e <_itm_debug3+0x15e>

	buf[0] = '/';
 8005d82:	232f      	movs	r3, #47	; 0x2f
 8005d84:	753b      	strb	r3, [r7, #20]
	itoa(v2, buf+1, 10);
 8005d86:	f107 0314 	add.w	r3, r7, #20
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	220a      	movs	r2, #10
 8005d8e:	4619      	mov	r1, r3
 8005d90:	6838      	ldr	r0, [r7, #0]
 8005d92:	f000 f869 	bl	8005e68 <itoa>
    l = MIN(12, (int)strlen(buf));
 8005d96:	f107 0314 	add.w	r3, r7, #20
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f7fa fa40 	bl	8000220 <strlen>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b0c      	cmp	r3, #12
 8005da4:	dc06      	bgt.n	8005db4 <_itm_debug3+0xf4>
 8005da6:	f107 0314 	add.w	r3, r7, #20
 8005daa:	4618      	mov	r0, r3
 8005dac:	f7fa fa38 	bl	8000220 <strlen>
 8005db0:	4603      	mov	r3, r0
 8005db2:	e000      	b.n	8005db6 <_itm_debug3+0xf6>
 8005db4:	230c      	movs	r3, #12
 8005db6:	623b      	str	r3, [r7, #32]
    mywrite(buf, l);
 8005db8:	f107 0314 	add.w	r3, r7, #20
 8005dbc:	6a39      	ldr	r1, [r7, #32]
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f7ff ff62 	bl	8005c88 <mywrite>
	if (!n--) goto done;
 8005dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dc6:	1e5a      	subs	r2, r3, #1
 8005dc8:	637a      	str	r2, [r7, #52]	; 0x34
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d029      	beq.n	8005e22 <_itm_debug3+0x162>

	buf[0] = '/';
 8005dce:	232f      	movs	r3, #47	; 0x2f
 8005dd0:	753b      	strb	r3, [r7, #20]
	itoa(v3, buf+1, 10);
 8005dd2:	f107 0314 	add.w	r3, r7, #20
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	220a      	movs	r2, #10
 8005dda:	4619      	mov	r1, r3
 8005ddc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005dde:	f000 f843 	bl	8005e68 <itoa>
    l = MIN(12, (int)strlen(buf));
 8005de2:	f107 0314 	add.w	r3, r7, #20
 8005de6:	4618      	mov	r0, r3
 8005de8:	f7fa fa1a 	bl	8000220 <strlen>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b0c      	cmp	r3, #12
 8005df0:	dc06      	bgt.n	8005e00 <_itm_debug3+0x140>
 8005df2:	f107 0314 	add.w	r3, r7, #20
 8005df6:	4618      	mov	r0, r3
 8005df8:	f7fa fa12 	bl	8000220 <strlen>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	e000      	b.n	8005e02 <_itm_debug3+0x142>
 8005e00:	230c      	movs	r3, #12
 8005e02:	623b      	str	r3, [r7, #32]
    mywrite(buf, l);
 8005e04:	f107 0314 	add.w	r3, r7, #20
 8005e08:	6a39      	ldr	r1, [r7, #32]
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	f7ff ff3c 	bl	8005c88 <mywrite>
	if (!n--) goto done;
 8005e10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e12:	1e5a      	subs	r2, r3, #1
 8005e14:	637a      	str	r2, [r7, #52]	; 0x34
 8005e16:	2b00      	cmp	r3, #0

done:
 8005e18:	e004      	b.n	8005e24 <_itm_debug3+0x164>
	if (!n--) goto done;
 8005e1a:	bf00      	nop
 8005e1c:	e002      	b.n	8005e24 <_itm_debug3+0x164>
	if (!n--) goto done;
 8005e1e:	bf00      	nop
 8005e20:	e000      	b.n	8005e24 <_itm_debug3+0x164>
	if (!n--) goto done;
 8005e22:	bf00      	nop
	mywrite("\n", 1);
 8005e24:	2101      	movs	r1, #1
 8005e26:	4803      	ldr	r0, [pc, #12]	; (8005e34 <_itm_debug3+0x174>)
 8005e28:	f7ff ff2e 	bl	8005c88 <mywrite>
}
 8005e2c:	bf00      	nop
 8005e2e:	3728      	adds	r7, #40	; 0x28
 8005e30:	46bd      	mov	sp, r7
 8005e32:	bd80      	pop	{r7, pc}
 8005e34:	08005ff4 	.word	0x08005ff4

08005e38 <__itoa>:
 8005e38:	1e93      	subs	r3, r2, #2
 8005e3a:	2b22      	cmp	r3, #34	; 0x22
 8005e3c:	b510      	push	{r4, lr}
 8005e3e:	460c      	mov	r4, r1
 8005e40:	d904      	bls.n	8005e4c <__itoa+0x14>
 8005e42:	2300      	movs	r3, #0
 8005e44:	700b      	strb	r3, [r1, #0]
 8005e46:	461c      	mov	r4, r3
 8005e48:	4620      	mov	r0, r4
 8005e4a:	bd10      	pop	{r4, pc}
 8005e4c:	2a0a      	cmp	r2, #10
 8005e4e:	d109      	bne.n	8005e64 <__itoa+0x2c>
 8005e50:	2800      	cmp	r0, #0
 8005e52:	da07      	bge.n	8005e64 <__itoa+0x2c>
 8005e54:	232d      	movs	r3, #45	; 0x2d
 8005e56:	700b      	strb	r3, [r1, #0]
 8005e58:	4240      	negs	r0, r0
 8005e5a:	2101      	movs	r1, #1
 8005e5c:	4421      	add	r1, r4
 8005e5e:	f000 f805 	bl	8005e6c <__utoa>
 8005e62:	e7f1      	b.n	8005e48 <__itoa+0x10>
 8005e64:	2100      	movs	r1, #0
 8005e66:	e7f9      	b.n	8005e5c <__itoa+0x24>

08005e68 <itoa>:
 8005e68:	f7ff bfe6 	b.w	8005e38 <__itoa>

08005e6c <__utoa>:
 8005e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e6e:	4c1f      	ldr	r4, [pc, #124]	; (8005eec <__utoa+0x80>)
 8005e70:	b08b      	sub	sp, #44	; 0x2c
 8005e72:	4605      	mov	r5, r0
 8005e74:	460b      	mov	r3, r1
 8005e76:	466e      	mov	r6, sp
 8005e78:	f104 0c20 	add.w	ip, r4, #32
 8005e7c:	6820      	ldr	r0, [r4, #0]
 8005e7e:	6861      	ldr	r1, [r4, #4]
 8005e80:	4637      	mov	r7, r6
 8005e82:	c703      	stmia	r7!, {r0, r1}
 8005e84:	3408      	adds	r4, #8
 8005e86:	4564      	cmp	r4, ip
 8005e88:	463e      	mov	r6, r7
 8005e8a:	d1f7      	bne.n	8005e7c <__utoa+0x10>
 8005e8c:	7921      	ldrb	r1, [r4, #4]
 8005e8e:	7139      	strb	r1, [r7, #4]
 8005e90:	1e91      	subs	r1, r2, #2
 8005e92:	6820      	ldr	r0, [r4, #0]
 8005e94:	6038      	str	r0, [r7, #0]
 8005e96:	2922      	cmp	r1, #34	; 0x22
 8005e98:	f04f 0100 	mov.w	r1, #0
 8005e9c:	d904      	bls.n	8005ea8 <__utoa+0x3c>
 8005e9e:	7019      	strb	r1, [r3, #0]
 8005ea0:	460b      	mov	r3, r1
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	b00b      	add	sp, #44	; 0x2c
 8005ea6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ea8:	1e58      	subs	r0, r3, #1
 8005eaa:	4684      	mov	ip, r0
 8005eac:	fbb5 f7f2 	udiv	r7, r5, r2
 8005eb0:	fb02 5617 	mls	r6, r2, r7, r5
 8005eb4:	3628      	adds	r6, #40	; 0x28
 8005eb6:	446e      	add	r6, sp
 8005eb8:	460c      	mov	r4, r1
 8005eba:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8005ebe:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8005ec2:	462e      	mov	r6, r5
 8005ec4:	42b2      	cmp	r2, r6
 8005ec6:	f101 0101 	add.w	r1, r1, #1
 8005eca:	463d      	mov	r5, r7
 8005ecc:	d9ee      	bls.n	8005eac <__utoa+0x40>
 8005ece:	2200      	movs	r2, #0
 8005ed0:	545a      	strb	r2, [r3, r1]
 8005ed2:	1919      	adds	r1, r3, r4
 8005ed4:	1aa5      	subs	r5, r4, r2
 8005ed6:	42aa      	cmp	r2, r5
 8005ed8:	dae3      	bge.n	8005ea2 <__utoa+0x36>
 8005eda:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8005ede:	780e      	ldrb	r6, [r1, #0]
 8005ee0:	7006      	strb	r6, [r0, #0]
 8005ee2:	3201      	adds	r2, #1
 8005ee4:	f801 5901 	strb.w	r5, [r1], #-1
 8005ee8:	e7f4      	b.n	8005ed4 <__utoa+0x68>
 8005eea:	bf00      	nop
 8005eec:	08006038 	.word	0x08006038

08005ef0 <memset>:
 8005ef0:	4402      	add	r2, r0
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d100      	bne.n	8005efa <memset+0xa>
 8005ef8:	4770      	bx	lr
 8005efa:	f803 1b01 	strb.w	r1, [r3], #1
 8005efe:	e7f9      	b.n	8005ef4 <memset+0x4>

08005f00 <__libc_init_array>:
 8005f00:	b570      	push	{r4, r5, r6, lr}
 8005f02:	4d0d      	ldr	r5, [pc, #52]	; (8005f38 <__libc_init_array+0x38>)
 8005f04:	4c0d      	ldr	r4, [pc, #52]	; (8005f3c <__libc_init_array+0x3c>)
 8005f06:	1b64      	subs	r4, r4, r5
 8005f08:	10a4      	asrs	r4, r4, #2
 8005f0a:	2600      	movs	r6, #0
 8005f0c:	42a6      	cmp	r6, r4
 8005f0e:	d109      	bne.n	8005f24 <__libc_init_array+0x24>
 8005f10:	4d0b      	ldr	r5, [pc, #44]	; (8005f40 <__libc_init_array+0x40>)
 8005f12:	4c0c      	ldr	r4, [pc, #48]	; (8005f44 <__libc_init_array+0x44>)
 8005f14:	f000 f818 	bl	8005f48 <_init>
 8005f18:	1b64      	subs	r4, r4, r5
 8005f1a:	10a4      	asrs	r4, r4, #2
 8005f1c:	2600      	movs	r6, #0
 8005f1e:	42a6      	cmp	r6, r4
 8005f20:	d105      	bne.n	8005f2e <__libc_init_array+0x2e>
 8005f22:	bd70      	pop	{r4, r5, r6, pc}
 8005f24:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f28:	4798      	blx	r3
 8005f2a:	3601      	adds	r6, #1
 8005f2c:	e7ee      	b.n	8005f0c <__libc_init_array+0xc>
 8005f2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f32:	4798      	blx	r3
 8005f34:	3601      	adds	r6, #1
 8005f36:	e7f2      	b.n	8005f1e <__libc_init_array+0x1e>
 8005f38:	08006068 	.word	0x08006068
 8005f3c:	08006068 	.word	0x08006068
 8005f40:	08006068 	.word	0x08006068
 8005f44:	0800606c 	.word	0x0800606c

08005f48 <_init>:
 8005f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f4a:	bf00      	nop
 8005f4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f4e:	bc08      	pop	{r3}
 8005f50:	469e      	mov	lr, r3
 8005f52:	4770      	bx	lr

08005f54 <_fini>:
 8005f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f56:	bf00      	nop
 8005f58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f5a:	bc08      	pop	{r3}
 8005f5c:	469e      	mov	lr, r3
 8005f5e:	4770      	bx	lr
